// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AspNetRoleClaim is an object representing the database table.
type AspNetRoleClaim struct {
	ID         int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	RoleId     string      `boil:"RoleId" json:"RoleId" toml:"RoleId" yaml:"RoleId"`
	ClaimType  null.String `boil:"ClaimType" json:"ClaimType,omitempty" toml:"ClaimType" yaml:"ClaimType,omitempty"`
	ClaimValue null.String `boil:"ClaimValue" json:"ClaimValue,omitempty" toml:"ClaimValue" yaml:"ClaimValue,omitempty"`

	R *aspNetRoleClaimR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aspNetRoleClaimL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AspNetRoleClaimColumns = struct {
	ID         string
	RoleId     string
	ClaimType  string
	ClaimValue string
}{
	ID:         "Id",
	RoleId:     "RoleId",
	ClaimType:  "ClaimType",
	ClaimValue: "ClaimValue",
}

var AspNetRoleClaimTableColumns = struct {
	ID         string
	RoleId     string
	ClaimType  string
	ClaimValue string
}{
	ID:         "AspNetRoleClaims.Id",
	RoleId:     "AspNetRoleClaims.RoleId",
	ClaimType:  "AspNetRoleClaims.ClaimType",
	ClaimValue: "AspNetRoleClaims.ClaimValue",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AspNetRoleClaimWhere = struct {
	ID         whereHelperint
	RoleId     whereHelperstring
	ClaimType  whereHelpernull_String
	ClaimValue whereHelpernull_String
}{
	ID:         whereHelperint{field: "[dbo].[AspNetRoleClaims].[Id]"},
	RoleId:     whereHelperstring{field: "[dbo].[AspNetRoleClaims].[RoleId]"},
	ClaimType:  whereHelpernull_String{field: "[dbo].[AspNetRoleClaims].[ClaimType]"},
	ClaimValue: whereHelpernull_String{field: "[dbo].[AspNetRoleClaims].[ClaimValue]"},
}

// AspNetRoleClaimRels is where relationship names are stored.
var AspNetRoleClaimRels = struct {
	RoleIdAspNetRole string
}{
	RoleIdAspNetRole: "RoleIdAspNetRole",
}

// aspNetRoleClaimR is where relationships are stored.
type aspNetRoleClaimR struct {
	RoleIdAspNetRole *AspNetRole `boil:"RoleIdAspNetRole" json:"RoleIdAspNetRole" toml:"RoleIdAspNetRole" yaml:"RoleIdAspNetRole"`
}

// NewStruct creates a new relationship struct
func (*aspNetRoleClaimR) NewStruct() *aspNetRoleClaimR {
	return &aspNetRoleClaimR{}
}

// aspNetRoleClaimL is where Load methods for each relationship are stored.
type aspNetRoleClaimL struct{}

var (
	aspNetRoleClaimAllColumns            = []string{"Id", "RoleId", "ClaimType", "ClaimValue"}
	aspNetRoleClaimColumnsWithAuto       = []string{}
	aspNetRoleClaimColumnsWithoutDefault = []string{"RoleId", "ClaimType", "ClaimValue"}
	aspNetRoleClaimColumnsWithDefault    = []string{"Id"}
	aspNetRoleClaimPrimaryKeyColumns     = []string{"Id"}
)

type (
	// AspNetRoleClaimSlice is an alias for a slice of pointers to AspNetRoleClaim.
	// This should almost always be used instead of []AspNetRoleClaim.
	AspNetRoleClaimSlice []*AspNetRoleClaim
	// AspNetRoleClaimHook is the signature for custom AspNetRoleClaim hook methods
	AspNetRoleClaimHook func(context.Context, boil.ContextExecutor, *AspNetRoleClaim) error

	aspNetRoleClaimQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aspNetRoleClaimType                 = reflect.TypeOf(&AspNetRoleClaim{})
	aspNetRoleClaimMapping              = queries.MakeStructMapping(aspNetRoleClaimType)
	aspNetRoleClaimPrimaryKeyMapping, _ = queries.BindMapping(aspNetRoleClaimType, aspNetRoleClaimMapping, aspNetRoleClaimPrimaryKeyColumns)
	aspNetRoleClaimInsertCacheMut       sync.RWMutex
	aspNetRoleClaimInsertCache          = make(map[string]insertCache)
	aspNetRoleClaimUpdateCacheMut       sync.RWMutex
	aspNetRoleClaimUpdateCache          = make(map[string]updateCache)
	aspNetRoleClaimUpsertCacheMut       sync.RWMutex
	aspNetRoleClaimUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aspNetRoleClaimBeforeInsertHooks []AspNetRoleClaimHook
var aspNetRoleClaimBeforeUpdateHooks []AspNetRoleClaimHook
var aspNetRoleClaimBeforeDeleteHooks []AspNetRoleClaimHook
var aspNetRoleClaimBeforeUpsertHooks []AspNetRoleClaimHook

var aspNetRoleClaimAfterInsertHooks []AspNetRoleClaimHook
var aspNetRoleClaimAfterSelectHooks []AspNetRoleClaimHook
var aspNetRoleClaimAfterUpdateHooks []AspNetRoleClaimHook
var aspNetRoleClaimAfterDeleteHooks []AspNetRoleClaimHook
var aspNetRoleClaimAfterUpsertHooks []AspNetRoleClaimHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AspNetRoleClaim) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleClaimBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AspNetRoleClaim) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleClaimBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AspNetRoleClaim) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleClaimBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AspNetRoleClaim) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleClaimBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AspNetRoleClaim) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleClaimAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AspNetRoleClaim) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleClaimAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AspNetRoleClaim) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleClaimAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AspNetRoleClaim) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleClaimAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AspNetRoleClaim) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleClaimAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAspNetRoleClaimHook registers your hook function for all future operations.
func AddAspNetRoleClaimHook(hookPoint boil.HookPoint, aspNetRoleClaimHook AspNetRoleClaimHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		aspNetRoleClaimBeforeInsertHooks = append(aspNetRoleClaimBeforeInsertHooks, aspNetRoleClaimHook)
	case boil.BeforeUpdateHook:
		aspNetRoleClaimBeforeUpdateHooks = append(aspNetRoleClaimBeforeUpdateHooks, aspNetRoleClaimHook)
	case boil.BeforeDeleteHook:
		aspNetRoleClaimBeforeDeleteHooks = append(aspNetRoleClaimBeforeDeleteHooks, aspNetRoleClaimHook)
	case boil.BeforeUpsertHook:
		aspNetRoleClaimBeforeUpsertHooks = append(aspNetRoleClaimBeforeUpsertHooks, aspNetRoleClaimHook)
	case boil.AfterInsertHook:
		aspNetRoleClaimAfterInsertHooks = append(aspNetRoleClaimAfterInsertHooks, aspNetRoleClaimHook)
	case boil.AfterSelectHook:
		aspNetRoleClaimAfterSelectHooks = append(aspNetRoleClaimAfterSelectHooks, aspNetRoleClaimHook)
	case boil.AfterUpdateHook:
		aspNetRoleClaimAfterUpdateHooks = append(aspNetRoleClaimAfterUpdateHooks, aspNetRoleClaimHook)
	case boil.AfterDeleteHook:
		aspNetRoleClaimAfterDeleteHooks = append(aspNetRoleClaimAfterDeleteHooks, aspNetRoleClaimHook)
	case boil.AfterUpsertHook:
		aspNetRoleClaimAfterUpsertHooks = append(aspNetRoleClaimAfterUpsertHooks, aspNetRoleClaimHook)
	}
}

// One returns a single aspNetRoleClaim record from the query.
func (q aspNetRoleClaimQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AspNetRoleClaim, error) {
	o := &AspNetRoleClaim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AspNetRoleClaims")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AspNetRoleClaim records from the query.
func (q aspNetRoleClaimQuery) All(ctx context.Context, exec boil.ContextExecutor) (AspNetRoleClaimSlice, error) {
	var o []*AspNetRoleClaim

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AspNetRoleClaim slice")
	}

	if len(aspNetRoleClaimAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AspNetRoleClaim records in the query.
func (q aspNetRoleClaimQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AspNetRoleClaims rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aspNetRoleClaimQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AspNetRoleClaims exists")
	}

	return count > 0, nil
}

// RoleIdAspNetRole pointed to by the foreign key.
func (o *AspNetRoleClaim) RoleIdAspNetRole(mods ...qm.QueryMod) aspNetRoleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("[Id] = ?", o.RoleId),
	}

	queryMods = append(queryMods, mods...)

	query := AspNetRoles(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[AspNetRoles]")

	return query
}

// LoadRoleIdAspNetRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aspNetRoleClaimL) LoadRoleIdAspNetRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAspNetRoleClaim interface{}, mods queries.Applicator) error {
	var slice []*AspNetRoleClaim
	var object *AspNetRoleClaim

	if singular {
		object = maybeAspNetRoleClaim.(*AspNetRoleClaim)
	} else {
		slice = *maybeAspNetRoleClaim.(*[]*AspNetRoleClaim)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aspNetRoleClaimR{}
		}
		args = append(args, object.RoleId)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aspNetRoleClaimR{}
			}

			for _, a := range args {
				if a == obj.RoleId {
					continue Outer
				}
			}

			args = append(args, obj.RoleId)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.AspNetRoles`),
		qm.WhereIn(`dbo.AspNetRoles.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AspNetRole")
	}

	var resultSlice []*AspNetRole
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AspNetRole")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for AspNetRoles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AspNetRoles")
	}

	if len(aspNetRoleClaimAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RoleIdAspNetRole = foreign
		if foreign.R == nil {
			foreign.R = &aspNetRoleR{}
		}
		foreign.R.RoleIdAspNetRoleClaims = append(foreign.R.RoleIdAspNetRoleClaims, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleId == foreign.ID {
				local.R.RoleIdAspNetRole = foreign
				if foreign.R == nil {
					foreign.R = &aspNetRoleR{}
				}
				foreign.R.RoleIdAspNetRoleClaims = append(foreign.R.RoleIdAspNetRoleClaims, local)
				break
			}
		}
	}

	return nil
}

// SetRoleIdAspNetRole of the aspNetRoleClaim to the related item.
// Sets o.R.RoleIdAspNetRole to related.
// Adds o to related.R.RoleIdAspNetRoleClaims.
func (o *AspNetRoleClaim) SetRoleIdAspNetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AspNetRole) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[AspNetRoleClaims] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"RoleId"}),
		strmangle.WhereClause("[", "]", 2, aspNetRoleClaimPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleId = related.ID
	if o.R == nil {
		o.R = &aspNetRoleClaimR{
			RoleIdAspNetRole: related,
		}
	} else {
		o.R.RoleIdAspNetRole = related
	}

	if related.R == nil {
		related.R = &aspNetRoleR{
			RoleIdAspNetRoleClaims: AspNetRoleClaimSlice{o},
		}
	} else {
		related.R.RoleIdAspNetRoleClaims = append(related.R.RoleIdAspNetRoleClaims, o)
	}

	return nil
}

// AspNetRoleClaims retrieves all the records using an executor.
func AspNetRoleClaims(mods ...qm.QueryMod) aspNetRoleClaimQuery {
	mods = append(mods, qm.From("[dbo].[AspNetRoleClaims]"))
	return aspNetRoleClaimQuery{NewQuery(mods...)}
}

// FindAspNetRoleClaim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAspNetRoleClaim(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AspNetRoleClaim, error) {
	aspNetRoleClaimObj := &AspNetRoleClaim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[AspNetRoleClaims] where [Id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, aspNetRoleClaimObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AspNetRoleClaims")
	}

	if err = aspNetRoleClaimObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aspNetRoleClaimObj, err
	}

	return aspNetRoleClaimObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AspNetRoleClaim) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetRoleClaims provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetRoleClaimColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aspNetRoleClaimInsertCacheMut.RLock()
	cache, cached := aspNetRoleClaimInsertCache[key]
	aspNetRoleClaimInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aspNetRoleClaimAllColumns,
			aspNetRoleClaimColumnsWithDefault,
			aspNetRoleClaimColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aspNetRoleClaimType, aspNetRoleClaimMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aspNetRoleClaimType, aspNetRoleClaimMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[AspNetRoleClaims] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[AspNetRoleClaims] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AspNetRoleClaims")
	}

	if !cached {
		aspNetRoleClaimInsertCacheMut.Lock()
		aspNetRoleClaimInsertCache[key] = cache
		aspNetRoleClaimInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AspNetRoleClaim.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AspNetRoleClaim) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aspNetRoleClaimUpdateCacheMut.RLock()
	cache, cached := aspNetRoleClaimUpdateCache[key]
	aspNetRoleClaimUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aspNetRoleClaimAllColumns,
			aspNetRoleClaimPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, aspNetRoleClaimColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AspNetRoleClaims, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[AspNetRoleClaims] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, aspNetRoleClaimPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aspNetRoleClaimType, aspNetRoleClaimMapping, append(wl, aspNetRoleClaimPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AspNetRoleClaims row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AspNetRoleClaims")
	}

	if !cached {
		aspNetRoleClaimUpdateCacheMut.Lock()
		aspNetRoleClaimUpdateCache[key] = cache
		aspNetRoleClaimUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aspNetRoleClaimQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AspNetRoleClaims")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AspNetRoleClaims")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AspNetRoleClaimSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetRoleClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[AspNetRoleClaims] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aspNetRoleClaimPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aspNetRoleClaim slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aspNetRoleClaim")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AspNetRoleClaim) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetRoleClaims provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetRoleClaimColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aspNetRoleClaimUpsertCacheMut.RLock()
	cache, cached := aspNetRoleClaimUpsertCache[key]
	aspNetRoleClaimUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			aspNetRoleClaimAllColumns,
			aspNetRoleClaimColumnsWithDefault,
			aspNetRoleClaimColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, aspNetRoleClaimColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(aspNetRoleClaimPrimaryKeyColumns, v) && strmangle.ContainsAny(aspNetRoleClaimColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert AspNetRoleClaims, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, aspNetRoleClaimColumnsWithAuto)
		ret = strmangle.SetMerge(ret, aspNetRoleClaimColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			aspNetRoleClaimAllColumns,
			aspNetRoleClaimPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, aspNetRoleClaimColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert AspNetRoleClaims, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[AspNetRoleClaims]", aspNetRoleClaimPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(aspNetRoleClaimPrimaryKeyColumns))
		copy(whitelist, aspNetRoleClaimPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(aspNetRoleClaimType, aspNetRoleClaimMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aspNetRoleClaimType, aspNetRoleClaimMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert AspNetRoleClaims")
	}

	if !cached {
		aspNetRoleClaimUpsertCacheMut.Lock()
		aspNetRoleClaimUpsertCache[key] = cache
		aspNetRoleClaimUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AspNetRoleClaim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AspNetRoleClaim) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AspNetRoleClaim provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aspNetRoleClaimPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[AspNetRoleClaims] WHERE [Id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AspNetRoleClaims")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AspNetRoleClaims")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aspNetRoleClaimQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aspNetRoleClaimQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AspNetRoleClaims")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetRoleClaims")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AspNetRoleClaimSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aspNetRoleClaimBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetRoleClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[AspNetRoleClaims] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetRoleClaimPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aspNetRoleClaim slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetRoleClaims")
	}

	if len(aspNetRoleClaimAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AspNetRoleClaim) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAspNetRoleClaim(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AspNetRoleClaimSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AspNetRoleClaimSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetRoleClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[AspNetRoleClaims].* FROM [dbo].[AspNetRoleClaims] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetRoleClaimPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AspNetRoleClaimSlice")
	}

	*o = slice

	return nil
}

// AspNetRoleClaimExists checks if the AspNetRoleClaim row exists.
func AspNetRoleClaimExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[AspNetRoleClaims] where [Id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AspNetRoleClaims exists")
	}

	return exists, nil
}
