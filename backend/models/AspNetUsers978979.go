// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AspNetUsers978979 is an object representing the database table.
type AspNetUsers978979 struct {
	ID                   string      `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	UserName             null.String `boil:"UserName" json:"UserName,omitempty" toml:"UserName" yaml:"UserName,omitempty"`
	NormalizedUserName   null.String `boil:"NormalizedUserName" json:"NormalizedUserName,omitempty" toml:"NormalizedUserName" yaml:"NormalizedUserName,omitempty"`
	Email                null.String `boil:"Email" json:"Email,omitempty" toml:"Email" yaml:"Email,omitempty"`
	NormalizedEmail      null.String `boil:"NormalizedEmail" json:"NormalizedEmail,omitempty" toml:"NormalizedEmail" yaml:"NormalizedEmail,omitempty"`
	EmailConfirmed       bool        `boil:"EmailConfirmed" json:"EmailConfirmed" toml:"EmailConfirmed" yaml:"EmailConfirmed"`
	PasswordHash         null.String `boil:"PasswordHash" json:"PasswordHash,omitempty" toml:"PasswordHash" yaml:"PasswordHash,omitempty"`
	SecurityStamp        null.String `boil:"SecurityStamp" json:"SecurityStamp,omitempty" toml:"SecurityStamp" yaml:"SecurityStamp,omitempty"`
	ConcurrencyStamp     null.String `boil:"ConcurrencyStamp" json:"ConcurrencyStamp,omitempty" toml:"ConcurrencyStamp" yaml:"ConcurrencyStamp,omitempty"`
	PhoneNumber          null.String `boil:"PhoneNumber" json:"PhoneNumber,omitempty" toml:"PhoneNumber" yaml:"PhoneNumber,omitempty"`
	PhoneNumberConfirmed bool        `boil:"PhoneNumberConfirmed" json:"PhoneNumberConfirmed" toml:"PhoneNumberConfirmed" yaml:"PhoneNumberConfirmed"`
	TwoFactorEnabled     bool        `boil:"TwoFactorEnabled" json:"TwoFactorEnabled" toml:"TwoFactorEnabled" yaml:"TwoFactorEnabled"`
	LockoutEnd           null.Time   `boil:"LockoutEnd" json:"LockoutEnd,omitempty" toml:"LockoutEnd" yaml:"LockoutEnd,omitempty"`
	LockoutEnabled       bool        `boil:"LockoutEnabled" json:"LockoutEnabled" toml:"LockoutEnabled" yaml:"LockoutEnabled"`
	AccessFailedCount    int         `boil:"AccessFailedCount" json:"AccessFailedCount" toml:"AccessFailedCount" yaml:"AccessFailedCount"`

	R *aspNetUsers978979R `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aspNetUsers978979L  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AspNetUsers978979Columns = struct {
	ID                   string
	UserName             string
	NormalizedUserName   string
	Email                string
	NormalizedEmail      string
	EmailConfirmed       string
	PasswordHash         string
	SecurityStamp        string
	ConcurrencyStamp     string
	PhoneNumber          string
	PhoneNumberConfirmed string
	TwoFactorEnabled     string
	LockoutEnd           string
	LockoutEnabled       string
	AccessFailedCount    string
}{
	ID:                   "Id",
	UserName:             "UserName",
	NormalizedUserName:   "NormalizedUserName",
	Email:                "Email",
	NormalizedEmail:      "NormalizedEmail",
	EmailConfirmed:       "EmailConfirmed",
	PasswordHash:         "PasswordHash",
	SecurityStamp:        "SecurityStamp",
	ConcurrencyStamp:     "ConcurrencyStamp",
	PhoneNumber:          "PhoneNumber",
	PhoneNumberConfirmed: "PhoneNumberConfirmed",
	TwoFactorEnabled:     "TwoFactorEnabled",
	LockoutEnd:           "LockoutEnd",
	LockoutEnabled:       "LockoutEnabled",
	AccessFailedCount:    "AccessFailedCount",
}

var AspNetUsers978979TableColumns = struct {
	ID                   string
	UserName             string
	NormalizedUserName   string
	Email                string
	NormalizedEmail      string
	EmailConfirmed       string
	PasswordHash         string
	SecurityStamp        string
	ConcurrencyStamp     string
	PhoneNumber          string
	PhoneNumberConfirmed string
	TwoFactorEnabled     string
	LockoutEnd           string
	LockoutEnabled       string
	AccessFailedCount    string
}{
	ID:                   "AspNetUsers978979.Id",
	UserName:             "AspNetUsers978979.UserName",
	NormalizedUserName:   "AspNetUsers978979.NormalizedUserName",
	Email:                "AspNetUsers978979.Email",
	NormalizedEmail:      "AspNetUsers978979.NormalizedEmail",
	EmailConfirmed:       "AspNetUsers978979.EmailConfirmed",
	PasswordHash:         "AspNetUsers978979.PasswordHash",
	SecurityStamp:        "AspNetUsers978979.SecurityStamp",
	ConcurrencyStamp:     "AspNetUsers978979.ConcurrencyStamp",
	PhoneNumber:          "AspNetUsers978979.PhoneNumber",
	PhoneNumberConfirmed: "AspNetUsers978979.PhoneNumberConfirmed",
	TwoFactorEnabled:     "AspNetUsers978979.TwoFactorEnabled",
	LockoutEnd:           "AspNetUsers978979.LockoutEnd",
	LockoutEnabled:       "AspNetUsers978979.LockoutEnabled",
	AccessFailedCount:    "AspNetUsers978979.AccessFailedCount",
}

// Generated where

var AspNetUsers978979Where = struct {
	ID                   whereHelperstring
	UserName             whereHelpernull_String
	NormalizedUserName   whereHelpernull_String
	Email                whereHelpernull_String
	NormalizedEmail      whereHelpernull_String
	EmailConfirmed       whereHelperbool
	PasswordHash         whereHelpernull_String
	SecurityStamp        whereHelpernull_String
	ConcurrencyStamp     whereHelpernull_String
	PhoneNumber          whereHelpernull_String
	PhoneNumberConfirmed whereHelperbool
	TwoFactorEnabled     whereHelperbool
	LockoutEnd           whereHelpernull_Time
	LockoutEnabled       whereHelperbool
	AccessFailedCount    whereHelperint
}{
	ID:                   whereHelperstring{field: "[dbo].[AspNetUsers978979].[Id]"},
	UserName:             whereHelpernull_String{field: "[dbo].[AspNetUsers978979].[UserName]"},
	NormalizedUserName:   whereHelpernull_String{field: "[dbo].[AspNetUsers978979].[NormalizedUserName]"},
	Email:                whereHelpernull_String{field: "[dbo].[AspNetUsers978979].[Email]"},
	NormalizedEmail:      whereHelpernull_String{field: "[dbo].[AspNetUsers978979].[NormalizedEmail]"},
	EmailConfirmed:       whereHelperbool{field: "[dbo].[AspNetUsers978979].[EmailConfirmed]"},
	PasswordHash:         whereHelpernull_String{field: "[dbo].[AspNetUsers978979].[PasswordHash]"},
	SecurityStamp:        whereHelpernull_String{field: "[dbo].[AspNetUsers978979].[SecurityStamp]"},
	ConcurrencyStamp:     whereHelpernull_String{field: "[dbo].[AspNetUsers978979].[ConcurrencyStamp]"},
	PhoneNumber:          whereHelpernull_String{field: "[dbo].[AspNetUsers978979].[PhoneNumber]"},
	PhoneNumberConfirmed: whereHelperbool{field: "[dbo].[AspNetUsers978979].[PhoneNumberConfirmed]"},
	TwoFactorEnabled:     whereHelperbool{field: "[dbo].[AspNetUsers978979].[TwoFactorEnabled]"},
	LockoutEnd:           whereHelpernull_Time{field: "[dbo].[AspNetUsers978979].[LockoutEnd]"},
	LockoutEnabled:       whereHelperbool{field: "[dbo].[AspNetUsers978979].[LockoutEnabled]"},
	AccessFailedCount:    whereHelperint{field: "[dbo].[AspNetUsers978979].[AccessFailedCount]"},
}

// AspNetUsers978979Rels is where relationship names are stored.
var AspNetUsers978979Rels = struct {
	UserIdAspNetUserClaims string
	UserIdAspNetUserLogins string
	RoleIdAspNetRoles      string
	UserIdAspNetUserTokens string
}{
	UserIdAspNetUserClaims: "UserIdAspNetUserClaims",
	UserIdAspNetUserLogins: "UserIdAspNetUserLogins",
	RoleIdAspNetRoles:      "RoleIdAspNetRoles",
	UserIdAspNetUserTokens: "UserIdAspNetUserTokens",
}

// aspNetUsers978979R is where relationships are stored.
type aspNetUsers978979R struct {
	UserIdAspNetUserClaims AspNetUserClaimSlice `boil:"UserIdAspNetUserClaims" json:"UserIdAspNetUserClaims" toml:"UserIdAspNetUserClaims" yaml:"UserIdAspNetUserClaims"`
	UserIdAspNetUserLogins AspNetUserLoginSlice `boil:"UserIdAspNetUserLogins" json:"UserIdAspNetUserLogins" toml:"UserIdAspNetUserLogins" yaml:"UserIdAspNetUserLogins"`
	RoleIdAspNetRoles      AspNetRoleSlice      `boil:"RoleIdAspNetRoles" json:"RoleIdAspNetRoles" toml:"RoleIdAspNetRoles" yaml:"RoleIdAspNetRoles"`
	UserIdAspNetUserTokens AspNetUserTokenSlice `boil:"UserIdAspNetUserTokens" json:"UserIdAspNetUserTokens" toml:"UserIdAspNetUserTokens" yaml:"UserIdAspNetUserTokens"`
}

// NewStruct creates a new relationship struct
func (*aspNetUsers978979R) NewStruct() *aspNetUsers978979R {
	return &aspNetUsers978979R{}
}

// aspNetUsers978979L is where Load methods for each relationship are stored.
type aspNetUsers978979L struct{}

var (
	aspNetUsers978979AllColumns            = []string{"Id", "UserName", "NormalizedUserName", "Email", "NormalizedEmail", "EmailConfirmed", "PasswordHash", "SecurityStamp", "ConcurrencyStamp", "PhoneNumber", "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEnd", "LockoutEnabled", "AccessFailedCount"}
	aspNetUsers978979ColumnsWithAuto       = []string{}
	aspNetUsers978979ColumnsWithoutDefault = []string{"Id", "UserName", "NormalizedUserName", "Email", "NormalizedEmail", "EmailConfirmed", "PasswordHash", "SecurityStamp", "ConcurrencyStamp", "PhoneNumber", "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEnd", "LockoutEnabled", "AccessFailedCount"}
	aspNetUsers978979ColumnsWithDefault    = []string{}
	aspNetUsers978979PrimaryKeyColumns     = []string{"Id"}
)

type (
	// AspNetUsers978979Slice is an alias for a slice of pointers to AspNetUsers978979.
	// This should almost always be used instead of []AspNetUsers978979.
	AspNetUsers978979Slice []*AspNetUsers978979
	// AspNetUsers978979Hook is the signature for custom AspNetUsers978979 hook methods
	AspNetUsers978979Hook func(context.Context, boil.ContextExecutor, *AspNetUsers978979) error

	aspNetUsers978979Query struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aspNetUsers978979Type                 = reflect.TypeOf(&AspNetUsers978979{})
	aspNetUsers978979Mapping              = queries.MakeStructMapping(aspNetUsers978979Type)
	aspNetUsers978979PrimaryKeyMapping, _ = queries.BindMapping(aspNetUsers978979Type, aspNetUsers978979Mapping, aspNetUsers978979PrimaryKeyColumns)
	aspNetUsers978979InsertCacheMut       sync.RWMutex
	aspNetUsers978979InsertCache          = make(map[string]insertCache)
	aspNetUsers978979UpdateCacheMut       sync.RWMutex
	aspNetUsers978979UpdateCache          = make(map[string]updateCache)
	aspNetUsers978979UpsertCacheMut       sync.RWMutex
	aspNetUsers978979UpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aspNetUsers978979BeforeInsertHooks []AspNetUsers978979Hook
var aspNetUsers978979BeforeUpdateHooks []AspNetUsers978979Hook
var aspNetUsers978979BeforeDeleteHooks []AspNetUsers978979Hook
var aspNetUsers978979BeforeUpsertHooks []AspNetUsers978979Hook

var aspNetUsers978979AfterInsertHooks []AspNetUsers978979Hook
var aspNetUsers978979AfterSelectHooks []AspNetUsers978979Hook
var aspNetUsers978979AfterUpdateHooks []AspNetUsers978979Hook
var aspNetUsers978979AfterDeleteHooks []AspNetUsers978979Hook
var aspNetUsers978979AfterUpsertHooks []AspNetUsers978979Hook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AspNetUsers978979) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUsers978979BeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AspNetUsers978979) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUsers978979BeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AspNetUsers978979) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUsers978979BeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AspNetUsers978979) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUsers978979BeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AspNetUsers978979) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUsers978979AfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AspNetUsers978979) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUsers978979AfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AspNetUsers978979) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUsers978979AfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AspNetUsers978979) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUsers978979AfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AspNetUsers978979) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUsers978979AfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAspNetUsers978979Hook registers your hook function for all future operations.
func AddAspNetUsers978979Hook(hookPoint boil.HookPoint, aspNetUsers978979Hook AspNetUsers978979Hook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		aspNetUsers978979BeforeInsertHooks = append(aspNetUsers978979BeforeInsertHooks, aspNetUsers978979Hook)
	case boil.BeforeUpdateHook:
		aspNetUsers978979BeforeUpdateHooks = append(aspNetUsers978979BeforeUpdateHooks, aspNetUsers978979Hook)
	case boil.BeforeDeleteHook:
		aspNetUsers978979BeforeDeleteHooks = append(aspNetUsers978979BeforeDeleteHooks, aspNetUsers978979Hook)
	case boil.BeforeUpsertHook:
		aspNetUsers978979BeforeUpsertHooks = append(aspNetUsers978979BeforeUpsertHooks, aspNetUsers978979Hook)
	case boil.AfterInsertHook:
		aspNetUsers978979AfterInsertHooks = append(aspNetUsers978979AfterInsertHooks, aspNetUsers978979Hook)
	case boil.AfterSelectHook:
		aspNetUsers978979AfterSelectHooks = append(aspNetUsers978979AfterSelectHooks, aspNetUsers978979Hook)
	case boil.AfterUpdateHook:
		aspNetUsers978979AfterUpdateHooks = append(aspNetUsers978979AfterUpdateHooks, aspNetUsers978979Hook)
	case boil.AfterDeleteHook:
		aspNetUsers978979AfterDeleteHooks = append(aspNetUsers978979AfterDeleteHooks, aspNetUsers978979Hook)
	case boil.AfterUpsertHook:
		aspNetUsers978979AfterUpsertHooks = append(aspNetUsers978979AfterUpsertHooks, aspNetUsers978979Hook)
	}
}

// One returns a single aspNetUsers978979 record from the query.
func (q aspNetUsers978979Query) One(ctx context.Context, exec boil.ContextExecutor) (*AspNetUsers978979, error) {
	o := &AspNetUsers978979{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AspNetUsers978979")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AspNetUsers978979 records from the query.
func (q aspNetUsers978979Query) All(ctx context.Context, exec boil.ContextExecutor) (AspNetUsers978979Slice, error) {
	var o []*AspNetUsers978979

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AspNetUsers978979 slice")
	}

	if len(aspNetUsers978979AfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AspNetUsers978979 records in the query.
func (q aspNetUsers978979Query) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AspNetUsers978979 rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aspNetUsers978979Query) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AspNetUsers978979 exists")
	}

	return count > 0, nil
}

// UserIdAspNetUserClaims retrieves all the AspNetUserClaim's AspNetUserClaims with an executor via UserId column.
func (o *AspNetUsers978979) UserIdAspNetUserClaims(mods ...qm.QueryMod) aspNetUserClaimQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[AspNetUserClaims].[UserId]=?", o.ID),
	)

	query := AspNetUserClaims(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[AspNetUserClaims]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[AspNetUserClaims].*"})
	}

	return query
}

// UserIdAspNetUserLogins retrieves all the AspNetUserLogin's AspNetUserLogins with an executor via UserId column.
func (o *AspNetUsers978979) UserIdAspNetUserLogins(mods ...qm.QueryMod) aspNetUserLoginQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[AspNetUserLogins].[UserId]=?", o.ID),
	)

	query := AspNetUserLogins(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[AspNetUserLogins]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[AspNetUserLogins].*"})
	}

	return query
}

// RoleIdAspNetRoles retrieves all the AspNetRole's AspNetRoles with an executor via Id column.
func (o *AspNetUsers978979) RoleIdAspNetRoles(mods ...qm.QueryMod) aspNetRoleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("[dbo].[AspNetUserRoles] on [dbo].[AspNetRoles].[Id] = [dbo].[AspNetUserRoles].[RoleId]"),
		qm.Where("[dbo].[AspNetUserRoles].[UserId]=?", o.ID),
	)

	query := AspNetRoles(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[AspNetRoles]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[AspNetRoles].*"})
	}

	return query
}

// UserIdAspNetUserTokens retrieves all the AspNetUserToken's AspNetUserTokens with an executor via UserId column.
func (o *AspNetUsers978979) UserIdAspNetUserTokens(mods ...qm.QueryMod) aspNetUserTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[AspNetUserTokens].[UserId]=?", o.ID),
	)

	query := AspNetUserTokens(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[AspNetUserTokens]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[AspNetUserTokens].*"})
	}

	return query
}

// LoadUserIdAspNetUserClaims allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aspNetUsers978979L) LoadUserIdAspNetUserClaims(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAspNetUsers978979 interface{}, mods queries.Applicator) error {
	var slice []*AspNetUsers978979
	var object *AspNetUsers978979

	if singular {
		object = maybeAspNetUsers978979.(*AspNetUsers978979)
	} else {
		slice = *maybeAspNetUsers978979.(*[]*AspNetUsers978979)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aspNetUsers978979R{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aspNetUsers978979R{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.AspNetUserClaims`),
		qm.WhereIn(`dbo.AspNetUserClaims.UserId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AspNetUserClaims")
	}

	var resultSlice []*AspNetUserClaim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AspNetUserClaims")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on AspNetUserClaims")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AspNetUserClaims")
	}

	if len(aspNetUserClaimAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserIdAspNetUserClaims = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &aspNetUserClaimR{}
			}
			foreign.R.UserIdAspNetUsers978979 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserId {
				local.R.UserIdAspNetUserClaims = append(local.R.UserIdAspNetUserClaims, foreign)
				if foreign.R == nil {
					foreign.R = &aspNetUserClaimR{}
				}
				foreign.R.UserIdAspNetUsers978979 = local
				break
			}
		}
	}

	return nil
}

// LoadUserIdAspNetUserLogins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aspNetUsers978979L) LoadUserIdAspNetUserLogins(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAspNetUsers978979 interface{}, mods queries.Applicator) error {
	var slice []*AspNetUsers978979
	var object *AspNetUsers978979

	if singular {
		object = maybeAspNetUsers978979.(*AspNetUsers978979)
	} else {
		slice = *maybeAspNetUsers978979.(*[]*AspNetUsers978979)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aspNetUsers978979R{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aspNetUsers978979R{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.AspNetUserLogins`),
		qm.WhereIn(`dbo.AspNetUserLogins.UserId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AspNetUserLogins")
	}

	var resultSlice []*AspNetUserLogin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AspNetUserLogins")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on AspNetUserLogins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AspNetUserLogins")
	}

	if len(aspNetUserLoginAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserIdAspNetUserLogins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &aspNetUserLoginR{}
			}
			foreign.R.UserIdAspNetUsers978979 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserId {
				local.R.UserIdAspNetUserLogins = append(local.R.UserIdAspNetUserLogins, foreign)
				if foreign.R == nil {
					foreign.R = &aspNetUserLoginR{}
				}
				foreign.R.UserIdAspNetUsers978979 = local
				break
			}
		}
	}

	return nil
}

// LoadRoleIdAspNetRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aspNetUsers978979L) LoadRoleIdAspNetRoles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAspNetUsers978979 interface{}, mods queries.Applicator) error {
	var slice []*AspNetUsers978979
	var object *AspNetUsers978979

	if singular {
		object = maybeAspNetUsers978979.(*AspNetUsers978979)
	} else {
		slice = *maybeAspNetUsers978979.(*[]*AspNetUsers978979)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aspNetUsers978979R{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aspNetUsers978979R{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("[dbo].[AspNetRoles].Id, [dbo].[AspNetRoles].Name, [dbo].[AspNetRoles].NormalizedName, [dbo].[AspNetRoles].ConcurrencyStamp, [a].[UserId]"),
		qm.From("[dbo].[AspNetRoles]"),
		qm.InnerJoin("[dbo].[AspNetUserRoles] as [a] on [dbo].[AspNetRoles].[Id] = [a].[RoleId]"),
		qm.WhereIn("[a].[UserId] in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AspNetRoles")
	}

	var resultSlice []*AspNetRole

	var localJoinCols []string
	for results.Next() {
		one := new(AspNetRole)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &one.NormalizedName, &one.ConcurrencyStamp, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for AspNetRoles")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice AspNetRoles")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on AspNetRoles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AspNetRoles")
	}

	if len(aspNetRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoleIdAspNetRoles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &aspNetRoleR{}
			}
			foreign.R.UserIdAspNetUsers978979s = append(foreign.R.UserIdAspNetUsers978979s, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.RoleIdAspNetRoles = append(local.R.RoleIdAspNetRoles, foreign)
				if foreign.R == nil {
					foreign.R = &aspNetRoleR{}
				}
				foreign.R.UserIdAspNetUsers978979s = append(foreign.R.UserIdAspNetUsers978979s, local)
				break
			}
		}
	}

	return nil
}

// LoadUserIdAspNetUserTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aspNetUsers978979L) LoadUserIdAspNetUserTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAspNetUsers978979 interface{}, mods queries.Applicator) error {
	var slice []*AspNetUsers978979
	var object *AspNetUsers978979

	if singular {
		object = maybeAspNetUsers978979.(*AspNetUsers978979)
	} else {
		slice = *maybeAspNetUsers978979.(*[]*AspNetUsers978979)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aspNetUsers978979R{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aspNetUsers978979R{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.AspNetUserTokens`),
		qm.WhereIn(`dbo.AspNetUserTokens.UserId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AspNetUserTokens")
	}

	var resultSlice []*AspNetUserToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AspNetUserTokens")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on AspNetUserTokens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AspNetUserTokens")
	}

	if len(aspNetUserTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserIdAspNetUserTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &aspNetUserTokenR{}
			}
			foreign.R.UserIdAspNetUsers978979 = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserId {
				local.R.UserIdAspNetUserTokens = append(local.R.UserIdAspNetUserTokens, foreign)
				if foreign.R == nil {
					foreign.R = &aspNetUserTokenR{}
				}
				foreign.R.UserIdAspNetUsers978979 = local
				break
			}
		}
	}

	return nil
}

// AddUserIdAspNetUserClaims adds the given related objects to the existing relationships
// of the AspNetUsers978979, optionally inserting them as new records.
// Appends related to o.R.UserIdAspNetUserClaims.
// Sets related.R.UserIdAspNetUsers978979 appropriately.
func (o *AspNetUsers978979) AddUserIdAspNetUserClaims(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AspNetUserClaim) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserId = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[AspNetUserClaims] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"UserId"}),
				strmangle.WhereClause("[", "]", 2, aspNetUserClaimPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserId = o.ID
		}
	}

	if o.R == nil {
		o.R = &aspNetUsers978979R{
			UserIdAspNetUserClaims: related,
		}
	} else {
		o.R.UserIdAspNetUserClaims = append(o.R.UserIdAspNetUserClaims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &aspNetUserClaimR{
				UserIdAspNetUsers978979: o,
			}
		} else {
			rel.R.UserIdAspNetUsers978979 = o
		}
	}
	return nil
}

// AddUserIdAspNetUserLogins adds the given related objects to the existing relationships
// of the AspNetUsers978979, optionally inserting them as new records.
// Appends related to o.R.UserIdAspNetUserLogins.
// Sets related.R.UserIdAspNetUsers978979 appropriately.
func (o *AspNetUsers978979) AddUserIdAspNetUserLogins(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AspNetUserLogin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserId = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[AspNetUserLogins] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"UserId"}),
				strmangle.WhereClause("[", "]", 2, aspNetUserLoginPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.LoginProvider, rel.ProviderKey}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserId = o.ID
		}
	}

	if o.R == nil {
		o.R = &aspNetUsers978979R{
			UserIdAspNetUserLogins: related,
		}
	} else {
		o.R.UserIdAspNetUserLogins = append(o.R.UserIdAspNetUserLogins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &aspNetUserLoginR{
				UserIdAspNetUsers978979: o,
			}
		} else {
			rel.R.UserIdAspNetUsers978979 = o
		}
	}
	return nil
}

// AddRoleIdAspNetRoles adds the given related objects to the existing relationships
// of the AspNetUsers978979, optionally inserting them as new records.
// Appends related to o.R.RoleIdAspNetRoles.
// Sets related.R.UserIdAspNetUsers978979s appropriately.
func (o *AspNetUsers978979) AddRoleIdAspNetRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AspNetRole) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into [dbo].[AspNetUserRoles] ([UserId], [RoleId]) values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &aspNetUsers978979R{
			RoleIdAspNetRoles: related,
		}
	} else {
		o.R.RoleIdAspNetRoles = append(o.R.RoleIdAspNetRoles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &aspNetRoleR{
				UserIdAspNetUsers978979s: AspNetUsers978979Slice{o},
			}
		} else {
			rel.R.UserIdAspNetUsers978979s = append(rel.R.UserIdAspNetUsers978979s, o)
		}
	}
	return nil
}

// SetRoleIdAspNetRoles removes all previously related items of the
// AspNetUsers978979 replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UserIdAspNetUsers978979s's RoleIdAspNetRoles accordingly.
// Replaces o.R.RoleIdAspNetRoles with related.
// Sets related.R.UserIdAspNetUsers978979s's RoleIdAspNetRoles accordingly.
func (o *AspNetUsers978979) SetRoleIdAspNetRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AspNetRole) error {
	query := "delete from [dbo].[AspNetUserRoles] where [UserId] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRoleIdAspNetRolesFromUserIdAspNetUsers978979sSlice(o, related)
	if o.R != nil {
		o.R.RoleIdAspNetRoles = nil
	}
	return o.AddRoleIdAspNetRoles(ctx, exec, insert, related...)
}

// RemoveRoleIdAspNetRoles relationships from objects passed in.
// Removes related items from R.RoleIdAspNetRoles (uses pointer comparison, removal does not keep order)
// Sets related.R.UserIdAspNetUsers978979s.
func (o *AspNetUsers978979) RemoveRoleIdAspNetRoles(ctx context.Context, exec boil.ContextExecutor, related ...*AspNetRole) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from [dbo].[AspNetUserRoles] where [UserId] = $1 and [RoleId] in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRoleIdAspNetRolesFromUserIdAspNetUsers978979sSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoleIdAspNetRoles {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoleIdAspNetRoles)
			if ln > 1 && i < ln-1 {
				o.R.RoleIdAspNetRoles[i] = o.R.RoleIdAspNetRoles[ln-1]
			}
			o.R.RoleIdAspNetRoles = o.R.RoleIdAspNetRoles[:ln-1]
			break
		}
	}

	return nil
}

func removeRoleIdAspNetRolesFromUserIdAspNetUsers978979sSlice(o *AspNetUsers978979, related []*AspNetRole) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.UserIdAspNetUsers978979s {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.UserIdAspNetUsers978979s)
			if ln > 1 && i < ln-1 {
				rel.R.UserIdAspNetUsers978979s[i] = rel.R.UserIdAspNetUsers978979s[ln-1]
			}
			rel.R.UserIdAspNetUsers978979s = rel.R.UserIdAspNetUsers978979s[:ln-1]
			break
		}
	}
}

// AddUserIdAspNetUserTokens adds the given related objects to the existing relationships
// of the AspNetUsers978979, optionally inserting them as new records.
// Appends related to o.R.UserIdAspNetUserTokens.
// Sets related.R.UserIdAspNetUsers978979 appropriately.
func (o *AspNetUsers978979) AddUserIdAspNetUserTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AspNetUserToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserId = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[AspNetUserTokens] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"UserId"}),
				strmangle.WhereClause("[", "]", 2, aspNetUserTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserId, rel.LoginProvider, rel.Name}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserId = o.ID
		}
	}

	if o.R == nil {
		o.R = &aspNetUsers978979R{
			UserIdAspNetUserTokens: related,
		}
	} else {
		o.R.UserIdAspNetUserTokens = append(o.R.UserIdAspNetUserTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &aspNetUserTokenR{
				UserIdAspNetUsers978979: o,
			}
		} else {
			rel.R.UserIdAspNetUsers978979 = o
		}
	}
	return nil
}

// AspNetUsers978979s retrieves all the records using an executor.
func AspNetUsers978979s(mods ...qm.QueryMod) aspNetUsers978979Query {
	mods = append(mods, qm.From("[dbo].[AspNetUsers978979]"))
	return aspNetUsers978979Query{NewQuery(mods...)}
}

// FindAspNetUsers978979 retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAspNetUsers978979(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AspNetUsers978979, error) {
	aspNetUsers978979Obj := &AspNetUsers978979{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[AspNetUsers978979] where [Id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, aspNetUsers978979Obj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AspNetUsers978979")
	}

	if err = aspNetUsers978979Obj.doAfterSelectHooks(ctx, exec); err != nil {
		return aspNetUsers978979Obj, err
	}

	return aspNetUsers978979Obj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AspNetUsers978979) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetUsers978979 provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetUsers978979ColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aspNetUsers978979InsertCacheMut.RLock()
	cache, cached := aspNetUsers978979InsertCache[key]
	aspNetUsers978979InsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aspNetUsers978979AllColumns,
			aspNetUsers978979ColumnsWithDefault,
			aspNetUsers978979ColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aspNetUsers978979Type, aspNetUsers978979Mapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aspNetUsers978979Type, aspNetUsers978979Mapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[AspNetUsers978979] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[AspNetUsers978979] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AspNetUsers978979")
	}

	if !cached {
		aspNetUsers978979InsertCacheMut.Lock()
		aspNetUsers978979InsertCache[key] = cache
		aspNetUsers978979InsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AspNetUsers978979.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AspNetUsers978979) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aspNetUsers978979UpdateCacheMut.RLock()
	cache, cached := aspNetUsers978979UpdateCache[key]
	aspNetUsers978979UpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aspNetUsers978979AllColumns,
			aspNetUsers978979PrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, aspNetUsers978979ColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AspNetUsers978979, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[AspNetUsers978979] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, aspNetUsers978979PrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aspNetUsers978979Type, aspNetUsers978979Mapping, append(wl, aspNetUsers978979PrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AspNetUsers978979 row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AspNetUsers978979")
	}

	if !cached {
		aspNetUsers978979UpdateCacheMut.Lock()
		aspNetUsers978979UpdateCache[key] = cache
		aspNetUsers978979UpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aspNetUsers978979Query) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AspNetUsers978979")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AspNetUsers978979")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AspNetUsers978979Slice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUsers978979PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[AspNetUsers978979] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aspNetUsers978979PrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aspNetUsers978979 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aspNetUsers978979")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AspNetUsers978979) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetUsers978979 provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetUsers978979ColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aspNetUsers978979UpsertCacheMut.RLock()
	cache, cached := aspNetUsers978979UpsertCache[key]
	aspNetUsers978979UpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			aspNetUsers978979AllColumns,
			aspNetUsers978979ColumnsWithDefault,
			aspNetUsers978979ColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, aspNetUsers978979ColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(aspNetUsers978979PrimaryKeyColumns, v) && strmangle.ContainsAny(aspNetUsers978979ColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert AspNetUsers978979, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, aspNetUsers978979ColumnsWithAuto)
		ret = strmangle.SetMerge(ret, aspNetUsers978979ColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			aspNetUsers978979AllColumns,
			aspNetUsers978979PrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, aspNetUsers978979ColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert AspNetUsers978979, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[AspNetUsers978979]", aspNetUsers978979PrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(aspNetUsers978979PrimaryKeyColumns))
		copy(whitelist, aspNetUsers978979PrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(aspNetUsers978979Type, aspNetUsers978979Mapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aspNetUsers978979Type, aspNetUsers978979Mapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert AspNetUsers978979")
	}

	if !cached {
		aspNetUsers978979UpsertCacheMut.Lock()
		aspNetUsers978979UpsertCache[key] = cache
		aspNetUsers978979UpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AspNetUsers978979 record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AspNetUsers978979) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AspNetUsers978979 provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aspNetUsers978979PrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[AspNetUsers978979] WHERE [Id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AspNetUsers978979")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AspNetUsers978979")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aspNetUsers978979Query) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aspNetUsers978979Query provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AspNetUsers978979")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetUsers978979")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AspNetUsers978979Slice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aspNetUsers978979BeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUsers978979PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[AspNetUsers978979] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetUsers978979PrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aspNetUsers978979 slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetUsers978979")
	}

	if len(aspNetUsers978979AfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AspNetUsers978979) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAspNetUsers978979(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AspNetUsers978979Slice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AspNetUsers978979Slice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUsers978979PrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[AspNetUsers978979].* FROM [dbo].[AspNetUsers978979] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetUsers978979PrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AspNetUsers978979Slice")
	}

	*o = slice

	return nil
}

// AspNetUsers978979Exists checks if the AspNetUsers978979 row exists.
func AspNetUsers978979Exists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[AspNetUsers978979] where [Id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AspNetUsers978979 exists")
	}

	return exists, nil
}
