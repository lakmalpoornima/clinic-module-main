// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DoctorNoteFootScanedValue is an object representing the database table.
type DoctorNoteFootScanedValue struct {
	RightPointOne   string      `boil:"RightPointOne" json:"RightPointOne" toml:"RightPointOne" yaml:"RightPointOne"`
	RightPointTwo   string      `boil:"RightPointTwo" json:"RightPointTwo" toml:"RightPointTwo" yaml:"RightPointTwo"`
	RightPointThree string      `boil:"RightPointThree" json:"RightPointThree" toml:"RightPointThree" yaml:"RightPointThree"`
	RightPointFour  string      `boil:"RightPointFour" json:"RightPointFour" toml:"RightPointFour" yaml:"RightPointFour"`
	RightPointFive  string      `boil:"RightPointFive" json:"RightPointFive" toml:"RightPointFive" yaml:"RightPointFive"`
	RightPointSix   string      `boil:"RightPointSix" json:"RightPointSix" toml:"RightPointSix" yaml:"RightPointSix"`
	LeftPointOne    string      `boil:"LeftPointOne" json:"LeftPointOne" toml:"LeftPointOne" yaml:"LeftPointOne"`
	LeftPointTwo    string      `boil:"LeftPointTwo" json:"LeftPointTwo" toml:"LeftPointTwo" yaml:"LeftPointTwo"`
	LeftPointThree  string      `boil:"LeftPointThree" json:"LeftPointThree" toml:"LeftPointThree" yaml:"LeftPointThree"`
	LeftPointFour   string      `boil:"LeftPointFour" json:"LeftPointFour" toml:"LeftPointFour" yaml:"LeftPointFour"`
	LeftPointFive   string      `boil:"LeftPointFive" json:"LeftPointFive" toml:"LeftPointFive" yaml:"LeftPointFive"`
	LeftPointSix    string      `boil:"LeftPointSix" json:"LeftPointSix" toml:"LeftPointSix" yaml:"LeftPointSix"`
	ID              int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	DocumentID      null.String `boil:"DocumentID" json:"DocumentID,omitempty" toml:"DocumentID" yaml:"DocumentID,omitempty"`
	CreatedDate     time.Time   `boil:"CreatedDate" json:"CreatedDate" toml:"CreatedDate" yaml:"CreatedDate"`

	R *doctorNoteFootScanedValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doctorNoteFootScanedValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoctorNoteFootScanedValueColumns = struct {
	RightPointOne   string
	RightPointTwo   string
	RightPointThree string
	RightPointFour  string
	RightPointFive  string
	RightPointSix   string
	LeftPointOne    string
	LeftPointTwo    string
	LeftPointThree  string
	LeftPointFour   string
	LeftPointFive   string
	LeftPointSix    string
	ID              string
	DocumentID      string
	CreatedDate     string
}{
	RightPointOne:   "RightPointOne",
	RightPointTwo:   "RightPointTwo",
	RightPointThree: "RightPointThree",
	RightPointFour:  "RightPointFour",
	RightPointFive:  "RightPointFive",
	RightPointSix:   "RightPointSix",
	LeftPointOne:    "LeftPointOne",
	LeftPointTwo:    "LeftPointTwo",
	LeftPointThree:  "LeftPointThree",
	LeftPointFour:   "LeftPointFour",
	LeftPointFive:   "LeftPointFive",
	LeftPointSix:    "LeftPointSix",
	ID:              "ID",
	DocumentID:      "DocumentID",
	CreatedDate:     "CreatedDate",
}

var DoctorNoteFootScanedValueTableColumns = struct {
	RightPointOne   string
	RightPointTwo   string
	RightPointThree string
	RightPointFour  string
	RightPointFive  string
	RightPointSix   string
	LeftPointOne    string
	LeftPointTwo    string
	LeftPointThree  string
	LeftPointFour   string
	LeftPointFive   string
	LeftPointSix    string
	ID              string
	DocumentID      string
	CreatedDate     string
}{
	RightPointOne:   "DoctorNoteFootScanedValues.RightPointOne",
	RightPointTwo:   "DoctorNoteFootScanedValues.RightPointTwo",
	RightPointThree: "DoctorNoteFootScanedValues.RightPointThree",
	RightPointFour:  "DoctorNoteFootScanedValues.RightPointFour",
	RightPointFive:  "DoctorNoteFootScanedValues.RightPointFive",
	RightPointSix:   "DoctorNoteFootScanedValues.RightPointSix",
	LeftPointOne:    "DoctorNoteFootScanedValues.LeftPointOne",
	LeftPointTwo:    "DoctorNoteFootScanedValues.LeftPointTwo",
	LeftPointThree:  "DoctorNoteFootScanedValues.LeftPointThree",
	LeftPointFour:   "DoctorNoteFootScanedValues.LeftPointFour",
	LeftPointFive:   "DoctorNoteFootScanedValues.LeftPointFive",
	LeftPointSix:    "DoctorNoteFootScanedValues.LeftPointSix",
	ID:              "DoctorNoteFootScanedValues.ID",
	DocumentID:      "DoctorNoteFootScanedValues.DocumentID",
	CreatedDate:     "DoctorNoteFootScanedValues.CreatedDate",
}

// Generated where

var DoctorNoteFootScanedValueWhere = struct {
	RightPointOne   whereHelperstring
	RightPointTwo   whereHelperstring
	RightPointThree whereHelperstring
	RightPointFour  whereHelperstring
	RightPointFive  whereHelperstring
	RightPointSix   whereHelperstring
	LeftPointOne    whereHelperstring
	LeftPointTwo    whereHelperstring
	LeftPointThree  whereHelperstring
	LeftPointFour   whereHelperstring
	LeftPointFive   whereHelperstring
	LeftPointSix    whereHelperstring
	ID              whereHelperint
	DocumentID      whereHelpernull_String
	CreatedDate     whereHelpertime_Time
}{
	RightPointOne:   whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[RightPointOne]"},
	RightPointTwo:   whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[RightPointTwo]"},
	RightPointThree: whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[RightPointThree]"},
	RightPointFour:  whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[RightPointFour]"},
	RightPointFive:  whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[RightPointFive]"},
	RightPointSix:   whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[RightPointSix]"},
	LeftPointOne:    whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[LeftPointOne]"},
	LeftPointTwo:    whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[LeftPointTwo]"},
	LeftPointThree:  whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[LeftPointThree]"},
	LeftPointFour:   whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[LeftPointFour]"},
	LeftPointFive:   whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[LeftPointFive]"},
	LeftPointSix:    whereHelperstring{field: "[dbo].[DoctorNoteFootScanedValues].[LeftPointSix]"},
	ID:              whereHelperint{field: "[dbo].[DoctorNoteFootScanedValues].[ID]"},
	DocumentID:      whereHelpernull_String{field: "[dbo].[DoctorNoteFootScanedValues].[DocumentID]"},
	CreatedDate:     whereHelpertime_Time{field: "[dbo].[DoctorNoteFootScanedValues].[CreatedDate]"},
}

// DoctorNoteFootScanedValueRels is where relationship names are stored.
var DoctorNoteFootScanedValueRels = struct {
}{}

// doctorNoteFootScanedValueR is where relationships are stored.
type doctorNoteFootScanedValueR struct {
}

// NewStruct creates a new relationship struct
func (*doctorNoteFootScanedValueR) NewStruct() *doctorNoteFootScanedValueR {
	return &doctorNoteFootScanedValueR{}
}

// doctorNoteFootScanedValueL is where Load methods for each relationship are stored.
type doctorNoteFootScanedValueL struct{}

var (
	doctorNoteFootScanedValueAllColumns            = []string{"RightPointOne", "RightPointTwo", "RightPointThree", "RightPointFour", "RightPointFive", "RightPointSix", "LeftPointOne", "LeftPointTwo", "LeftPointThree", "LeftPointFour", "LeftPointFive", "LeftPointSix", "ID", "DocumentID", "CreatedDate"}
	doctorNoteFootScanedValueColumnsWithAuto       = []string{}
	doctorNoteFootScanedValueColumnsWithoutDefault = []string{"DocumentID"}
	doctorNoteFootScanedValueColumnsWithDefault    = []string{"RightPointOne", "RightPointTwo", "RightPointThree", "RightPointFour", "RightPointFive", "RightPointSix", "LeftPointOne", "LeftPointTwo", "LeftPointThree", "LeftPointFour", "LeftPointFive", "LeftPointSix", "ID", "CreatedDate"}
	doctorNoteFootScanedValuePrimaryKeyColumns     = []string{"ID"}
)

type (
	// DoctorNoteFootScanedValueSlice is an alias for a slice of pointers to DoctorNoteFootScanedValue.
	// This should almost always be used instead of []DoctorNoteFootScanedValue.
	DoctorNoteFootScanedValueSlice []*DoctorNoteFootScanedValue
	// DoctorNoteFootScanedValueHook is the signature for custom DoctorNoteFootScanedValue hook methods
	DoctorNoteFootScanedValueHook func(context.Context, boil.ContextExecutor, *DoctorNoteFootScanedValue) error

	doctorNoteFootScanedValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doctorNoteFootScanedValueType                 = reflect.TypeOf(&DoctorNoteFootScanedValue{})
	doctorNoteFootScanedValueMapping              = queries.MakeStructMapping(doctorNoteFootScanedValueType)
	doctorNoteFootScanedValuePrimaryKeyMapping, _ = queries.BindMapping(doctorNoteFootScanedValueType, doctorNoteFootScanedValueMapping, doctorNoteFootScanedValuePrimaryKeyColumns)
	doctorNoteFootScanedValueInsertCacheMut       sync.RWMutex
	doctorNoteFootScanedValueInsertCache          = make(map[string]insertCache)
	doctorNoteFootScanedValueUpdateCacheMut       sync.RWMutex
	doctorNoteFootScanedValueUpdateCache          = make(map[string]updateCache)
	doctorNoteFootScanedValueUpsertCacheMut       sync.RWMutex
	doctorNoteFootScanedValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doctorNoteFootScanedValueBeforeInsertHooks []DoctorNoteFootScanedValueHook
var doctorNoteFootScanedValueBeforeUpdateHooks []DoctorNoteFootScanedValueHook
var doctorNoteFootScanedValueBeforeDeleteHooks []DoctorNoteFootScanedValueHook
var doctorNoteFootScanedValueBeforeUpsertHooks []DoctorNoteFootScanedValueHook

var doctorNoteFootScanedValueAfterInsertHooks []DoctorNoteFootScanedValueHook
var doctorNoteFootScanedValueAfterSelectHooks []DoctorNoteFootScanedValueHook
var doctorNoteFootScanedValueAfterUpdateHooks []DoctorNoteFootScanedValueHook
var doctorNoteFootScanedValueAfterDeleteHooks []DoctorNoteFootScanedValueHook
var doctorNoteFootScanedValueAfterUpsertHooks []DoctorNoteFootScanedValueHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DoctorNoteFootScanedValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DoctorNoteFootScanedValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DoctorNoteFootScanedValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DoctorNoteFootScanedValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DoctorNoteFootScanedValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DoctorNoteFootScanedValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DoctorNoteFootScanedValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DoctorNoteFootScanedValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DoctorNoteFootScanedValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoctorNoteFootScanedValueHook registers your hook function for all future operations.
func AddDoctorNoteFootScanedValueHook(hookPoint boil.HookPoint, doctorNoteFootScanedValueHook DoctorNoteFootScanedValueHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doctorNoteFootScanedValueBeforeInsertHooks = append(doctorNoteFootScanedValueBeforeInsertHooks, doctorNoteFootScanedValueHook)
	case boil.BeforeUpdateHook:
		doctorNoteFootScanedValueBeforeUpdateHooks = append(doctorNoteFootScanedValueBeforeUpdateHooks, doctorNoteFootScanedValueHook)
	case boil.BeforeDeleteHook:
		doctorNoteFootScanedValueBeforeDeleteHooks = append(doctorNoteFootScanedValueBeforeDeleteHooks, doctorNoteFootScanedValueHook)
	case boil.BeforeUpsertHook:
		doctorNoteFootScanedValueBeforeUpsertHooks = append(doctorNoteFootScanedValueBeforeUpsertHooks, doctorNoteFootScanedValueHook)
	case boil.AfterInsertHook:
		doctorNoteFootScanedValueAfterInsertHooks = append(doctorNoteFootScanedValueAfterInsertHooks, doctorNoteFootScanedValueHook)
	case boil.AfterSelectHook:
		doctorNoteFootScanedValueAfterSelectHooks = append(doctorNoteFootScanedValueAfterSelectHooks, doctorNoteFootScanedValueHook)
	case boil.AfterUpdateHook:
		doctorNoteFootScanedValueAfterUpdateHooks = append(doctorNoteFootScanedValueAfterUpdateHooks, doctorNoteFootScanedValueHook)
	case boil.AfterDeleteHook:
		doctorNoteFootScanedValueAfterDeleteHooks = append(doctorNoteFootScanedValueAfterDeleteHooks, doctorNoteFootScanedValueHook)
	case boil.AfterUpsertHook:
		doctorNoteFootScanedValueAfterUpsertHooks = append(doctorNoteFootScanedValueAfterUpsertHooks, doctorNoteFootScanedValueHook)
	}
}

// One returns a single doctorNoteFootScanedValue record from the query.
func (q doctorNoteFootScanedValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DoctorNoteFootScanedValue, error) {
	o := &DoctorNoteFootScanedValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for DoctorNoteFootScanedValues")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DoctorNoteFootScanedValue records from the query.
func (q doctorNoteFootScanedValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoctorNoteFootScanedValueSlice, error) {
	var o []*DoctorNoteFootScanedValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DoctorNoteFootScanedValue slice")
	}

	if len(doctorNoteFootScanedValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DoctorNoteFootScanedValue records in the query.
func (q doctorNoteFootScanedValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count DoctorNoteFootScanedValues rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doctorNoteFootScanedValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if DoctorNoteFootScanedValues exists")
	}

	return count > 0, nil
}

// DoctorNoteFootScanedValues retrieves all the records using an executor.
func DoctorNoteFootScanedValues(mods ...qm.QueryMod) doctorNoteFootScanedValueQuery {
	mods = append(mods, qm.From("[dbo].[DoctorNoteFootScanedValues]"))
	return doctorNoteFootScanedValueQuery{NewQuery(mods...)}
}

// FindDoctorNoteFootScanedValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoctorNoteFootScanedValue(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DoctorNoteFootScanedValue, error) {
	doctorNoteFootScanedValueObj := &DoctorNoteFootScanedValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[DoctorNoteFootScanedValues] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doctorNoteFootScanedValueObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from DoctorNoteFootScanedValues")
	}

	if err = doctorNoteFootScanedValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return doctorNoteFootScanedValueObj, err
	}

	return doctorNoteFootScanedValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DoctorNoteFootScanedValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteFootScanedValues provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteFootScanedValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doctorNoteFootScanedValueInsertCacheMut.RLock()
	cache, cached := doctorNoteFootScanedValueInsertCache[key]
	doctorNoteFootScanedValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doctorNoteFootScanedValueAllColumns,
			doctorNoteFootScanedValueColumnsWithDefault,
			doctorNoteFootScanedValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doctorNoteFootScanedValueType, doctorNoteFootScanedValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doctorNoteFootScanedValueType, doctorNoteFootScanedValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[DoctorNoteFootScanedValues] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[DoctorNoteFootScanedValues] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into DoctorNoteFootScanedValues")
	}

	if !cached {
		doctorNoteFootScanedValueInsertCacheMut.Lock()
		doctorNoteFootScanedValueInsertCache[key] = cache
		doctorNoteFootScanedValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DoctorNoteFootScanedValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DoctorNoteFootScanedValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doctorNoteFootScanedValueUpdateCacheMut.RLock()
	cache, cached := doctorNoteFootScanedValueUpdateCache[key]
	doctorNoteFootScanedValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doctorNoteFootScanedValueAllColumns,
			doctorNoteFootScanedValuePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, doctorNoteFootScanedValueColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update DoctorNoteFootScanedValues, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[DoctorNoteFootScanedValues] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, doctorNoteFootScanedValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doctorNoteFootScanedValueType, doctorNoteFootScanedValueMapping, append(wl, doctorNoteFootScanedValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update DoctorNoteFootScanedValues row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for DoctorNoteFootScanedValues")
	}

	if !cached {
		doctorNoteFootScanedValueUpdateCacheMut.Lock()
		doctorNoteFootScanedValueUpdateCache[key] = cache
		doctorNoteFootScanedValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doctorNoteFootScanedValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for DoctorNoteFootScanedValues")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for DoctorNoteFootScanedValues")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoctorNoteFootScanedValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteFootScanedValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[DoctorNoteFootScanedValues] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, doctorNoteFootScanedValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doctorNoteFootScanedValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doctorNoteFootScanedValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DoctorNoteFootScanedValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteFootScanedValues provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteFootScanedValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	doctorNoteFootScanedValueUpsertCacheMut.RLock()
	cache, cached := doctorNoteFootScanedValueUpsertCache[key]
	doctorNoteFootScanedValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			doctorNoteFootScanedValueAllColumns,
			doctorNoteFootScanedValueColumnsWithDefault,
			doctorNoteFootScanedValueColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, doctorNoteFootScanedValueColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(doctorNoteFootScanedValuePrimaryKeyColumns, v) && strmangle.ContainsAny(doctorNoteFootScanedValueColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert DoctorNoteFootScanedValues, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, doctorNoteFootScanedValueColumnsWithAuto)
		ret = strmangle.SetMerge(ret, doctorNoteFootScanedValueColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			doctorNoteFootScanedValueAllColumns,
			doctorNoteFootScanedValuePrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, doctorNoteFootScanedValueColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert DoctorNoteFootScanedValues, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[DoctorNoteFootScanedValues]", doctorNoteFootScanedValuePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(doctorNoteFootScanedValuePrimaryKeyColumns))
		copy(whitelist, doctorNoteFootScanedValuePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(doctorNoteFootScanedValueType, doctorNoteFootScanedValueMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(doctorNoteFootScanedValueType, doctorNoteFootScanedValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert DoctorNoteFootScanedValues")
	}

	if !cached {
		doctorNoteFootScanedValueUpsertCacheMut.Lock()
		doctorNoteFootScanedValueUpsertCache[key] = cache
		doctorNoteFootScanedValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DoctorNoteFootScanedValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DoctorNoteFootScanedValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DoctorNoteFootScanedValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doctorNoteFootScanedValuePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[DoctorNoteFootScanedValues] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from DoctorNoteFootScanedValues")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for DoctorNoteFootScanedValues")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doctorNoteFootScanedValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doctorNoteFootScanedValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from DoctorNoteFootScanedValues")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteFootScanedValues")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoctorNoteFootScanedValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doctorNoteFootScanedValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteFootScanedValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[DoctorNoteFootScanedValues] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteFootScanedValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doctorNoteFootScanedValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteFootScanedValues")
	}

	if len(doctorNoteFootScanedValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DoctorNoteFootScanedValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoctorNoteFootScanedValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoctorNoteFootScanedValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoctorNoteFootScanedValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteFootScanedValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[DoctorNoteFootScanedValues].* FROM [dbo].[DoctorNoteFootScanedValues] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteFootScanedValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoctorNoteFootScanedValueSlice")
	}

	*o = slice

	return nil
}

// DoctorNoteFootScanedValueExists checks if the DoctorNoteFootScanedValue row exists.
func DoctorNoteFootScanedValueExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[DoctorNoteFootScanedValues] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if DoctorNoteFootScanedValues exists")
	}

	return exists, nil
}
