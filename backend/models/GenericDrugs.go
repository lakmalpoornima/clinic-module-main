// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GenericDrug is an object representing the database table.
type GenericDrug struct {
	GenericId   string      `boil:"GenericId" json:"GenericId" toml:"GenericId" yaml:"GenericId"`
	GenericName null.String `boil:"GenericName" json:"GenericName,omitempty" toml:"GenericName" yaml:"GenericName,omitempty"`
	Strength    string      `boil:"Strength" json:"Strength" toml:"Strength" yaml:"Strength"`
	Unit        string      `boil:"Unit" json:"Unit" toml:"Unit" yaml:"Unit"`
	Form        string      `boil:"Form" json:"Form" toml:"Form" yaml:"Form"`

	R *genericDrugR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L genericDrugL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GenericDrugColumns = struct {
	GenericId   string
	GenericName string
	Strength    string
	Unit        string
	Form        string
}{
	GenericId:   "GenericId",
	GenericName: "GenericName",
	Strength:    "Strength",
	Unit:        "Unit",
	Form:        "Form",
}

var GenericDrugTableColumns = struct {
	GenericId   string
	GenericName string
	Strength    string
	Unit        string
	Form        string
}{
	GenericId:   "GenericDrugs.GenericId",
	GenericName: "GenericDrugs.GenericName",
	Strength:    "GenericDrugs.Strength",
	Unit:        "GenericDrugs.Unit",
	Form:        "GenericDrugs.Form",
}

// Generated where

var GenericDrugWhere = struct {
	GenericId   whereHelperstring
	GenericName whereHelpernull_String
	Strength    whereHelperstring
	Unit        whereHelperstring
	Form        whereHelperstring
}{
	GenericId:   whereHelperstring{field: "[dbo].[GenericDrugs].[GenericId]"},
	GenericName: whereHelpernull_String{field: "[dbo].[GenericDrugs].[GenericName]"},
	Strength:    whereHelperstring{field: "[dbo].[GenericDrugs].[Strength]"},
	Unit:        whereHelperstring{field: "[dbo].[GenericDrugs].[Unit]"},
	Form:        whereHelperstring{field: "[dbo].[GenericDrugs].[Form]"},
}

// GenericDrugRels is where relationship names are stored.
var GenericDrugRels = struct {
}{}

// genericDrugR is where relationships are stored.
type genericDrugR struct {
}

// NewStruct creates a new relationship struct
func (*genericDrugR) NewStruct() *genericDrugR {
	return &genericDrugR{}
}

// genericDrugL is where Load methods for each relationship are stored.
type genericDrugL struct{}

var (
	genericDrugAllColumns            = []string{"GenericId", "GenericName", "Strength", "Unit", "Form"}
	genericDrugColumnsWithAuto       = []string{}
	genericDrugColumnsWithoutDefault = []string{"GenericId", "GenericName"}
	genericDrugColumnsWithDefault    = []string{"Strength", "Unit", "Form"}
	genericDrugPrimaryKeyColumns     = []string{"GenericId"}
)

type (
	// GenericDrugSlice is an alias for a slice of pointers to GenericDrug.
	// This should almost always be used instead of []GenericDrug.
	GenericDrugSlice []*GenericDrug
	// GenericDrugHook is the signature for custom GenericDrug hook methods
	GenericDrugHook func(context.Context, boil.ContextExecutor, *GenericDrug) error

	genericDrugQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	genericDrugType                 = reflect.TypeOf(&GenericDrug{})
	genericDrugMapping              = queries.MakeStructMapping(genericDrugType)
	genericDrugPrimaryKeyMapping, _ = queries.BindMapping(genericDrugType, genericDrugMapping, genericDrugPrimaryKeyColumns)
	genericDrugInsertCacheMut       sync.RWMutex
	genericDrugInsertCache          = make(map[string]insertCache)
	genericDrugUpdateCacheMut       sync.RWMutex
	genericDrugUpdateCache          = make(map[string]updateCache)
	genericDrugUpsertCacheMut       sync.RWMutex
	genericDrugUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var genericDrugBeforeInsertHooks []GenericDrugHook
var genericDrugBeforeUpdateHooks []GenericDrugHook
var genericDrugBeforeDeleteHooks []GenericDrugHook
var genericDrugBeforeUpsertHooks []GenericDrugHook

var genericDrugAfterInsertHooks []GenericDrugHook
var genericDrugAfterSelectHooks []GenericDrugHook
var genericDrugAfterUpdateHooks []GenericDrugHook
var genericDrugAfterDeleteHooks []GenericDrugHook
var genericDrugAfterUpsertHooks []GenericDrugHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GenericDrug) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericDrugBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GenericDrug) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericDrugBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GenericDrug) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericDrugBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GenericDrug) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericDrugBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GenericDrug) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericDrugAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GenericDrug) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericDrugAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GenericDrug) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericDrugAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GenericDrug) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericDrugAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GenericDrug) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genericDrugAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGenericDrugHook registers your hook function for all future operations.
func AddGenericDrugHook(hookPoint boil.HookPoint, genericDrugHook GenericDrugHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		genericDrugBeforeInsertHooks = append(genericDrugBeforeInsertHooks, genericDrugHook)
	case boil.BeforeUpdateHook:
		genericDrugBeforeUpdateHooks = append(genericDrugBeforeUpdateHooks, genericDrugHook)
	case boil.BeforeDeleteHook:
		genericDrugBeforeDeleteHooks = append(genericDrugBeforeDeleteHooks, genericDrugHook)
	case boil.BeforeUpsertHook:
		genericDrugBeforeUpsertHooks = append(genericDrugBeforeUpsertHooks, genericDrugHook)
	case boil.AfterInsertHook:
		genericDrugAfterInsertHooks = append(genericDrugAfterInsertHooks, genericDrugHook)
	case boil.AfterSelectHook:
		genericDrugAfterSelectHooks = append(genericDrugAfterSelectHooks, genericDrugHook)
	case boil.AfterUpdateHook:
		genericDrugAfterUpdateHooks = append(genericDrugAfterUpdateHooks, genericDrugHook)
	case boil.AfterDeleteHook:
		genericDrugAfterDeleteHooks = append(genericDrugAfterDeleteHooks, genericDrugHook)
	case boil.AfterUpsertHook:
		genericDrugAfterUpsertHooks = append(genericDrugAfterUpsertHooks, genericDrugHook)
	}
}

// One returns a single genericDrug record from the query.
func (q genericDrugQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GenericDrug, error) {
	o := &GenericDrug{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for GenericDrugs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GenericDrug records from the query.
func (q genericDrugQuery) All(ctx context.Context, exec boil.ContextExecutor) (GenericDrugSlice, error) {
	var o []*GenericDrug

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GenericDrug slice")
	}

	if len(genericDrugAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GenericDrug records in the query.
func (q genericDrugQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count GenericDrugs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q genericDrugQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if GenericDrugs exists")
	}

	return count > 0, nil
}

// GenericDrugs retrieves all the records using an executor.
func GenericDrugs(mods ...qm.QueryMod) genericDrugQuery {
	mods = append(mods, qm.From("[dbo].[GenericDrugs]"))
	return genericDrugQuery{NewQuery(mods...)}
}

// FindGenericDrug retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGenericDrug(ctx context.Context, exec boil.ContextExecutor, genericId string, selectCols ...string) (*GenericDrug, error) {
	genericDrugObj := &GenericDrug{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[GenericDrugs] where [GenericId]=$1", sel,
	)

	q := queries.Raw(query, genericId)

	err := q.Bind(ctx, exec, genericDrugObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from GenericDrugs")
	}

	if err = genericDrugObj.doAfterSelectHooks(ctx, exec); err != nil {
		return genericDrugObj, err
	}

	return genericDrugObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GenericDrug) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no GenericDrugs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genericDrugColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	genericDrugInsertCacheMut.RLock()
	cache, cached := genericDrugInsertCache[key]
	genericDrugInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			genericDrugAllColumns,
			genericDrugColumnsWithDefault,
			genericDrugColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(genericDrugType, genericDrugMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(genericDrugType, genericDrugMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[GenericDrugs] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[GenericDrugs] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into GenericDrugs")
	}

	if !cached {
		genericDrugInsertCacheMut.Lock()
		genericDrugInsertCache[key] = cache
		genericDrugInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GenericDrug.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GenericDrug) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	genericDrugUpdateCacheMut.RLock()
	cache, cached := genericDrugUpdateCache[key]
	genericDrugUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			genericDrugAllColumns,
			genericDrugPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, genericDrugColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update GenericDrugs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[GenericDrugs] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, genericDrugPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(genericDrugType, genericDrugMapping, append(wl, genericDrugPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update GenericDrugs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for GenericDrugs")
	}

	if !cached {
		genericDrugUpdateCacheMut.Lock()
		genericDrugUpdateCache[key] = cache
		genericDrugUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q genericDrugQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for GenericDrugs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for GenericDrugs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GenericDrugSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genericDrugPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[GenericDrugs] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, genericDrugPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in genericDrug slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all genericDrug")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *GenericDrug) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no GenericDrugs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genericDrugColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	genericDrugUpsertCacheMut.RLock()
	cache, cached := genericDrugUpsertCache[key]
	genericDrugUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			genericDrugAllColumns,
			genericDrugColumnsWithDefault,
			genericDrugColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, genericDrugColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(genericDrugPrimaryKeyColumns, v) && strmangle.ContainsAny(genericDrugColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert GenericDrugs, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, genericDrugColumnsWithAuto)
		ret = strmangle.SetMerge(ret, genericDrugColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			genericDrugAllColumns,
			genericDrugPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, genericDrugColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert GenericDrugs, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[GenericDrugs]", genericDrugPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(genericDrugPrimaryKeyColumns))
		copy(whitelist, genericDrugPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(genericDrugType, genericDrugMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(genericDrugType, genericDrugMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert GenericDrugs")
	}

	if !cached {
		genericDrugUpsertCacheMut.Lock()
		genericDrugUpsertCache[key] = cache
		genericDrugUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GenericDrug record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GenericDrug) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GenericDrug provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), genericDrugPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[GenericDrugs] WHERE [GenericId]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from GenericDrugs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for GenericDrugs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q genericDrugQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no genericDrugQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from GenericDrugs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for GenericDrugs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GenericDrugSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(genericDrugBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genericDrugPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[GenericDrugs] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genericDrugPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from genericDrug slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for GenericDrugs")
	}

	if len(genericDrugAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GenericDrug) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGenericDrug(ctx, exec, o.GenericId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GenericDrugSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GenericDrugSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genericDrugPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[GenericDrugs].* FROM [dbo].[GenericDrugs] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genericDrugPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GenericDrugSlice")
	}

	*o = slice

	return nil
}

// GenericDrugExists checks if the GenericDrug row exists.
func GenericDrugExists(ctx context.Context, exec boil.ContextExecutor, genericId string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[GenericDrugs] where [GenericId]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, genericId)
	}
	row := exec.QueryRowContext(ctx, sql, genericId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if GenericDrugs exists")
	}

	return exists, nil
}
