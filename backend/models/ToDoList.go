// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ToDoList is an object representing the database table.
type ToDoList struct {
	ID            int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	Task          string      `boil:"Task" json:"Task" toml:"Task" yaml:"Task"`
	CreateDate    time.Time   `boil:"CreateDate" json:"CreateDate" toml:"CreateDate" yaml:"CreateDate"`
	StartDate     time.Time   `boil:"StartDate" json:"StartDate" toml:"StartDate" yaml:"StartDate"`
	EndDate       time.Time   `boil:"EndDate" json:"EndDate" toml:"EndDate" yaml:"EndDate"`
	Completed     bool        `boil:"Completed" json:"Completed" toml:"Completed" yaml:"Completed"`
	Deleted       bool        `boil:"Deleted" json:"Deleted" toml:"Deleted" yaml:"Deleted"`
	Owner         null.String `boil:"Owner" json:"Owner,omitempty" toml:"Owner" yaml:"Owner,omitempty"`
	CompletedDate time.Time   `boil:"CompletedDate" json:"CompletedDate" toml:"CompletedDate" yaml:"CompletedDate"`

	R *toDoListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L toDoListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ToDoListColumns = struct {
	ID            string
	Task          string
	CreateDate    string
	StartDate     string
	EndDate       string
	Completed     string
	Deleted       string
	Owner         string
	CompletedDate string
}{
	ID:            "ID",
	Task:          "Task",
	CreateDate:    "CreateDate",
	StartDate:     "StartDate",
	EndDate:       "EndDate",
	Completed:     "Completed",
	Deleted:       "Deleted",
	Owner:         "Owner",
	CompletedDate: "CompletedDate",
}

var ToDoListTableColumns = struct {
	ID            string
	Task          string
	CreateDate    string
	StartDate     string
	EndDate       string
	Completed     string
	Deleted       string
	Owner         string
	CompletedDate string
}{
	ID:            "ToDoList.ID",
	Task:          "ToDoList.Task",
	CreateDate:    "ToDoList.CreateDate",
	StartDate:     "ToDoList.StartDate",
	EndDate:       "ToDoList.EndDate",
	Completed:     "ToDoList.Completed",
	Deleted:       "ToDoList.Deleted",
	Owner:         "ToDoList.Owner",
	CompletedDate: "ToDoList.CompletedDate",
}

// Generated where

var ToDoListWhere = struct {
	ID            whereHelperint
	Task          whereHelperstring
	CreateDate    whereHelpertime_Time
	StartDate     whereHelpertime_Time
	EndDate       whereHelpertime_Time
	Completed     whereHelperbool
	Deleted       whereHelperbool
	Owner         whereHelpernull_String
	CompletedDate whereHelpertime_Time
}{
	ID:            whereHelperint{field: "[dbo].[ToDoList].[ID]"},
	Task:          whereHelperstring{field: "[dbo].[ToDoList].[Task]"},
	CreateDate:    whereHelpertime_Time{field: "[dbo].[ToDoList].[CreateDate]"},
	StartDate:     whereHelpertime_Time{field: "[dbo].[ToDoList].[StartDate]"},
	EndDate:       whereHelpertime_Time{field: "[dbo].[ToDoList].[EndDate]"},
	Completed:     whereHelperbool{field: "[dbo].[ToDoList].[Completed]"},
	Deleted:       whereHelperbool{field: "[dbo].[ToDoList].[Deleted]"},
	Owner:         whereHelpernull_String{field: "[dbo].[ToDoList].[Owner]"},
	CompletedDate: whereHelpertime_Time{field: "[dbo].[ToDoList].[CompletedDate]"},
}

// ToDoListRels is where relationship names are stored.
var ToDoListRels = struct {
}{}

// toDoListR is where relationships are stored.
type toDoListR struct {
}

// NewStruct creates a new relationship struct
func (*toDoListR) NewStruct() *toDoListR {
	return &toDoListR{}
}

// toDoListL is where Load methods for each relationship are stored.
type toDoListL struct{}

var (
	toDoListAllColumns            = []string{"ID", "Task", "CreateDate", "StartDate", "EndDate", "Completed", "Deleted", "Owner", "CompletedDate"}
	toDoListColumnsWithAuto       = []string{}
	toDoListColumnsWithoutDefault = []string{"CreateDate", "StartDate", "EndDate"}
	toDoListColumnsWithDefault    = []string{"ID", "Task", "Completed", "Deleted", "Owner", "CompletedDate"}
	toDoListPrimaryKeyColumns     = []string{"ID"}
)

type (
	// ToDoListSlice is an alias for a slice of pointers to ToDoList.
	// This should almost always be used instead of []ToDoList.
	ToDoListSlice []*ToDoList
	// ToDoListHook is the signature for custom ToDoList hook methods
	ToDoListHook func(context.Context, boil.ContextExecutor, *ToDoList) error

	toDoListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	toDoListType                 = reflect.TypeOf(&ToDoList{})
	toDoListMapping              = queries.MakeStructMapping(toDoListType)
	toDoListPrimaryKeyMapping, _ = queries.BindMapping(toDoListType, toDoListMapping, toDoListPrimaryKeyColumns)
	toDoListInsertCacheMut       sync.RWMutex
	toDoListInsertCache          = make(map[string]insertCache)
	toDoListUpdateCacheMut       sync.RWMutex
	toDoListUpdateCache          = make(map[string]updateCache)
	toDoListUpsertCacheMut       sync.RWMutex
	toDoListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var toDoListBeforeInsertHooks []ToDoListHook
var toDoListBeforeUpdateHooks []ToDoListHook
var toDoListBeforeDeleteHooks []ToDoListHook
var toDoListBeforeUpsertHooks []ToDoListHook

var toDoListAfterInsertHooks []ToDoListHook
var toDoListAfterSelectHooks []ToDoListHook
var toDoListAfterUpdateHooks []ToDoListHook
var toDoListAfterDeleteHooks []ToDoListHook
var toDoListAfterUpsertHooks []ToDoListHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ToDoList) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range toDoListBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ToDoList) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range toDoListBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ToDoList) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range toDoListBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ToDoList) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range toDoListBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ToDoList) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range toDoListAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ToDoList) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range toDoListAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ToDoList) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range toDoListAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ToDoList) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range toDoListAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ToDoList) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range toDoListAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddToDoListHook registers your hook function for all future operations.
func AddToDoListHook(hookPoint boil.HookPoint, toDoListHook ToDoListHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		toDoListBeforeInsertHooks = append(toDoListBeforeInsertHooks, toDoListHook)
	case boil.BeforeUpdateHook:
		toDoListBeforeUpdateHooks = append(toDoListBeforeUpdateHooks, toDoListHook)
	case boil.BeforeDeleteHook:
		toDoListBeforeDeleteHooks = append(toDoListBeforeDeleteHooks, toDoListHook)
	case boil.BeforeUpsertHook:
		toDoListBeforeUpsertHooks = append(toDoListBeforeUpsertHooks, toDoListHook)
	case boil.AfterInsertHook:
		toDoListAfterInsertHooks = append(toDoListAfterInsertHooks, toDoListHook)
	case boil.AfterSelectHook:
		toDoListAfterSelectHooks = append(toDoListAfterSelectHooks, toDoListHook)
	case boil.AfterUpdateHook:
		toDoListAfterUpdateHooks = append(toDoListAfterUpdateHooks, toDoListHook)
	case boil.AfterDeleteHook:
		toDoListAfterDeleteHooks = append(toDoListAfterDeleteHooks, toDoListHook)
	case boil.AfterUpsertHook:
		toDoListAfterUpsertHooks = append(toDoListAfterUpsertHooks, toDoListHook)
	}
}

// One returns a single toDoList record from the query.
func (q toDoListQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ToDoList, error) {
	o := &ToDoList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ToDoList")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ToDoList records from the query.
func (q toDoListQuery) All(ctx context.Context, exec boil.ContextExecutor) (ToDoListSlice, error) {
	var o []*ToDoList

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ToDoList slice")
	}

	if len(toDoListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ToDoList records in the query.
func (q toDoListQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ToDoList rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q toDoListQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ToDoList exists")
	}

	return count > 0, nil
}

// ToDoLists retrieves all the records using an executor.
func ToDoLists(mods ...qm.QueryMod) toDoListQuery {
	mods = append(mods, qm.From("[dbo].[ToDoList]"))
	return toDoListQuery{NewQuery(mods...)}
}

// FindToDoList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindToDoList(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ToDoList, error) {
	toDoListObj := &ToDoList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ToDoList] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, toDoListObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ToDoList")
	}

	if err = toDoListObj.doAfterSelectHooks(ctx, exec); err != nil {
		return toDoListObj, err
	}

	return toDoListObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ToDoList) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ToDoList provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(toDoListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	toDoListInsertCacheMut.RLock()
	cache, cached := toDoListInsertCache[key]
	toDoListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			toDoListAllColumns,
			toDoListColumnsWithDefault,
			toDoListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(toDoListType, toDoListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(toDoListType, toDoListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ToDoList] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ToDoList] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ToDoList")
	}

	if !cached {
		toDoListInsertCacheMut.Lock()
		toDoListInsertCache[key] = cache
		toDoListInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ToDoList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ToDoList) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	toDoListUpdateCacheMut.RLock()
	cache, cached := toDoListUpdateCache[key]
	toDoListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			toDoListAllColumns,
			toDoListPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, toDoListColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ToDoList, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ToDoList] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, toDoListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(toDoListType, toDoListMapping, append(wl, toDoListPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ToDoList row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ToDoList")
	}

	if !cached {
		toDoListUpdateCacheMut.Lock()
		toDoListUpdateCache[key] = cache
		toDoListUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q toDoListQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ToDoList")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ToDoList")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ToDoListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), toDoListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ToDoList] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, toDoListPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in toDoList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all toDoList")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ToDoList) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ToDoList provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(toDoListColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	toDoListUpsertCacheMut.RLock()
	cache, cached := toDoListUpsertCache[key]
	toDoListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			toDoListAllColumns,
			toDoListColumnsWithDefault,
			toDoListColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, toDoListColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(toDoListPrimaryKeyColumns, v) && strmangle.ContainsAny(toDoListColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert ToDoList, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, toDoListColumnsWithAuto)
		ret = strmangle.SetMerge(ret, toDoListColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			toDoListAllColumns,
			toDoListPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, toDoListColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ToDoList, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ToDoList]", toDoListPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(toDoListPrimaryKeyColumns))
		copy(whitelist, toDoListPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(toDoListType, toDoListMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(toDoListType, toDoListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ToDoList")
	}

	if !cached {
		toDoListUpsertCacheMut.Lock()
		toDoListUpsertCache[key] = cache
		toDoListUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ToDoList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ToDoList) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ToDoList provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), toDoListPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ToDoList] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ToDoList")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ToDoList")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q toDoListQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no toDoListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ToDoList")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ToDoList")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ToDoListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(toDoListBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), toDoListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ToDoList] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, toDoListPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from toDoList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ToDoList")
	}

	if len(toDoListAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ToDoList) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindToDoList(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ToDoListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ToDoListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), toDoListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ToDoList].* FROM [dbo].[ToDoList] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, toDoListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ToDoListSlice")
	}

	*o = slice

	return nil
}

// ToDoListExists checks if the ToDoList row exists.
func ToDoListExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ToDoList] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ToDoList exists")
	}

	return exists, nil
}
