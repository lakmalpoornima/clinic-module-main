// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NextVisitDropDown is an object representing the database table.
type NextVisitDropDown struct {
	ID       int    `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	ReviewIn string `boil:"ReviewIn" json:"ReviewIn" toml:"ReviewIn" yaml:"ReviewIn"`
	InDays   int    `boil:"InDays" json:"InDays" toml:"InDays" yaml:"InDays"`

	R *nextVisitDropDownR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L nextVisitDropDownL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NextVisitDropDownColumns = struct {
	ID       string
	ReviewIn string
	InDays   string
}{
	ID:       "ID",
	ReviewIn: "ReviewIn",
	InDays:   "InDays",
}

var NextVisitDropDownTableColumns = struct {
	ID       string
	ReviewIn string
	InDays   string
}{
	ID:       "NextVisitDropDown.ID",
	ReviewIn: "NextVisitDropDown.ReviewIn",
	InDays:   "NextVisitDropDown.InDays",
}

// Generated where

var NextVisitDropDownWhere = struct {
	ID       whereHelperint
	ReviewIn whereHelperstring
	InDays   whereHelperint
}{
	ID:       whereHelperint{field: "[dbo].[NextVisitDropDown].[ID]"},
	ReviewIn: whereHelperstring{field: "[dbo].[NextVisitDropDown].[ReviewIn]"},
	InDays:   whereHelperint{field: "[dbo].[NextVisitDropDown].[InDays]"},
}

// NextVisitDropDownRels is where relationship names are stored.
var NextVisitDropDownRels = struct {
}{}

// nextVisitDropDownR is where relationships are stored.
type nextVisitDropDownR struct {
}

// NewStruct creates a new relationship struct
func (*nextVisitDropDownR) NewStruct() *nextVisitDropDownR {
	return &nextVisitDropDownR{}
}

// nextVisitDropDownL is where Load methods for each relationship are stored.
type nextVisitDropDownL struct{}

var (
	nextVisitDropDownAllColumns            = []string{"ID", "ReviewIn", "InDays"}
	nextVisitDropDownColumnsWithAuto       = []string{}
	nextVisitDropDownColumnsWithoutDefault = []string{}
	nextVisitDropDownColumnsWithDefault    = []string{"ID", "ReviewIn", "InDays"}
	nextVisitDropDownPrimaryKeyColumns     = []string{"ID"}
)

type (
	// NextVisitDropDownSlice is an alias for a slice of pointers to NextVisitDropDown.
	// This should almost always be used instead of []NextVisitDropDown.
	NextVisitDropDownSlice []*NextVisitDropDown
	// NextVisitDropDownHook is the signature for custom NextVisitDropDown hook methods
	NextVisitDropDownHook func(context.Context, boil.ContextExecutor, *NextVisitDropDown) error

	nextVisitDropDownQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	nextVisitDropDownType                 = reflect.TypeOf(&NextVisitDropDown{})
	nextVisitDropDownMapping              = queries.MakeStructMapping(nextVisitDropDownType)
	nextVisitDropDownPrimaryKeyMapping, _ = queries.BindMapping(nextVisitDropDownType, nextVisitDropDownMapping, nextVisitDropDownPrimaryKeyColumns)
	nextVisitDropDownInsertCacheMut       sync.RWMutex
	nextVisitDropDownInsertCache          = make(map[string]insertCache)
	nextVisitDropDownUpdateCacheMut       sync.RWMutex
	nextVisitDropDownUpdateCache          = make(map[string]updateCache)
	nextVisitDropDownUpsertCacheMut       sync.RWMutex
	nextVisitDropDownUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var nextVisitDropDownBeforeInsertHooks []NextVisitDropDownHook
var nextVisitDropDownBeforeUpdateHooks []NextVisitDropDownHook
var nextVisitDropDownBeforeDeleteHooks []NextVisitDropDownHook
var nextVisitDropDownBeforeUpsertHooks []NextVisitDropDownHook

var nextVisitDropDownAfterInsertHooks []NextVisitDropDownHook
var nextVisitDropDownAfterSelectHooks []NextVisitDropDownHook
var nextVisitDropDownAfterUpdateHooks []NextVisitDropDownHook
var nextVisitDropDownAfterDeleteHooks []NextVisitDropDownHook
var nextVisitDropDownAfterUpsertHooks []NextVisitDropDownHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NextVisitDropDown) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nextVisitDropDownBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NextVisitDropDown) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nextVisitDropDownBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NextVisitDropDown) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nextVisitDropDownBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NextVisitDropDown) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nextVisitDropDownBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NextVisitDropDown) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nextVisitDropDownAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NextVisitDropDown) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nextVisitDropDownAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NextVisitDropDown) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nextVisitDropDownAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NextVisitDropDown) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nextVisitDropDownAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NextVisitDropDown) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range nextVisitDropDownAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNextVisitDropDownHook registers your hook function for all future operations.
func AddNextVisitDropDownHook(hookPoint boil.HookPoint, nextVisitDropDownHook NextVisitDropDownHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		nextVisitDropDownBeforeInsertHooks = append(nextVisitDropDownBeforeInsertHooks, nextVisitDropDownHook)
	case boil.BeforeUpdateHook:
		nextVisitDropDownBeforeUpdateHooks = append(nextVisitDropDownBeforeUpdateHooks, nextVisitDropDownHook)
	case boil.BeforeDeleteHook:
		nextVisitDropDownBeforeDeleteHooks = append(nextVisitDropDownBeforeDeleteHooks, nextVisitDropDownHook)
	case boil.BeforeUpsertHook:
		nextVisitDropDownBeforeUpsertHooks = append(nextVisitDropDownBeforeUpsertHooks, nextVisitDropDownHook)
	case boil.AfterInsertHook:
		nextVisitDropDownAfterInsertHooks = append(nextVisitDropDownAfterInsertHooks, nextVisitDropDownHook)
	case boil.AfterSelectHook:
		nextVisitDropDownAfterSelectHooks = append(nextVisitDropDownAfterSelectHooks, nextVisitDropDownHook)
	case boil.AfterUpdateHook:
		nextVisitDropDownAfterUpdateHooks = append(nextVisitDropDownAfterUpdateHooks, nextVisitDropDownHook)
	case boil.AfterDeleteHook:
		nextVisitDropDownAfterDeleteHooks = append(nextVisitDropDownAfterDeleteHooks, nextVisitDropDownHook)
	case boil.AfterUpsertHook:
		nextVisitDropDownAfterUpsertHooks = append(nextVisitDropDownAfterUpsertHooks, nextVisitDropDownHook)
	}
}

// One returns a single nextVisitDropDown record from the query.
func (q nextVisitDropDownQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NextVisitDropDown, error) {
	o := &NextVisitDropDown{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for NextVisitDropDown")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NextVisitDropDown records from the query.
func (q nextVisitDropDownQuery) All(ctx context.Context, exec boil.ContextExecutor) (NextVisitDropDownSlice, error) {
	var o []*NextVisitDropDown

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NextVisitDropDown slice")
	}

	if len(nextVisitDropDownAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NextVisitDropDown records in the query.
func (q nextVisitDropDownQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count NextVisitDropDown rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q nextVisitDropDownQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if NextVisitDropDown exists")
	}

	return count > 0, nil
}

// NextVisitDropDowns retrieves all the records using an executor.
func NextVisitDropDowns(mods ...qm.QueryMod) nextVisitDropDownQuery {
	mods = append(mods, qm.From("[dbo].[NextVisitDropDown]"))
	return nextVisitDropDownQuery{NewQuery(mods...)}
}

// FindNextVisitDropDown retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNextVisitDropDown(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*NextVisitDropDown, error) {
	nextVisitDropDownObj := &NextVisitDropDown{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[NextVisitDropDown] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, nextVisitDropDownObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from NextVisitDropDown")
	}

	if err = nextVisitDropDownObj.doAfterSelectHooks(ctx, exec); err != nil {
		return nextVisitDropDownObj, err
	}

	return nextVisitDropDownObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NextVisitDropDown) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no NextVisitDropDown provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nextVisitDropDownColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	nextVisitDropDownInsertCacheMut.RLock()
	cache, cached := nextVisitDropDownInsertCache[key]
	nextVisitDropDownInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			nextVisitDropDownAllColumns,
			nextVisitDropDownColumnsWithDefault,
			nextVisitDropDownColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(nextVisitDropDownType, nextVisitDropDownMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(nextVisitDropDownType, nextVisitDropDownMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[NextVisitDropDown] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[NextVisitDropDown] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into NextVisitDropDown")
	}

	if !cached {
		nextVisitDropDownInsertCacheMut.Lock()
		nextVisitDropDownInsertCache[key] = cache
		nextVisitDropDownInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NextVisitDropDown.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NextVisitDropDown) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	nextVisitDropDownUpdateCacheMut.RLock()
	cache, cached := nextVisitDropDownUpdateCache[key]
	nextVisitDropDownUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			nextVisitDropDownAllColumns,
			nextVisitDropDownPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, nextVisitDropDownColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update NextVisitDropDown, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[NextVisitDropDown] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, nextVisitDropDownPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(nextVisitDropDownType, nextVisitDropDownMapping, append(wl, nextVisitDropDownPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update NextVisitDropDown row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for NextVisitDropDown")
	}

	if !cached {
		nextVisitDropDownUpdateCacheMut.Lock()
		nextVisitDropDownUpdateCache[key] = cache
		nextVisitDropDownUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q nextVisitDropDownQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for NextVisitDropDown")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for NextVisitDropDown")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NextVisitDropDownSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nextVisitDropDownPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[NextVisitDropDown] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, nextVisitDropDownPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in nextVisitDropDown slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all nextVisitDropDown")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *NextVisitDropDown) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no NextVisitDropDown provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(nextVisitDropDownColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	nextVisitDropDownUpsertCacheMut.RLock()
	cache, cached := nextVisitDropDownUpsertCache[key]
	nextVisitDropDownUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			nextVisitDropDownAllColumns,
			nextVisitDropDownColumnsWithDefault,
			nextVisitDropDownColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, nextVisitDropDownColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(nextVisitDropDownPrimaryKeyColumns, v) && strmangle.ContainsAny(nextVisitDropDownColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert NextVisitDropDown, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, nextVisitDropDownColumnsWithAuto)
		ret = strmangle.SetMerge(ret, nextVisitDropDownColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			nextVisitDropDownAllColumns,
			nextVisitDropDownPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, nextVisitDropDownColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert NextVisitDropDown, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[NextVisitDropDown]", nextVisitDropDownPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(nextVisitDropDownPrimaryKeyColumns))
		copy(whitelist, nextVisitDropDownPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(nextVisitDropDownType, nextVisitDropDownMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(nextVisitDropDownType, nextVisitDropDownMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert NextVisitDropDown")
	}

	if !cached {
		nextVisitDropDownUpsertCacheMut.Lock()
		nextVisitDropDownUpsertCache[key] = cache
		nextVisitDropDownUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NextVisitDropDown record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NextVisitDropDown) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NextVisitDropDown provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), nextVisitDropDownPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[NextVisitDropDown] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from NextVisitDropDown")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for NextVisitDropDown")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q nextVisitDropDownQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no nextVisitDropDownQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from NextVisitDropDown")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for NextVisitDropDown")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NextVisitDropDownSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(nextVisitDropDownBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nextVisitDropDownPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[NextVisitDropDown] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nextVisitDropDownPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from nextVisitDropDown slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for NextVisitDropDown")
	}

	if len(nextVisitDropDownAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NextVisitDropDown) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNextVisitDropDown(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NextVisitDropDownSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NextVisitDropDownSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), nextVisitDropDownPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[NextVisitDropDown].* FROM [dbo].[NextVisitDropDown] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, nextVisitDropDownPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NextVisitDropDownSlice")
	}

	*o = slice

	return nil
}

// NextVisitDropDownExists checks if the NextVisitDropDown row exists.
func NextVisitDropDownExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[NextVisitDropDown] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if NextVisitDropDown exists")
	}

	return exists, nil
}
