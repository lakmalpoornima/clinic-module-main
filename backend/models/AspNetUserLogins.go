// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AspNetUserLogin is an object representing the database table.
type AspNetUserLogin struct {
	LoginProvider       string      `boil:"LoginProvider" json:"LoginProvider" toml:"LoginProvider" yaml:"LoginProvider"`
	ProviderKey         string      `boil:"ProviderKey" json:"ProviderKey" toml:"ProviderKey" yaml:"ProviderKey"`
	ProviderDisplayName null.String `boil:"ProviderDisplayName" json:"ProviderDisplayName,omitempty" toml:"ProviderDisplayName" yaml:"ProviderDisplayName,omitempty"`
	UserId              string      `boil:"UserId" json:"UserId" toml:"UserId" yaml:"UserId"`

	R *aspNetUserLoginR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aspNetUserLoginL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AspNetUserLoginColumns = struct {
	LoginProvider       string
	ProviderKey         string
	ProviderDisplayName string
	UserId              string
}{
	LoginProvider:       "LoginProvider",
	ProviderKey:         "ProviderKey",
	ProviderDisplayName: "ProviderDisplayName",
	UserId:              "UserId",
}

var AspNetUserLoginTableColumns = struct {
	LoginProvider       string
	ProviderKey         string
	ProviderDisplayName string
	UserId              string
}{
	LoginProvider:       "AspNetUserLogins.LoginProvider",
	ProviderKey:         "AspNetUserLogins.ProviderKey",
	ProviderDisplayName: "AspNetUserLogins.ProviderDisplayName",
	UserId:              "AspNetUserLogins.UserId",
}

// Generated where

var AspNetUserLoginWhere = struct {
	LoginProvider       whereHelperstring
	ProviderKey         whereHelperstring
	ProviderDisplayName whereHelpernull_String
	UserId              whereHelperstring
}{
	LoginProvider:       whereHelperstring{field: "[dbo].[AspNetUserLogins].[LoginProvider]"},
	ProviderKey:         whereHelperstring{field: "[dbo].[AspNetUserLogins].[ProviderKey]"},
	ProviderDisplayName: whereHelpernull_String{field: "[dbo].[AspNetUserLogins].[ProviderDisplayName]"},
	UserId:              whereHelperstring{field: "[dbo].[AspNetUserLogins].[UserId]"},
}

// AspNetUserLoginRels is where relationship names are stored.
var AspNetUserLoginRels = struct {
	UserIdAspNetUsers978979 string
}{
	UserIdAspNetUsers978979: "UserIdAspNetUsers978979",
}

// aspNetUserLoginR is where relationships are stored.
type aspNetUserLoginR struct {
	UserIdAspNetUsers978979 *AspNetUsers978979 `boil:"UserIdAspNetUsers978979" json:"UserIdAspNetUsers978979" toml:"UserIdAspNetUsers978979" yaml:"UserIdAspNetUsers978979"`
}

// NewStruct creates a new relationship struct
func (*aspNetUserLoginR) NewStruct() *aspNetUserLoginR {
	return &aspNetUserLoginR{}
}

// aspNetUserLoginL is where Load methods for each relationship are stored.
type aspNetUserLoginL struct{}

var (
	aspNetUserLoginAllColumns            = []string{"LoginProvider", "ProviderKey", "ProviderDisplayName", "UserId"}
	aspNetUserLoginColumnsWithAuto       = []string{}
	aspNetUserLoginColumnsWithoutDefault = []string{"LoginProvider", "ProviderKey", "ProviderDisplayName", "UserId"}
	aspNetUserLoginColumnsWithDefault    = []string{}
	aspNetUserLoginPrimaryKeyColumns     = []string{"LoginProvider", "ProviderKey"}
)

type (
	// AspNetUserLoginSlice is an alias for a slice of pointers to AspNetUserLogin.
	// This should almost always be used instead of []AspNetUserLogin.
	AspNetUserLoginSlice []*AspNetUserLogin
	// AspNetUserLoginHook is the signature for custom AspNetUserLogin hook methods
	AspNetUserLoginHook func(context.Context, boil.ContextExecutor, *AspNetUserLogin) error

	aspNetUserLoginQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aspNetUserLoginType                 = reflect.TypeOf(&AspNetUserLogin{})
	aspNetUserLoginMapping              = queries.MakeStructMapping(aspNetUserLoginType)
	aspNetUserLoginPrimaryKeyMapping, _ = queries.BindMapping(aspNetUserLoginType, aspNetUserLoginMapping, aspNetUserLoginPrimaryKeyColumns)
	aspNetUserLoginInsertCacheMut       sync.RWMutex
	aspNetUserLoginInsertCache          = make(map[string]insertCache)
	aspNetUserLoginUpdateCacheMut       sync.RWMutex
	aspNetUserLoginUpdateCache          = make(map[string]updateCache)
	aspNetUserLoginUpsertCacheMut       sync.RWMutex
	aspNetUserLoginUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aspNetUserLoginBeforeInsertHooks []AspNetUserLoginHook
var aspNetUserLoginBeforeUpdateHooks []AspNetUserLoginHook
var aspNetUserLoginBeforeDeleteHooks []AspNetUserLoginHook
var aspNetUserLoginBeforeUpsertHooks []AspNetUserLoginHook

var aspNetUserLoginAfterInsertHooks []AspNetUserLoginHook
var aspNetUserLoginAfterSelectHooks []AspNetUserLoginHook
var aspNetUserLoginAfterUpdateHooks []AspNetUserLoginHook
var aspNetUserLoginAfterDeleteHooks []AspNetUserLoginHook
var aspNetUserLoginAfterUpsertHooks []AspNetUserLoginHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AspNetUserLogin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserLoginBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AspNetUserLogin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserLoginBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AspNetUserLogin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserLoginBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AspNetUserLogin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserLoginBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AspNetUserLogin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserLoginAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AspNetUserLogin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserLoginAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AspNetUserLogin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserLoginAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AspNetUserLogin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserLoginAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AspNetUserLogin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserLoginAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAspNetUserLoginHook registers your hook function for all future operations.
func AddAspNetUserLoginHook(hookPoint boil.HookPoint, aspNetUserLoginHook AspNetUserLoginHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		aspNetUserLoginBeforeInsertHooks = append(aspNetUserLoginBeforeInsertHooks, aspNetUserLoginHook)
	case boil.BeforeUpdateHook:
		aspNetUserLoginBeforeUpdateHooks = append(aspNetUserLoginBeforeUpdateHooks, aspNetUserLoginHook)
	case boil.BeforeDeleteHook:
		aspNetUserLoginBeforeDeleteHooks = append(aspNetUserLoginBeforeDeleteHooks, aspNetUserLoginHook)
	case boil.BeforeUpsertHook:
		aspNetUserLoginBeforeUpsertHooks = append(aspNetUserLoginBeforeUpsertHooks, aspNetUserLoginHook)
	case boil.AfterInsertHook:
		aspNetUserLoginAfterInsertHooks = append(aspNetUserLoginAfterInsertHooks, aspNetUserLoginHook)
	case boil.AfterSelectHook:
		aspNetUserLoginAfterSelectHooks = append(aspNetUserLoginAfterSelectHooks, aspNetUserLoginHook)
	case boil.AfterUpdateHook:
		aspNetUserLoginAfterUpdateHooks = append(aspNetUserLoginAfterUpdateHooks, aspNetUserLoginHook)
	case boil.AfterDeleteHook:
		aspNetUserLoginAfterDeleteHooks = append(aspNetUserLoginAfterDeleteHooks, aspNetUserLoginHook)
	case boil.AfterUpsertHook:
		aspNetUserLoginAfterUpsertHooks = append(aspNetUserLoginAfterUpsertHooks, aspNetUserLoginHook)
	}
}

// One returns a single aspNetUserLogin record from the query.
func (q aspNetUserLoginQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AspNetUserLogin, error) {
	o := &AspNetUserLogin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AspNetUserLogins")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AspNetUserLogin records from the query.
func (q aspNetUserLoginQuery) All(ctx context.Context, exec boil.ContextExecutor) (AspNetUserLoginSlice, error) {
	var o []*AspNetUserLogin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AspNetUserLogin slice")
	}

	if len(aspNetUserLoginAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AspNetUserLogin records in the query.
func (q aspNetUserLoginQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AspNetUserLogins rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aspNetUserLoginQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AspNetUserLogins exists")
	}

	return count > 0, nil
}

// UserIdAspNetUsers978979 pointed to by the foreign key.
func (o *AspNetUserLogin) UserIdAspNetUsers978979(mods ...qm.QueryMod) aspNetUsers978979Query {
	queryMods := []qm.QueryMod{
		qm.Where("[Id] = ?", o.UserId),
	}

	queryMods = append(queryMods, mods...)

	query := AspNetUsers978979s(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[AspNetUsers978979]")

	return query
}

// LoadUserIdAspNetUsers978979 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aspNetUserLoginL) LoadUserIdAspNetUsers978979(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAspNetUserLogin interface{}, mods queries.Applicator) error {
	var slice []*AspNetUserLogin
	var object *AspNetUserLogin

	if singular {
		object = maybeAspNetUserLogin.(*AspNetUserLogin)
	} else {
		slice = *maybeAspNetUserLogin.(*[]*AspNetUserLogin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aspNetUserLoginR{}
		}
		args = append(args, object.UserId)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aspNetUserLoginR{}
			}

			for _, a := range args {
				if a == obj.UserId {
					continue Outer
				}
			}

			args = append(args, obj.UserId)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.AspNetUsers978979`),
		qm.WhereIn(`dbo.AspNetUsers978979.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AspNetUsers978979")
	}

	var resultSlice []*AspNetUsers978979
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AspNetUsers978979")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for AspNetUsers978979")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AspNetUsers978979")
	}

	if len(aspNetUserLoginAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserIdAspNetUsers978979 = foreign
		if foreign.R == nil {
			foreign.R = &aspNetUsers978979R{}
		}
		foreign.R.UserIdAspNetUserLogins = append(foreign.R.UserIdAspNetUserLogins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserId == foreign.ID {
				local.R.UserIdAspNetUsers978979 = foreign
				if foreign.R == nil {
					foreign.R = &aspNetUsers978979R{}
				}
				foreign.R.UserIdAspNetUserLogins = append(foreign.R.UserIdAspNetUserLogins, local)
				break
			}
		}
	}

	return nil
}

// SetUserIdAspNetUsers978979 of the aspNetUserLogin to the related item.
// Sets o.R.UserIdAspNetUsers978979 to related.
// Adds o to related.R.UserIdAspNetUserLogins.
func (o *AspNetUserLogin) SetUserIdAspNetUsers978979(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AspNetUsers978979) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[AspNetUserLogins] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"UserId"}),
		strmangle.WhereClause("[", "]", 2, aspNetUserLoginPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.LoginProvider, o.ProviderKey}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserId = related.ID
	if o.R == nil {
		o.R = &aspNetUserLoginR{
			UserIdAspNetUsers978979: related,
		}
	} else {
		o.R.UserIdAspNetUsers978979 = related
	}

	if related.R == nil {
		related.R = &aspNetUsers978979R{
			UserIdAspNetUserLogins: AspNetUserLoginSlice{o},
		}
	} else {
		related.R.UserIdAspNetUserLogins = append(related.R.UserIdAspNetUserLogins, o)
	}

	return nil
}

// AspNetUserLogins retrieves all the records using an executor.
func AspNetUserLogins(mods ...qm.QueryMod) aspNetUserLoginQuery {
	mods = append(mods, qm.From("[dbo].[AspNetUserLogins]"))
	return aspNetUserLoginQuery{NewQuery(mods...)}
}

// FindAspNetUserLogin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAspNetUserLogin(ctx context.Context, exec boil.ContextExecutor, loginProvider string, providerKey string, selectCols ...string) (*AspNetUserLogin, error) {
	aspNetUserLoginObj := &AspNetUserLogin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[AspNetUserLogins] where [LoginProvider]=$1 AND [ProviderKey]=$2", sel,
	)

	q := queries.Raw(query, loginProvider, providerKey)

	err := q.Bind(ctx, exec, aspNetUserLoginObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AspNetUserLogins")
	}

	if err = aspNetUserLoginObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aspNetUserLoginObj, err
	}

	return aspNetUserLoginObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AspNetUserLogin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetUserLogins provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetUserLoginColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aspNetUserLoginInsertCacheMut.RLock()
	cache, cached := aspNetUserLoginInsertCache[key]
	aspNetUserLoginInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aspNetUserLoginAllColumns,
			aspNetUserLoginColumnsWithDefault,
			aspNetUserLoginColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aspNetUserLoginType, aspNetUserLoginMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aspNetUserLoginType, aspNetUserLoginMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[AspNetUserLogins] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[AspNetUserLogins] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AspNetUserLogins")
	}

	if !cached {
		aspNetUserLoginInsertCacheMut.Lock()
		aspNetUserLoginInsertCache[key] = cache
		aspNetUserLoginInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AspNetUserLogin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AspNetUserLogin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aspNetUserLoginUpdateCacheMut.RLock()
	cache, cached := aspNetUserLoginUpdateCache[key]
	aspNetUserLoginUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aspNetUserLoginAllColumns,
			aspNetUserLoginPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, aspNetUserLoginColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AspNetUserLogins, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[AspNetUserLogins] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, aspNetUserLoginPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aspNetUserLoginType, aspNetUserLoginMapping, append(wl, aspNetUserLoginPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AspNetUserLogins row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AspNetUserLogins")
	}

	if !cached {
		aspNetUserLoginUpdateCacheMut.Lock()
		aspNetUserLoginUpdateCache[key] = cache
		aspNetUserLoginUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aspNetUserLoginQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AspNetUserLogins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AspNetUserLogins")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AspNetUserLoginSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUserLoginPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[AspNetUserLogins] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aspNetUserLoginPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aspNetUserLogin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aspNetUserLogin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AspNetUserLogin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetUserLogins provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetUserLoginColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aspNetUserLoginUpsertCacheMut.RLock()
	cache, cached := aspNetUserLoginUpsertCache[key]
	aspNetUserLoginUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			aspNetUserLoginAllColumns,
			aspNetUserLoginColumnsWithDefault,
			aspNetUserLoginColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, aspNetUserLoginColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(aspNetUserLoginPrimaryKeyColumns, v) && strmangle.ContainsAny(aspNetUserLoginColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert AspNetUserLogins, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, aspNetUserLoginColumnsWithAuto)
		ret = strmangle.SetMerge(ret, aspNetUserLoginColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			aspNetUserLoginAllColumns,
			aspNetUserLoginPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, aspNetUserLoginColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert AspNetUserLogins, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[AspNetUserLogins]", aspNetUserLoginPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(aspNetUserLoginPrimaryKeyColumns))
		copy(whitelist, aspNetUserLoginPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(aspNetUserLoginType, aspNetUserLoginMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aspNetUserLoginType, aspNetUserLoginMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert AspNetUserLogins")
	}

	if !cached {
		aspNetUserLoginUpsertCacheMut.Lock()
		aspNetUserLoginUpsertCache[key] = cache
		aspNetUserLoginUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AspNetUserLogin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AspNetUserLogin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AspNetUserLogin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aspNetUserLoginPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[AspNetUserLogins] WHERE [LoginProvider]=$1 AND [ProviderKey]=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AspNetUserLogins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AspNetUserLogins")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aspNetUserLoginQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aspNetUserLoginQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AspNetUserLogins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetUserLogins")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AspNetUserLoginSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aspNetUserLoginBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUserLoginPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[AspNetUserLogins] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetUserLoginPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aspNetUserLogin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetUserLogins")
	}

	if len(aspNetUserLoginAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AspNetUserLogin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAspNetUserLogin(ctx, exec, o.LoginProvider, o.ProviderKey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AspNetUserLoginSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AspNetUserLoginSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUserLoginPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[AspNetUserLogins].* FROM [dbo].[AspNetUserLogins] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetUserLoginPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AspNetUserLoginSlice")
	}

	*o = slice

	return nil
}

// AspNetUserLoginExists checks if the AspNetUserLogin row exists.
func AspNetUserLoginExists(ctx context.Context, exec boil.ContextExecutor, loginProvider string, providerKey string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[AspNetUserLogins] where [LoginProvider]=$1 AND [ProviderKey]=$2) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, loginProvider, providerKey)
	}
	row := exec.QueryRowContext(ctx, sql, loginProvider, providerKey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AspNetUserLogins exists")
	}

	return exists, nil
}
