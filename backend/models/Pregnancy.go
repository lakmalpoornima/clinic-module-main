// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Pregnancy is an object representing the database table.
type Pregnancy struct {
	DocumentID        string      `boil:"DocumentID" json:"DocumentID" toml:"DocumentID" yaml:"DocumentID"`
	RegistrationID    string      `boil:"RegistrationID" json:"RegistrationID" toml:"RegistrationID" yaml:"RegistrationID"`
	PregnancyNo       int         `boil:"PregnancyNo" json:"PregnancyNo" toml:"PregnancyNo" yaml:"PregnancyNo"`
	Chiled            int         `boil:"Chiled" json:"Chiled" toml:"Chiled" yaml:"Chiled"`
	POA               string      `boil:"POA" json:"POA" toml:"POA" yaml:"POA"`
	MonitoringComment string      `boil:"MonitoringComment" json:"MonitoringComment" toml:"MonitoringComment" yaml:"MonitoringComment"`
	ID                int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	ObstertricHx      null.String `boil:"ObstertricHx" json:"ObstertricHx,omitempty" toml:"ObstertricHx" yaml:"ObstertricHx,omitempty"`

	R *pregnancyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pregnancyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PregnancyColumns = struct {
	DocumentID        string
	RegistrationID    string
	PregnancyNo       string
	Chiled            string
	POA               string
	MonitoringComment string
	ID                string
	ObstertricHx      string
}{
	DocumentID:        "DocumentID",
	RegistrationID:    "RegistrationID",
	PregnancyNo:       "PregnancyNo",
	Chiled:            "Chiled",
	POA:               "POA",
	MonitoringComment: "MonitoringComment",
	ID:                "ID",
	ObstertricHx:      "ObstertricHx",
}

var PregnancyTableColumns = struct {
	DocumentID        string
	RegistrationID    string
	PregnancyNo       string
	Chiled            string
	POA               string
	MonitoringComment string
	ID                string
	ObstertricHx      string
}{
	DocumentID:        "Pregnancy.DocumentID",
	RegistrationID:    "Pregnancy.RegistrationID",
	PregnancyNo:       "Pregnancy.PregnancyNo",
	Chiled:            "Pregnancy.Chiled",
	POA:               "Pregnancy.POA",
	MonitoringComment: "Pregnancy.MonitoringComment",
	ID:                "Pregnancy.ID",
	ObstertricHx:      "Pregnancy.ObstertricHx",
}

// Generated where

var PregnancyWhere = struct {
	DocumentID        whereHelperstring
	RegistrationID    whereHelperstring
	PregnancyNo       whereHelperint
	Chiled            whereHelperint
	POA               whereHelperstring
	MonitoringComment whereHelperstring
	ID                whereHelperint
	ObstertricHx      whereHelpernull_String
}{
	DocumentID:        whereHelperstring{field: "[dbo].[Pregnancy].[DocumentID]"},
	RegistrationID:    whereHelperstring{field: "[dbo].[Pregnancy].[RegistrationID]"},
	PregnancyNo:       whereHelperint{field: "[dbo].[Pregnancy].[PregnancyNo]"},
	Chiled:            whereHelperint{field: "[dbo].[Pregnancy].[Chiled]"},
	POA:               whereHelperstring{field: "[dbo].[Pregnancy].[POA]"},
	MonitoringComment: whereHelperstring{field: "[dbo].[Pregnancy].[MonitoringComment]"},
	ID:                whereHelperint{field: "[dbo].[Pregnancy].[ID]"},
	ObstertricHx:      whereHelpernull_String{field: "[dbo].[Pregnancy].[ObstertricHx]"},
}

// PregnancyRels is where relationship names are stored.
var PregnancyRels = struct {
}{}

// pregnancyR is where relationships are stored.
type pregnancyR struct {
}

// NewStruct creates a new relationship struct
func (*pregnancyR) NewStruct() *pregnancyR {
	return &pregnancyR{}
}

// pregnancyL is where Load methods for each relationship are stored.
type pregnancyL struct{}

var (
	pregnancyAllColumns            = []string{"DocumentID", "RegistrationID", "PregnancyNo", "Chiled", "POA", "MonitoringComment", "ID", "ObstertricHx"}
	pregnancyColumnsWithAuto       = []string{}
	pregnancyColumnsWithoutDefault = []string{"ObstertricHx"}
	pregnancyColumnsWithDefault    = []string{"DocumentID", "RegistrationID", "PregnancyNo", "Chiled", "POA", "MonitoringComment", "ID"}
	pregnancyPrimaryKeyColumns     = []string{"ID"}
)

type (
	// PregnancySlice is an alias for a slice of pointers to Pregnancy.
	// This should almost always be used instead of []Pregnancy.
	PregnancySlice []*Pregnancy
	// PregnancyHook is the signature for custom Pregnancy hook methods
	PregnancyHook func(context.Context, boil.ContextExecutor, *Pregnancy) error

	pregnancyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pregnancyType                 = reflect.TypeOf(&Pregnancy{})
	pregnancyMapping              = queries.MakeStructMapping(pregnancyType)
	pregnancyPrimaryKeyMapping, _ = queries.BindMapping(pregnancyType, pregnancyMapping, pregnancyPrimaryKeyColumns)
	pregnancyInsertCacheMut       sync.RWMutex
	pregnancyInsertCache          = make(map[string]insertCache)
	pregnancyUpdateCacheMut       sync.RWMutex
	pregnancyUpdateCache          = make(map[string]updateCache)
	pregnancyUpsertCacheMut       sync.RWMutex
	pregnancyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pregnancyBeforeInsertHooks []PregnancyHook
var pregnancyBeforeUpdateHooks []PregnancyHook
var pregnancyBeforeDeleteHooks []PregnancyHook
var pregnancyBeforeUpsertHooks []PregnancyHook

var pregnancyAfterInsertHooks []PregnancyHook
var pregnancyAfterSelectHooks []PregnancyHook
var pregnancyAfterUpdateHooks []PregnancyHook
var pregnancyAfterDeleteHooks []PregnancyHook
var pregnancyAfterUpsertHooks []PregnancyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pregnancy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pregnancyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pregnancy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pregnancyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pregnancy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pregnancyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pregnancy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pregnancyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pregnancy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pregnancyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pregnancy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pregnancyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pregnancy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pregnancyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pregnancy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pregnancyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pregnancy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pregnancyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPregnancyHook registers your hook function for all future operations.
func AddPregnancyHook(hookPoint boil.HookPoint, pregnancyHook PregnancyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pregnancyBeforeInsertHooks = append(pregnancyBeforeInsertHooks, pregnancyHook)
	case boil.BeforeUpdateHook:
		pregnancyBeforeUpdateHooks = append(pregnancyBeforeUpdateHooks, pregnancyHook)
	case boil.BeforeDeleteHook:
		pregnancyBeforeDeleteHooks = append(pregnancyBeforeDeleteHooks, pregnancyHook)
	case boil.BeforeUpsertHook:
		pregnancyBeforeUpsertHooks = append(pregnancyBeforeUpsertHooks, pregnancyHook)
	case boil.AfterInsertHook:
		pregnancyAfterInsertHooks = append(pregnancyAfterInsertHooks, pregnancyHook)
	case boil.AfterSelectHook:
		pregnancyAfterSelectHooks = append(pregnancyAfterSelectHooks, pregnancyHook)
	case boil.AfterUpdateHook:
		pregnancyAfterUpdateHooks = append(pregnancyAfterUpdateHooks, pregnancyHook)
	case boil.AfterDeleteHook:
		pregnancyAfterDeleteHooks = append(pregnancyAfterDeleteHooks, pregnancyHook)
	case boil.AfterUpsertHook:
		pregnancyAfterUpsertHooks = append(pregnancyAfterUpsertHooks, pregnancyHook)
	}
}

// One returns a single pregnancy record from the query.
func (q pregnancyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pregnancy, error) {
	o := &Pregnancy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Pregnancy")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pregnancy records from the query.
func (q pregnancyQuery) All(ctx context.Context, exec boil.ContextExecutor) (PregnancySlice, error) {
	var o []*Pregnancy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Pregnancy slice")
	}

	if len(pregnancyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pregnancy records in the query.
func (q pregnancyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Pregnancy rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pregnancyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Pregnancy exists")
	}

	return count > 0, nil
}

// Pregnancies retrieves all the records using an executor.
func Pregnancies(mods ...qm.QueryMod) pregnancyQuery {
	mods = append(mods, qm.From("[dbo].[Pregnancy]"))
	return pregnancyQuery{NewQuery(mods...)}
}

// FindPregnancy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPregnancy(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Pregnancy, error) {
	pregnancyObj := &Pregnancy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[Pregnancy] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pregnancyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Pregnancy")
	}

	if err = pregnancyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pregnancyObj, err
	}

	return pregnancyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pregnancy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Pregnancy provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pregnancyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pregnancyInsertCacheMut.RLock()
	cache, cached := pregnancyInsertCache[key]
	pregnancyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pregnancyAllColumns,
			pregnancyColumnsWithDefault,
			pregnancyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pregnancyType, pregnancyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pregnancyType, pregnancyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[Pregnancy] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[Pregnancy] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Pregnancy")
	}

	if !cached {
		pregnancyInsertCacheMut.Lock()
		pregnancyInsertCache[key] = cache
		pregnancyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Pregnancy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pregnancy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pregnancyUpdateCacheMut.RLock()
	cache, cached := pregnancyUpdateCache[key]
	pregnancyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pregnancyAllColumns,
			pregnancyPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, pregnancyColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Pregnancy, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[Pregnancy] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, pregnancyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pregnancyType, pregnancyMapping, append(wl, pregnancyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Pregnancy row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Pregnancy")
	}

	if !cached {
		pregnancyUpdateCacheMut.Lock()
		pregnancyUpdateCache[key] = cache
		pregnancyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pregnancyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Pregnancy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Pregnancy")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PregnancySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pregnancyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[Pregnancy] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pregnancyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pregnancy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pregnancy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Pregnancy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Pregnancy provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pregnancyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pregnancyUpsertCacheMut.RLock()
	cache, cached := pregnancyUpsertCache[key]
	pregnancyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pregnancyAllColumns,
			pregnancyColumnsWithDefault,
			pregnancyColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, pregnancyColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(pregnancyPrimaryKeyColumns, v) && strmangle.ContainsAny(pregnancyColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert Pregnancy, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, pregnancyColumnsWithAuto)
		ret = strmangle.SetMerge(ret, pregnancyColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			pregnancyAllColumns,
			pregnancyPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, pregnancyColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert Pregnancy, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[Pregnancy]", pregnancyPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(pregnancyPrimaryKeyColumns))
		copy(whitelist, pregnancyPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(pregnancyType, pregnancyMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pregnancyType, pregnancyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Pregnancy")
	}

	if !cached {
		pregnancyUpsertCacheMut.Lock()
		pregnancyUpsertCache[key] = cache
		pregnancyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Pregnancy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pregnancy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Pregnancy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pregnancyPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[Pregnancy] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Pregnancy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Pregnancy")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pregnancyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pregnancyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Pregnancy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Pregnancy")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PregnancySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pregnancyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pregnancyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[Pregnancy] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pregnancyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pregnancy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Pregnancy")
	}

	if len(pregnancyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pregnancy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPregnancy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PregnancySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PregnancySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pregnancyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[Pregnancy].* FROM [dbo].[Pregnancy] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pregnancyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PregnancySlice")
	}

	*o = slice

	return nil
}

// PregnancyExists checks if the Pregnancy row exists.
func PregnancyExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[Pregnancy] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Pregnancy exists")
	}

	return exists, nil
}
