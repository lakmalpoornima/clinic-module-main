// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PatientList is an object representing the database table.
type PatientList struct {
	ID             int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	PatientName    null.String `boil:"PatientName" json:"PatientName,omitempty" toml:"PatientName" yaml:"PatientName,omitempty"`
	RegistrationNo null.String `boil:"RegistrationNo" json:"RegistrationNo,omitempty" toml:"RegistrationNo" yaml:"RegistrationNo,omitempty"`
	Category       null.String `boil:"Category" json:"Category,omitempty" toml:"Category" yaml:"Category,omitempty"`
	Gender         null.String `boil:"Gender" json:"Gender,omitempty" toml:"Gender" yaml:"Gender,omitempty"`
	Age            null.String `boil:"Age" json:"Age,omitempty" toml:"Age" yaml:"Age,omitempty"`
	ReferenceNo    null.String `boil:"ReferenceNo" json:"ReferenceNo,omitempty" toml:"ReferenceNo" yaml:"ReferenceNo,omitempty"`
	AppNo          null.Int    `boil:"AppNo" json:"AppNo,omitempty" toml:"AppNo" yaml:"AppNo,omitempty"`
	AppDate        null.Time   `boil:"AppDate" json:"AppDate,omitempty" toml:"AppDate" yaml:"AppDate,omitempty"`
	Clinic         null.String `boil:"Clinic" json:"Clinic,omitempty" toml:"Clinic" yaml:"Clinic,omitempty"`
	Address        null.String `boil:"Address" json:"Address,omitempty" toml:"Address" yaml:"Address,omitempty"`
	ServiceStatus  null.String `boil:"ServiceStatus" json:"ServiceStatus,omitempty" toml:"ServiceStatus" yaml:"ServiceStatus,omitempty"`
	Priority       null.Int    `boil:"Priority" json:"Priority,omitempty" toml:"Priority" yaml:"Priority,omitempty"`
	Comment        null.String `boil:"Comment" json:"Comment,omitempty" toml:"Comment" yaml:"Comment,omitempty"`
	NewAppNo       null.Int    `boil:"NewAppNo" json:"NewAppNo,omitempty" toml:"NewAppNo" yaml:"NewAppNo,omitempty"`

	R *patientListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L patientListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PatientListColumns = struct {
	ID             string
	PatientName    string
	RegistrationNo string
	Category       string
	Gender         string
	Age            string
	ReferenceNo    string
	AppNo          string
	AppDate        string
	Clinic         string
	Address        string
	ServiceStatus  string
	Priority       string
	Comment        string
	NewAppNo       string
}{
	ID:             "Id",
	PatientName:    "PatientName",
	RegistrationNo: "RegistrationNo",
	Category:       "Category",
	Gender:         "Gender",
	Age:            "Age",
	ReferenceNo:    "ReferenceNo",
	AppNo:          "AppNo",
	AppDate:        "AppDate",
	Clinic:         "Clinic",
	Address:        "Address",
	ServiceStatus:  "ServiceStatus",
	Priority:       "Priority",
	Comment:        "Comment",
	NewAppNo:       "NewAppNo",
}

var PatientListTableColumns = struct {
	ID             string
	PatientName    string
	RegistrationNo string
	Category       string
	Gender         string
	Age            string
	ReferenceNo    string
	AppNo          string
	AppDate        string
	Clinic         string
	Address        string
	ServiceStatus  string
	Priority       string
	Comment        string
	NewAppNo       string
}{
	ID:             "PatientLists.Id",
	PatientName:    "PatientLists.PatientName",
	RegistrationNo: "PatientLists.RegistrationNo",
	Category:       "PatientLists.Category",
	Gender:         "PatientLists.Gender",
	Age:            "PatientLists.Age",
	ReferenceNo:    "PatientLists.ReferenceNo",
	AppNo:          "PatientLists.AppNo",
	AppDate:        "PatientLists.AppDate",
	Clinic:         "PatientLists.Clinic",
	Address:        "PatientLists.Address",
	ServiceStatus:  "PatientLists.ServiceStatus",
	Priority:       "PatientLists.Priority",
	Comment:        "PatientLists.Comment",
	NewAppNo:       "PatientLists.NewAppNo",
}

// Generated where

var PatientListWhere = struct {
	ID             whereHelperint
	PatientName    whereHelpernull_String
	RegistrationNo whereHelpernull_String
	Category       whereHelpernull_String
	Gender         whereHelpernull_String
	Age            whereHelpernull_String
	ReferenceNo    whereHelpernull_String
	AppNo          whereHelpernull_Int
	AppDate        whereHelpernull_Time
	Clinic         whereHelpernull_String
	Address        whereHelpernull_String
	ServiceStatus  whereHelpernull_String
	Priority       whereHelpernull_Int
	Comment        whereHelpernull_String
	NewAppNo       whereHelpernull_Int
}{
	ID:             whereHelperint{field: "[dbo].[PatientLists].[Id]"},
	PatientName:    whereHelpernull_String{field: "[dbo].[PatientLists].[PatientName]"},
	RegistrationNo: whereHelpernull_String{field: "[dbo].[PatientLists].[RegistrationNo]"},
	Category:       whereHelpernull_String{field: "[dbo].[PatientLists].[Category]"},
	Gender:         whereHelpernull_String{field: "[dbo].[PatientLists].[Gender]"},
	Age:            whereHelpernull_String{field: "[dbo].[PatientLists].[Age]"},
	ReferenceNo:    whereHelpernull_String{field: "[dbo].[PatientLists].[ReferenceNo]"},
	AppNo:          whereHelpernull_Int{field: "[dbo].[PatientLists].[AppNo]"},
	AppDate:        whereHelpernull_Time{field: "[dbo].[PatientLists].[AppDate]"},
	Clinic:         whereHelpernull_String{field: "[dbo].[PatientLists].[Clinic]"},
	Address:        whereHelpernull_String{field: "[dbo].[PatientLists].[Address]"},
	ServiceStatus:  whereHelpernull_String{field: "[dbo].[PatientLists].[ServiceStatus]"},
	Priority:       whereHelpernull_Int{field: "[dbo].[PatientLists].[Priority]"},
	Comment:        whereHelpernull_String{field: "[dbo].[PatientLists].[Comment]"},
	NewAppNo:       whereHelpernull_Int{field: "[dbo].[PatientLists].[NewAppNo]"},
}

// PatientListRels is where relationship names are stored.
var PatientListRels = struct {
}{}

// patientListR is where relationships are stored.
type patientListR struct {
}

// NewStruct creates a new relationship struct
func (*patientListR) NewStruct() *patientListR {
	return &patientListR{}
}

// patientListL is where Load methods for each relationship are stored.
type patientListL struct{}

var (
	patientListAllColumns            = []string{"Id", "PatientName", "RegistrationNo", "Category", "Gender", "Age", "ReferenceNo", "AppNo", "AppDate", "Clinic", "Address", "ServiceStatus", "Priority", "Comment", "NewAppNo"}
	patientListColumnsWithAuto       = []string{}
	patientListColumnsWithoutDefault = []string{"PatientName", "RegistrationNo", "Category", "Gender", "Age", "ReferenceNo", "AppNo", "AppDate", "Clinic", "Address", "ServiceStatus", "Priority", "Comment"}
	patientListColumnsWithDefault    = []string{"Id", "NewAppNo"}
	patientListPrimaryKeyColumns     = []string{"Id"}
)

type (
	// PatientListSlice is an alias for a slice of pointers to PatientList.
	// This should almost always be used instead of []PatientList.
	PatientListSlice []*PatientList
	// PatientListHook is the signature for custom PatientList hook methods
	PatientListHook func(context.Context, boil.ContextExecutor, *PatientList) error

	patientListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	patientListType                 = reflect.TypeOf(&PatientList{})
	patientListMapping              = queries.MakeStructMapping(patientListType)
	patientListPrimaryKeyMapping, _ = queries.BindMapping(patientListType, patientListMapping, patientListPrimaryKeyColumns)
	patientListInsertCacheMut       sync.RWMutex
	patientListInsertCache          = make(map[string]insertCache)
	patientListUpdateCacheMut       sync.RWMutex
	patientListUpdateCache          = make(map[string]updateCache)
	patientListUpsertCacheMut       sync.RWMutex
	patientListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var patientListBeforeInsertHooks []PatientListHook
var patientListBeforeUpdateHooks []PatientListHook
var patientListBeforeDeleteHooks []PatientListHook
var patientListBeforeUpsertHooks []PatientListHook

var patientListAfterInsertHooks []PatientListHook
var patientListAfterSelectHooks []PatientListHook
var patientListAfterUpdateHooks []PatientListHook
var patientListAfterDeleteHooks []PatientListHook
var patientListAfterUpsertHooks []PatientListHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PatientList) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientListBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PatientList) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientListBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PatientList) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientListBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PatientList) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientListBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PatientList) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientListAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PatientList) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientListAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PatientList) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientListAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PatientList) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientListAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PatientList) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientListAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPatientListHook registers your hook function for all future operations.
func AddPatientListHook(hookPoint boil.HookPoint, patientListHook PatientListHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		patientListBeforeInsertHooks = append(patientListBeforeInsertHooks, patientListHook)
	case boil.BeforeUpdateHook:
		patientListBeforeUpdateHooks = append(patientListBeforeUpdateHooks, patientListHook)
	case boil.BeforeDeleteHook:
		patientListBeforeDeleteHooks = append(patientListBeforeDeleteHooks, patientListHook)
	case boil.BeforeUpsertHook:
		patientListBeforeUpsertHooks = append(patientListBeforeUpsertHooks, patientListHook)
	case boil.AfterInsertHook:
		patientListAfterInsertHooks = append(patientListAfterInsertHooks, patientListHook)
	case boil.AfterSelectHook:
		patientListAfterSelectHooks = append(patientListAfterSelectHooks, patientListHook)
	case boil.AfterUpdateHook:
		patientListAfterUpdateHooks = append(patientListAfterUpdateHooks, patientListHook)
	case boil.AfterDeleteHook:
		patientListAfterDeleteHooks = append(patientListAfterDeleteHooks, patientListHook)
	case boil.AfterUpsertHook:
		patientListAfterUpsertHooks = append(patientListAfterUpsertHooks, patientListHook)
	}
}

// One returns a single patientList record from the query.
func (q patientListQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PatientList, error) {
	o := &PatientList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PatientLists")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PatientList records from the query.
func (q patientListQuery) All(ctx context.Context, exec boil.ContextExecutor) (PatientListSlice, error) {
	var o []*PatientList

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PatientList slice")
	}

	if len(patientListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PatientList records in the query.
func (q patientListQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PatientLists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q patientListQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PatientLists exists")
	}

	return count > 0, nil
}

// PatientLists retrieves all the records using an executor.
func PatientLists(mods ...qm.QueryMod) patientListQuery {
	mods = append(mods, qm.From("[dbo].[PatientLists]"))
	return patientListQuery{NewQuery(mods...)}
}

// FindPatientList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPatientList(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PatientList, error) {
	patientListObj := &PatientList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[PatientLists] where [Id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, patientListObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PatientLists")
	}

	if err = patientListObj.doAfterSelectHooks(ctx, exec); err != nil {
		return patientListObj, err
	}

	return patientListObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PatientList) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PatientLists provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patientListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	patientListInsertCacheMut.RLock()
	cache, cached := patientListInsertCache[key]
	patientListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			patientListAllColumns,
			patientListColumnsWithDefault,
			patientListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(patientListType, patientListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(patientListType, patientListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[PatientLists] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[PatientLists] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PatientLists")
	}

	if !cached {
		patientListInsertCacheMut.Lock()
		patientListInsertCache[key] = cache
		patientListInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PatientList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PatientList) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	patientListUpdateCacheMut.RLock()
	cache, cached := patientListUpdateCache[key]
	patientListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			patientListAllColumns,
			patientListPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, patientListColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PatientLists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[PatientLists] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, patientListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(patientListType, patientListMapping, append(wl, patientListPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PatientLists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PatientLists")
	}

	if !cached {
		patientListUpdateCacheMut.Lock()
		patientListUpdateCache[key] = cache
		patientListUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q patientListQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PatientLists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PatientLists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PatientListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[PatientLists] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, patientListPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in patientList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all patientList")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *PatientList) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PatientLists provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patientListColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	patientListUpsertCacheMut.RLock()
	cache, cached := patientListUpsertCache[key]
	patientListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			patientListAllColumns,
			patientListColumnsWithDefault,
			patientListColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, patientListColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(patientListPrimaryKeyColumns, v) && strmangle.ContainsAny(patientListColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert PatientLists, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, patientListColumnsWithAuto)
		ret = strmangle.SetMerge(ret, patientListColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			patientListAllColumns,
			patientListPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, patientListColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert PatientLists, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[PatientLists]", patientListPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(patientListPrimaryKeyColumns))
		copy(whitelist, patientListPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(patientListType, patientListMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(patientListType, patientListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert PatientLists")
	}

	if !cached {
		patientListUpsertCacheMut.Lock()
		patientListUpsertCache[key] = cache
		patientListUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PatientList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PatientList) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PatientList provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), patientListPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[PatientLists] WHERE [Id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PatientLists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PatientLists")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q patientListQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no patientListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PatientLists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PatientLists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PatientListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(patientListBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[PatientLists] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patientListPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patientList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PatientLists")
	}

	if len(patientListAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PatientList) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPatientList(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PatientListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PatientListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[PatientLists].* FROM [dbo].[PatientLists] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patientListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PatientListSlice")
	}

	*o = slice

	return nil
}

// PatientListExists checks if the PatientList row exists.
func PatientListExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[PatientLists] where [Id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PatientLists exists")
	}

	return exists, nil
}
