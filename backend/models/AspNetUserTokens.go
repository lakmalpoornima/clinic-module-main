// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AspNetUserToken is an object representing the database table.
type AspNetUserToken struct {
	UserId        string      `boil:"UserId" json:"UserId" toml:"UserId" yaml:"UserId"`
	LoginProvider string      `boil:"LoginProvider" json:"LoginProvider" toml:"LoginProvider" yaml:"LoginProvider"`
	Name          string      `boil:"Name" json:"Name" toml:"Name" yaml:"Name"`
	Value         null.String `boil:"Value" json:"Value,omitempty" toml:"Value" yaml:"Value,omitempty"`

	R *aspNetUserTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aspNetUserTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AspNetUserTokenColumns = struct {
	UserId        string
	LoginProvider string
	Name          string
	Value         string
}{
	UserId:        "UserId",
	LoginProvider: "LoginProvider",
	Name:          "Name",
	Value:         "Value",
}

var AspNetUserTokenTableColumns = struct {
	UserId        string
	LoginProvider string
	Name          string
	Value         string
}{
	UserId:        "AspNetUserTokens.UserId",
	LoginProvider: "AspNetUserTokens.LoginProvider",
	Name:          "AspNetUserTokens.Name",
	Value:         "AspNetUserTokens.Value",
}

// Generated where

var AspNetUserTokenWhere = struct {
	UserId        whereHelperstring
	LoginProvider whereHelperstring
	Name          whereHelperstring
	Value         whereHelpernull_String
}{
	UserId:        whereHelperstring{field: "[dbo].[AspNetUserTokens].[UserId]"},
	LoginProvider: whereHelperstring{field: "[dbo].[AspNetUserTokens].[LoginProvider]"},
	Name:          whereHelperstring{field: "[dbo].[AspNetUserTokens].[Name]"},
	Value:         whereHelpernull_String{field: "[dbo].[AspNetUserTokens].[Value]"},
}

// AspNetUserTokenRels is where relationship names are stored.
var AspNetUserTokenRels = struct {
	UserIdAspNetUsers978979 string
}{
	UserIdAspNetUsers978979: "UserIdAspNetUsers978979",
}

// aspNetUserTokenR is where relationships are stored.
type aspNetUserTokenR struct {
	UserIdAspNetUsers978979 *AspNetUsers978979 `boil:"UserIdAspNetUsers978979" json:"UserIdAspNetUsers978979" toml:"UserIdAspNetUsers978979" yaml:"UserIdAspNetUsers978979"`
}

// NewStruct creates a new relationship struct
func (*aspNetUserTokenR) NewStruct() *aspNetUserTokenR {
	return &aspNetUserTokenR{}
}

// aspNetUserTokenL is where Load methods for each relationship are stored.
type aspNetUserTokenL struct{}

var (
	aspNetUserTokenAllColumns            = []string{"UserId", "LoginProvider", "Name", "Value"}
	aspNetUserTokenColumnsWithAuto       = []string{}
	aspNetUserTokenColumnsWithoutDefault = []string{"UserId", "LoginProvider", "Name", "Value"}
	aspNetUserTokenColumnsWithDefault    = []string{}
	aspNetUserTokenPrimaryKeyColumns     = []string{"UserId", "LoginProvider", "Name"}
)

type (
	// AspNetUserTokenSlice is an alias for a slice of pointers to AspNetUserToken.
	// This should almost always be used instead of []AspNetUserToken.
	AspNetUserTokenSlice []*AspNetUserToken
	// AspNetUserTokenHook is the signature for custom AspNetUserToken hook methods
	AspNetUserTokenHook func(context.Context, boil.ContextExecutor, *AspNetUserToken) error

	aspNetUserTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aspNetUserTokenType                 = reflect.TypeOf(&AspNetUserToken{})
	aspNetUserTokenMapping              = queries.MakeStructMapping(aspNetUserTokenType)
	aspNetUserTokenPrimaryKeyMapping, _ = queries.BindMapping(aspNetUserTokenType, aspNetUserTokenMapping, aspNetUserTokenPrimaryKeyColumns)
	aspNetUserTokenInsertCacheMut       sync.RWMutex
	aspNetUserTokenInsertCache          = make(map[string]insertCache)
	aspNetUserTokenUpdateCacheMut       sync.RWMutex
	aspNetUserTokenUpdateCache          = make(map[string]updateCache)
	aspNetUserTokenUpsertCacheMut       sync.RWMutex
	aspNetUserTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aspNetUserTokenBeforeInsertHooks []AspNetUserTokenHook
var aspNetUserTokenBeforeUpdateHooks []AspNetUserTokenHook
var aspNetUserTokenBeforeDeleteHooks []AspNetUserTokenHook
var aspNetUserTokenBeforeUpsertHooks []AspNetUserTokenHook

var aspNetUserTokenAfterInsertHooks []AspNetUserTokenHook
var aspNetUserTokenAfterSelectHooks []AspNetUserTokenHook
var aspNetUserTokenAfterUpdateHooks []AspNetUserTokenHook
var aspNetUserTokenAfterDeleteHooks []AspNetUserTokenHook
var aspNetUserTokenAfterUpsertHooks []AspNetUserTokenHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AspNetUserToken) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserTokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AspNetUserToken) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserTokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AspNetUserToken) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserTokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AspNetUserToken) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserTokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AspNetUserToken) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserTokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AspNetUserToken) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserTokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AspNetUserToken) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserTokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AspNetUserToken) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserTokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AspNetUserToken) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserTokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAspNetUserTokenHook registers your hook function for all future operations.
func AddAspNetUserTokenHook(hookPoint boil.HookPoint, aspNetUserTokenHook AspNetUserTokenHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		aspNetUserTokenBeforeInsertHooks = append(aspNetUserTokenBeforeInsertHooks, aspNetUserTokenHook)
	case boil.BeforeUpdateHook:
		aspNetUserTokenBeforeUpdateHooks = append(aspNetUserTokenBeforeUpdateHooks, aspNetUserTokenHook)
	case boil.BeforeDeleteHook:
		aspNetUserTokenBeforeDeleteHooks = append(aspNetUserTokenBeforeDeleteHooks, aspNetUserTokenHook)
	case boil.BeforeUpsertHook:
		aspNetUserTokenBeforeUpsertHooks = append(aspNetUserTokenBeforeUpsertHooks, aspNetUserTokenHook)
	case boil.AfterInsertHook:
		aspNetUserTokenAfterInsertHooks = append(aspNetUserTokenAfterInsertHooks, aspNetUserTokenHook)
	case boil.AfterSelectHook:
		aspNetUserTokenAfterSelectHooks = append(aspNetUserTokenAfterSelectHooks, aspNetUserTokenHook)
	case boil.AfterUpdateHook:
		aspNetUserTokenAfterUpdateHooks = append(aspNetUserTokenAfterUpdateHooks, aspNetUserTokenHook)
	case boil.AfterDeleteHook:
		aspNetUserTokenAfterDeleteHooks = append(aspNetUserTokenAfterDeleteHooks, aspNetUserTokenHook)
	case boil.AfterUpsertHook:
		aspNetUserTokenAfterUpsertHooks = append(aspNetUserTokenAfterUpsertHooks, aspNetUserTokenHook)
	}
}

// One returns a single aspNetUserToken record from the query.
func (q aspNetUserTokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AspNetUserToken, error) {
	o := &AspNetUserToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AspNetUserTokens")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AspNetUserToken records from the query.
func (q aspNetUserTokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (AspNetUserTokenSlice, error) {
	var o []*AspNetUserToken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AspNetUserToken slice")
	}

	if len(aspNetUserTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AspNetUserToken records in the query.
func (q aspNetUserTokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AspNetUserTokens rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aspNetUserTokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AspNetUserTokens exists")
	}

	return count > 0, nil
}

// UserIdAspNetUsers978979 pointed to by the foreign key.
func (o *AspNetUserToken) UserIdAspNetUsers978979(mods ...qm.QueryMod) aspNetUsers978979Query {
	queryMods := []qm.QueryMod{
		qm.Where("[Id] = ?", o.UserId),
	}

	queryMods = append(queryMods, mods...)

	query := AspNetUsers978979s(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[AspNetUsers978979]")

	return query
}

// LoadUserIdAspNetUsers978979 allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aspNetUserTokenL) LoadUserIdAspNetUsers978979(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAspNetUserToken interface{}, mods queries.Applicator) error {
	var slice []*AspNetUserToken
	var object *AspNetUserToken

	if singular {
		object = maybeAspNetUserToken.(*AspNetUserToken)
	} else {
		slice = *maybeAspNetUserToken.(*[]*AspNetUserToken)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aspNetUserTokenR{}
		}
		args = append(args, object.UserId)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aspNetUserTokenR{}
			}

			for _, a := range args {
				if a == obj.UserId {
					continue Outer
				}
			}

			args = append(args, obj.UserId)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.AspNetUsers978979`),
		qm.WhereIn(`dbo.AspNetUsers978979.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AspNetUsers978979")
	}

	var resultSlice []*AspNetUsers978979
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AspNetUsers978979")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for AspNetUsers978979")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AspNetUsers978979")
	}

	if len(aspNetUserTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserIdAspNetUsers978979 = foreign
		if foreign.R == nil {
			foreign.R = &aspNetUsers978979R{}
		}
		foreign.R.UserIdAspNetUserTokens = append(foreign.R.UserIdAspNetUserTokens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserId == foreign.ID {
				local.R.UserIdAspNetUsers978979 = foreign
				if foreign.R == nil {
					foreign.R = &aspNetUsers978979R{}
				}
				foreign.R.UserIdAspNetUserTokens = append(foreign.R.UserIdAspNetUserTokens, local)
				break
			}
		}
	}

	return nil
}

// SetUserIdAspNetUsers978979 of the aspNetUserToken to the related item.
// Sets o.R.UserIdAspNetUsers978979 to related.
// Adds o to related.R.UserIdAspNetUserTokens.
func (o *AspNetUserToken) SetUserIdAspNetUsers978979(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AspNetUsers978979) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE [dbo].[AspNetUserTokens] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, []string{"UserId"}),
		strmangle.WhereClause("[", "]", 2, aspNetUserTokenPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserId, o.LoginProvider, o.Name}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserId = related.ID
	if o.R == nil {
		o.R = &aspNetUserTokenR{
			UserIdAspNetUsers978979: related,
		}
	} else {
		o.R.UserIdAspNetUsers978979 = related
	}

	if related.R == nil {
		related.R = &aspNetUsers978979R{
			UserIdAspNetUserTokens: AspNetUserTokenSlice{o},
		}
	} else {
		related.R.UserIdAspNetUserTokens = append(related.R.UserIdAspNetUserTokens, o)
	}

	return nil
}

// AspNetUserTokens retrieves all the records using an executor.
func AspNetUserTokens(mods ...qm.QueryMod) aspNetUserTokenQuery {
	mods = append(mods, qm.From("[dbo].[AspNetUserTokens]"))
	return aspNetUserTokenQuery{NewQuery(mods...)}
}

// FindAspNetUserToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAspNetUserToken(ctx context.Context, exec boil.ContextExecutor, userId string, loginProvider string, name string, selectCols ...string) (*AspNetUserToken, error) {
	aspNetUserTokenObj := &AspNetUserToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[AspNetUserTokens] where [UserId]=$1 AND [LoginProvider]=$2 AND [Name]=$3", sel,
	)

	q := queries.Raw(query, userId, loginProvider, name)

	err := q.Bind(ctx, exec, aspNetUserTokenObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AspNetUserTokens")
	}

	if err = aspNetUserTokenObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aspNetUserTokenObj, err
	}

	return aspNetUserTokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AspNetUserToken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetUserTokens provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetUserTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aspNetUserTokenInsertCacheMut.RLock()
	cache, cached := aspNetUserTokenInsertCache[key]
	aspNetUserTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aspNetUserTokenAllColumns,
			aspNetUserTokenColumnsWithDefault,
			aspNetUserTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aspNetUserTokenType, aspNetUserTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aspNetUserTokenType, aspNetUserTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[AspNetUserTokens] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[AspNetUserTokens] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AspNetUserTokens")
	}

	if !cached {
		aspNetUserTokenInsertCacheMut.Lock()
		aspNetUserTokenInsertCache[key] = cache
		aspNetUserTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AspNetUserToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AspNetUserToken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aspNetUserTokenUpdateCacheMut.RLock()
	cache, cached := aspNetUserTokenUpdateCache[key]
	aspNetUserTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aspNetUserTokenAllColumns,
			aspNetUserTokenPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, aspNetUserTokenColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AspNetUserTokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[AspNetUserTokens] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, aspNetUserTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aspNetUserTokenType, aspNetUserTokenMapping, append(wl, aspNetUserTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AspNetUserTokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AspNetUserTokens")
	}

	if !cached {
		aspNetUserTokenUpdateCacheMut.Lock()
		aspNetUserTokenUpdateCache[key] = cache
		aspNetUserTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aspNetUserTokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AspNetUserTokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AspNetUserTokens")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AspNetUserTokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUserTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[AspNetUserTokens] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aspNetUserTokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aspNetUserToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aspNetUserToken")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AspNetUserToken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetUserTokens provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetUserTokenColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aspNetUserTokenUpsertCacheMut.RLock()
	cache, cached := aspNetUserTokenUpsertCache[key]
	aspNetUserTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			aspNetUserTokenAllColumns,
			aspNetUserTokenColumnsWithDefault,
			aspNetUserTokenColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, aspNetUserTokenColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(aspNetUserTokenPrimaryKeyColumns, v) && strmangle.ContainsAny(aspNetUserTokenColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert AspNetUserTokens, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, aspNetUserTokenColumnsWithAuto)
		ret = strmangle.SetMerge(ret, aspNetUserTokenColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			aspNetUserTokenAllColumns,
			aspNetUserTokenPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, aspNetUserTokenColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert AspNetUserTokens, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[AspNetUserTokens]", aspNetUserTokenPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(aspNetUserTokenPrimaryKeyColumns))
		copy(whitelist, aspNetUserTokenPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(aspNetUserTokenType, aspNetUserTokenMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aspNetUserTokenType, aspNetUserTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert AspNetUserTokens")
	}

	if !cached {
		aspNetUserTokenUpsertCacheMut.Lock()
		aspNetUserTokenUpsertCache[key] = cache
		aspNetUserTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AspNetUserToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AspNetUserToken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AspNetUserToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aspNetUserTokenPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[AspNetUserTokens] WHERE [UserId]=$1 AND [LoginProvider]=$2 AND [Name]=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AspNetUserTokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AspNetUserTokens")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aspNetUserTokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aspNetUserTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AspNetUserTokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetUserTokens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AspNetUserTokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aspNetUserTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUserTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[AspNetUserTokens] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetUserTokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aspNetUserToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetUserTokens")
	}

	if len(aspNetUserTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AspNetUserToken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAspNetUserToken(ctx, exec, o.UserId, o.LoginProvider, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AspNetUserTokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AspNetUserTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUserTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[AspNetUserTokens].* FROM [dbo].[AspNetUserTokens] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetUserTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AspNetUserTokenSlice")
	}

	*o = slice

	return nil
}

// AspNetUserTokenExists checks if the AspNetUserToken row exists.
func AspNetUserTokenExists(ctx context.Context, exec boil.ContextExecutor, userId string, loginProvider string, name string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[AspNetUserTokens] where [UserId]=$1 AND [LoginProvider]=$2 AND [Name]=$3) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userId, loginProvider, name)
	}
	row := exec.QueryRowContext(ctx, sql, userId, loginProvider, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AspNetUserTokens exists")
	}

	return exists, nil
}
