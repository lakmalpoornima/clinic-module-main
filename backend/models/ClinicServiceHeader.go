// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClinicServiceHeader is an object representing the database table.
type ClinicServiceHeader struct {
	ID             int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	DocumentNo     string      `boil:"DocumentNo" json:"DocumentNo" toml:"DocumentNo" yaml:"DocumentNo"`
	CompanyCode    string      `boil:"CompanyCode" json:"CompanyCode" toml:"CompanyCode" yaml:"CompanyCode"`
	DtpDate        time.Time   `boil:"dtpDate" json:"dtpDate" toml:"dtpDate" yaml:"dtpDate"`
	RegistrationNo string      `boil:"RegistrationNo" json:"RegistrationNo" toml:"RegistrationNo" yaml:"RegistrationNo"`
	ReferenceNo    string      `boil:"ReferenceNo" json:"ReferenceNo" toml:"ReferenceNo" yaml:"ReferenceNo"`
	ClinicAppNo    int         `boil:"ClinicAppNo" json:"ClinicAppNo" toml:"ClinicAppNo" yaml:"ClinicAppNo"`
	Age            string      `boil:"Age" json:"Age" toml:"Age" yaml:"Age"`
	Comment        string      `boil:"Comment" json:"Comment" toml:"Comment" yaml:"Comment"`
	LogUser        string      `boil:"LogUser" json:"LogUser" toml:"LogUser" yaml:"LogUser"`
	Priority       null.String `boil:"Priority" json:"Priority,omitempty" toml:"Priority" yaml:"Priority,omitempty"`
	Clinic         null.String `boil:"Clinic" json:"Clinic,omitempty" toml:"Clinic" yaml:"Clinic,omitempty"`

	R *clinicServiceHeaderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clinicServiceHeaderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClinicServiceHeaderColumns = struct {
	ID             string
	DocumentNo     string
	CompanyCode    string
	DtpDate        string
	RegistrationNo string
	ReferenceNo    string
	ClinicAppNo    string
	Age            string
	Comment        string
	LogUser        string
	Priority       string
	Clinic         string
}{
	ID:             "ID",
	DocumentNo:     "DocumentNo",
	CompanyCode:    "CompanyCode",
	DtpDate:        "dtpDate",
	RegistrationNo: "RegistrationNo",
	ReferenceNo:    "ReferenceNo",
	ClinicAppNo:    "ClinicAppNo",
	Age:            "Age",
	Comment:        "Comment",
	LogUser:        "LogUser",
	Priority:       "Priority",
	Clinic:         "Clinic",
}

var ClinicServiceHeaderTableColumns = struct {
	ID             string
	DocumentNo     string
	CompanyCode    string
	DtpDate        string
	RegistrationNo string
	ReferenceNo    string
	ClinicAppNo    string
	Age            string
	Comment        string
	LogUser        string
	Priority       string
	Clinic         string
}{
	ID:             "ClinicServiceHeader.ID",
	DocumentNo:     "ClinicServiceHeader.DocumentNo",
	CompanyCode:    "ClinicServiceHeader.CompanyCode",
	DtpDate:        "ClinicServiceHeader.dtpDate",
	RegistrationNo: "ClinicServiceHeader.RegistrationNo",
	ReferenceNo:    "ClinicServiceHeader.ReferenceNo",
	ClinicAppNo:    "ClinicServiceHeader.ClinicAppNo",
	Age:            "ClinicServiceHeader.Age",
	Comment:        "ClinicServiceHeader.Comment",
	LogUser:        "ClinicServiceHeader.LogUser",
	Priority:       "ClinicServiceHeader.Priority",
	Clinic:         "ClinicServiceHeader.Clinic",
}

// Generated where

var ClinicServiceHeaderWhere = struct {
	ID             whereHelperint
	DocumentNo     whereHelperstring
	CompanyCode    whereHelperstring
	DtpDate        whereHelpertime_Time
	RegistrationNo whereHelperstring
	ReferenceNo    whereHelperstring
	ClinicAppNo    whereHelperint
	Age            whereHelperstring
	Comment        whereHelperstring
	LogUser        whereHelperstring
	Priority       whereHelpernull_String
	Clinic         whereHelpernull_String
}{
	ID:             whereHelperint{field: "[dbo].[ClinicServiceHeader].[ID]"},
	DocumentNo:     whereHelperstring{field: "[dbo].[ClinicServiceHeader].[DocumentNo]"},
	CompanyCode:    whereHelperstring{field: "[dbo].[ClinicServiceHeader].[CompanyCode]"},
	DtpDate:        whereHelpertime_Time{field: "[dbo].[ClinicServiceHeader].[dtpDate]"},
	RegistrationNo: whereHelperstring{field: "[dbo].[ClinicServiceHeader].[RegistrationNo]"},
	ReferenceNo:    whereHelperstring{field: "[dbo].[ClinicServiceHeader].[ReferenceNo]"},
	ClinicAppNo:    whereHelperint{field: "[dbo].[ClinicServiceHeader].[ClinicAppNo]"},
	Age:            whereHelperstring{field: "[dbo].[ClinicServiceHeader].[Age]"},
	Comment:        whereHelperstring{field: "[dbo].[ClinicServiceHeader].[Comment]"},
	LogUser:        whereHelperstring{field: "[dbo].[ClinicServiceHeader].[LogUser]"},
	Priority:       whereHelpernull_String{field: "[dbo].[ClinicServiceHeader].[Priority]"},
	Clinic:         whereHelpernull_String{field: "[dbo].[ClinicServiceHeader].[Clinic]"},
}

// ClinicServiceHeaderRels is where relationship names are stored.
var ClinicServiceHeaderRels = struct {
}{}

// clinicServiceHeaderR is where relationships are stored.
type clinicServiceHeaderR struct {
}

// NewStruct creates a new relationship struct
func (*clinicServiceHeaderR) NewStruct() *clinicServiceHeaderR {
	return &clinicServiceHeaderR{}
}

// clinicServiceHeaderL is where Load methods for each relationship are stored.
type clinicServiceHeaderL struct{}

var (
	clinicServiceHeaderAllColumns            = []string{"ID", "DocumentNo", "CompanyCode", "dtpDate", "RegistrationNo", "ReferenceNo", "ClinicAppNo", "Age", "Comment", "LogUser", "Priority", "Clinic"}
	clinicServiceHeaderColumnsWithAuto       = []string{}
	clinicServiceHeaderColumnsWithoutDefault = []string{"Clinic"}
	clinicServiceHeaderColumnsWithDefault    = []string{"ID", "DocumentNo", "CompanyCode", "dtpDate", "RegistrationNo", "ReferenceNo", "ClinicAppNo", "Age", "Comment", "LogUser", "Priority"}
	clinicServiceHeaderPrimaryKeyColumns     = []string{"ID"}
)

type (
	// ClinicServiceHeaderSlice is an alias for a slice of pointers to ClinicServiceHeader.
	// This should almost always be used instead of []ClinicServiceHeader.
	ClinicServiceHeaderSlice []*ClinicServiceHeader
	// ClinicServiceHeaderHook is the signature for custom ClinicServiceHeader hook methods
	ClinicServiceHeaderHook func(context.Context, boil.ContextExecutor, *ClinicServiceHeader) error

	clinicServiceHeaderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clinicServiceHeaderType                 = reflect.TypeOf(&ClinicServiceHeader{})
	clinicServiceHeaderMapping              = queries.MakeStructMapping(clinicServiceHeaderType)
	clinicServiceHeaderPrimaryKeyMapping, _ = queries.BindMapping(clinicServiceHeaderType, clinicServiceHeaderMapping, clinicServiceHeaderPrimaryKeyColumns)
	clinicServiceHeaderInsertCacheMut       sync.RWMutex
	clinicServiceHeaderInsertCache          = make(map[string]insertCache)
	clinicServiceHeaderUpdateCacheMut       sync.RWMutex
	clinicServiceHeaderUpdateCache          = make(map[string]updateCache)
	clinicServiceHeaderUpsertCacheMut       sync.RWMutex
	clinicServiceHeaderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clinicServiceHeaderBeforeInsertHooks []ClinicServiceHeaderHook
var clinicServiceHeaderBeforeUpdateHooks []ClinicServiceHeaderHook
var clinicServiceHeaderBeforeDeleteHooks []ClinicServiceHeaderHook
var clinicServiceHeaderBeforeUpsertHooks []ClinicServiceHeaderHook

var clinicServiceHeaderAfterInsertHooks []ClinicServiceHeaderHook
var clinicServiceHeaderAfterSelectHooks []ClinicServiceHeaderHook
var clinicServiceHeaderAfterUpdateHooks []ClinicServiceHeaderHook
var clinicServiceHeaderAfterDeleteHooks []ClinicServiceHeaderHook
var clinicServiceHeaderAfterUpsertHooks []ClinicServiceHeaderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClinicServiceHeader) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceHeaderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClinicServiceHeader) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceHeaderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClinicServiceHeader) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceHeaderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClinicServiceHeader) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceHeaderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClinicServiceHeader) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceHeaderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClinicServiceHeader) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceHeaderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClinicServiceHeader) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceHeaderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClinicServiceHeader) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceHeaderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClinicServiceHeader) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceHeaderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClinicServiceHeaderHook registers your hook function for all future operations.
func AddClinicServiceHeaderHook(hookPoint boil.HookPoint, clinicServiceHeaderHook ClinicServiceHeaderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clinicServiceHeaderBeforeInsertHooks = append(clinicServiceHeaderBeforeInsertHooks, clinicServiceHeaderHook)
	case boil.BeforeUpdateHook:
		clinicServiceHeaderBeforeUpdateHooks = append(clinicServiceHeaderBeforeUpdateHooks, clinicServiceHeaderHook)
	case boil.BeforeDeleteHook:
		clinicServiceHeaderBeforeDeleteHooks = append(clinicServiceHeaderBeforeDeleteHooks, clinicServiceHeaderHook)
	case boil.BeforeUpsertHook:
		clinicServiceHeaderBeforeUpsertHooks = append(clinicServiceHeaderBeforeUpsertHooks, clinicServiceHeaderHook)
	case boil.AfterInsertHook:
		clinicServiceHeaderAfterInsertHooks = append(clinicServiceHeaderAfterInsertHooks, clinicServiceHeaderHook)
	case boil.AfterSelectHook:
		clinicServiceHeaderAfterSelectHooks = append(clinicServiceHeaderAfterSelectHooks, clinicServiceHeaderHook)
	case boil.AfterUpdateHook:
		clinicServiceHeaderAfterUpdateHooks = append(clinicServiceHeaderAfterUpdateHooks, clinicServiceHeaderHook)
	case boil.AfterDeleteHook:
		clinicServiceHeaderAfterDeleteHooks = append(clinicServiceHeaderAfterDeleteHooks, clinicServiceHeaderHook)
	case boil.AfterUpsertHook:
		clinicServiceHeaderAfterUpsertHooks = append(clinicServiceHeaderAfterUpsertHooks, clinicServiceHeaderHook)
	}
}

// One returns a single clinicServiceHeader record from the query.
func (q clinicServiceHeaderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClinicServiceHeader, error) {
	o := &ClinicServiceHeader{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ClinicServiceHeader")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClinicServiceHeader records from the query.
func (q clinicServiceHeaderQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClinicServiceHeaderSlice, error) {
	var o []*ClinicServiceHeader

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ClinicServiceHeader slice")
	}

	if len(clinicServiceHeaderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClinicServiceHeader records in the query.
func (q clinicServiceHeaderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ClinicServiceHeader rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clinicServiceHeaderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ClinicServiceHeader exists")
	}

	return count > 0, nil
}

// ClinicServiceHeaders retrieves all the records using an executor.
func ClinicServiceHeaders(mods ...qm.QueryMod) clinicServiceHeaderQuery {
	mods = append(mods, qm.From("[dbo].[ClinicServiceHeader]"))
	return clinicServiceHeaderQuery{NewQuery(mods...)}
}

// FindClinicServiceHeader retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClinicServiceHeader(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ClinicServiceHeader, error) {
	clinicServiceHeaderObj := &ClinicServiceHeader{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ClinicServiceHeader] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, clinicServiceHeaderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ClinicServiceHeader")
	}

	if err = clinicServiceHeaderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return clinicServiceHeaderObj, err
	}

	return clinicServiceHeaderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClinicServiceHeader) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ClinicServiceHeader provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clinicServiceHeaderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clinicServiceHeaderInsertCacheMut.RLock()
	cache, cached := clinicServiceHeaderInsertCache[key]
	clinicServiceHeaderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clinicServiceHeaderAllColumns,
			clinicServiceHeaderColumnsWithDefault,
			clinicServiceHeaderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clinicServiceHeaderType, clinicServiceHeaderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clinicServiceHeaderType, clinicServiceHeaderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ClinicServiceHeader] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ClinicServiceHeader] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ClinicServiceHeader")
	}

	if !cached {
		clinicServiceHeaderInsertCacheMut.Lock()
		clinicServiceHeaderInsertCache[key] = cache
		clinicServiceHeaderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClinicServiceHeader.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClinicServiceHeader) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clinicServiceHeaderUpdateCacheMut.RLock()
	cache, cached := clinicServiceHeaderUpdateCache[key]
	clinicServiceHeaderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clinicServiceHeaderAllColumns,
			clinicServiceHeaderPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, clinicServiceHeaderColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ClinicServiceHeader, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ClinicServiceHeader] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, clinicServiceHeaderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clinicServiceHeaderType, clinicServiceHeaderMapping, append(wl, clinicServiceHeaderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ClinicServiceHeader row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ClinicServiceHeader")
	}

	if !cached {
		clinicServiceHeaderUpdateCacheMut.Lock()
		clinicServiceHeaderUpdateCache[key] = cache
		clinicServiceHeaderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clinicServiceHeaderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ClinicServiceHeader")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ClinicServiceHeader")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClinicServiceHeaderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clinicServiceHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ClinicServiceHeader] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, clinicServiceHeaderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in clinicServiceHeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all clinicServiceHeader")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ClinicServiceHeader) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ClinicServiceHeader provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clinicServiceHeaderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clinicServiceHeaderUpsertCacheMut.RLock()
	cache, cached := clinicServiceHeaderUpsertCache[key]
	clinicServiceHeaderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clinicServiceHeaderAllColumns,
			clinicServiceHeaderColumnsWithDefault,
			clinicServiceHeaderColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, clinicServiceHeaderColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(clinicServiceHeaderPrimaryKeyColumns, v) && strmangle.ContainsAny(clinicServiceHeaderColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert ClinicServiceHeader, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, clinicServiceHeaderColumnsWithAuto)
		ret = strmangle.SetMerge(ret, clinicServiceHeaderColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			clinicServiceHeaderAllColumns,
			clinicServiceHeaderPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, clinicServiceHeaderColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ClinicServiceHeader, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ClinicServiceHeader]", clinicServiceHeaderPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(clinicServiceHeaderPrimaryKeyColumns))
		copy(whitelist, clinicServiceHeaderPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(clinicServiceHeaderType, clinicServiceHeaderMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clinicServiceHeaderType, clinicServiceHeaderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ClinicServiceHeader")
	}

	if !cached {
		clinicServiceHeaderUpsertCacheMut.Lock()
		clinicServiceHeaderUpsertCache[key] = cache
		clinicServiceHeaderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClinicServiceHeader record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClinicServiceHeader) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClinicServiceHeader provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clinicServiceHeaderPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ClinicServiceHeader] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ClinicServiceHeader")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ClinicServiceHeader")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clinicServiceHeaderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clinicServiceHeaderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ClinicServiceHeader")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ClinicServiceHeader")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClinicServiceHeaderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clinicServiceHeaderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clinicServiceHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ClinicServiceHeader] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clinicServiceHeaderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from clinicServiceHeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ClinicServiceHeader")
	}

	if len(clinicServiceHeaderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClinicServiceHeader) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClinicServiceHeader(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClinicServiceHeaderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClinicServiceHeaderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clinicServiceHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ClinicServiceHeader].* FROM [dbo].[ClinicServiceHeader] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clinicServiceHeaderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClinicServiceHeaderSlice")
	}

	*o = slice

	return nil
}

// ClinicServiceHeaderExists checks if the ClinicServiceHeader row exists.
func ClinicServiceHeaderExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ClinicServiceHeader] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ClinicServiceHeader exists")
	}

	return exists, nil
}
