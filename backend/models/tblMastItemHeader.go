// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/volatiletech/sqlboiler/v4/types"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TblMastItemHeader is an object representing the database table.
type TblMastItemHeader struct {
	CItemCode              string        `boil:"cItemCode" json:"cItemCode" toml:"cItemCode" yaml:"cItemCode"`
	VcItemDescrition       string        `boil:"vcItemDescrition" json:"vcItemDescrition" toml:"vcItemDescrition" yaml:"vcItemDescrition"`
	CRepotingGroup         string        `boil:"cRepotingGroup" json:"cRepotingGroup" toml:"cRepotingGroup" yaml:"cRepotingGroup"`
	CGenericCode           string        `boil:"cGenericCode" json:"cGenericCode" toml:"cGenericCode" yaml:"cGenericCode"`
	CCategoryCode          string        `boil:"cCategoryCode" json:"cCategoryCode" toml:"cCategoryCode" yaml:"cCategoryCode"`
	CSubCategoryCode       string        `boil:"cSubCategoryCode" json:"cSubCategoryCode" toml:"cSubCategoryCode" yaml:"cSubCategoryCode"`
	CSubCategoryTemp       string        `boil:"cSubCategoryTemp" json:"cSubCategoryTemp" toml:"cSubCategoryTemp" yaml:"cSubCategoryTemp"`
	CUnitCode              string        `boil:"cUnitCode" json:"cUnitCode" toml:"cUnitCode" yaml:"cUnitCode"`
	CDepartmentCode        string        `boil:"cDepartmentCode" json:"cDepartmentCode" toml:"cDepartmentCode" yaml:"cDepartmentCode"`
	CSupplierCode          string        `boil:"cSupplierCode" json:"cSupplierCode" toml:"cSupplierCode" yaml:"cSupplierCode"`
	BEssentialItem         bool          `boil:"bEssentialItem" json:"bEssentialItem" toml:"bEssentialItem" yaml:"bEssentialItem"`
	BInPatientMarkup       bool          `boil:"bInPatientMarkup" json:"bInPatientMarkup" toml:"bInPatientMarkup" yaml:"bInPatientMarkup"`
	BBilabel               bool          `boil:"bBilabel" json:"bBilabel" toml:"bBilabel" yaml:"bBilabel"`
	CBilabel               string        `boil:"cBilabel" json:"cBilabel" toml:"cBilabel" yaml:"cBilabel"`
	NROL                   types.Decimal `boil:"nROL" json:"nROL" toml:"nROL" yaml:"nROL"`
	NROQ                   types.Decimal `boil:"nROQ" json:"nROQ" toml:"nROQ" yaml:"nROQ"`
	BMaintainBatch         bool          `boil:"bMaintainBatch" json:"bMaintainBatch" toml:"bMaintainBatch" yaml:"bMaintainBatch"`
	BMaintainInventory     bool          `boil:"bMaintainInventory" json:"bMaintainInventory" toml:"bMaintainInventory" yaml:"bMaintainInventory"`
	BDiscount              bool          `boil:"bDiscount" json:"bDiscount" toml:"bDiscount" yaml:"bDiscount"`
	BActive                bool          `boil:"bActive" json:"bActive" toml:"bActive" yaml:"bActive"`
	BDeleted               bool          `boil:"bDeleted" json:"bDeleted" toml:"bDeleted" yaml:"bDeleted"`
	VcCreateID             string        `boil:"vcCreateID" json:"vcCreateID" toml:"vcCreateID" yaml:"vcCreateID"`
	VcModifyID             string        `boil:"vcModifyID" json:"vcModifyID" toml:"vcModifyID" yaml:"vcModifyID"`
	DtpCreateDate          time.Time     `boil:"dtpCreateDate" json:"dtpCreateDate" toml:"dtpCreateDate" yaml:"dtpCreateDate"`
	DtpModifyDate          time.Time     `boil:"dtpModifyDate" json:"dtpModifyDate" toml:"dtpModifyDate" yaml:"dtpModifyDate"`
	VcRecallID             string        `boil:"vcRecallID" json:"vcRecallID" toml:"vcRecallID" yaml:"vcRecallID"`
	DtpRecallDate          time.Time     `boil:"dtpRecallDate" json:"dtpRecallDate" toml:"dtpRecallDate" yaml:"dtpRecallDate"`
	VcDeleteID             string        `boil:"vcDeleteID" json:"vcDeleteID" toml:"vcDeleteID" yaml:"vcDeleteID"`
	DtpDeleteDate          time.Time     `boil:"dtpDeleteDate" json:"dtpDeleteDate" toml:"dtpDeleteDate" yaml:"dtpDeleteDate"`
	CLocationCode          string        `boil:"cLocationCode" json:"cLocationCode" toml:"cLocationCode" yaml:"cLocationCode"`
	VcItemAlias            string        `boil:"vcItemAlias" json:"vcItemAlias" toml:"vcItemAlias" yaml:"vcItemAlias"`
	CBillingType           string        `boil:"cBillingType" json:"cBillingType" toml:"cBillingType" yaml:"cBillingType"`
	BConsultantFeeIncluded bool          `boil:"bConsultantFeeIncluded" json:"bConsultantFeeIncluded" toml:"bConsultantFeeIncluded" yaml:"bConsultantFeeIncluded"`
	CConsultantCode        string        `boil:"cConsultantCode" json:"cConsultantCode" toml:"cConsultantCode" yaml:"cConsultantCode"`
	NSupportingRate        types.Decimal `boil:"nSupportingRate" json:"nSupportingRate" toml:"nSupportingRate" yaml:"nSupportingRate"`
	BSupportingItem        bool          `boil:"bSupportingItem" json:"bSupportingItem" toml:"bSupportingItem" yaml:"bSupportingItem"`
	CSupportingCode        string        `boil:"cSupportingCode" json:"cSupportingCode" toml:"cSupportingCode" yaml:"cSupportingCode"`
	BProfertionalFeeItem   bool          `boil:"bProfertionalFeeItem" json:"bProfertionalFeeItem" toml:"bProfertionalFeeItem" yaml:"bProfertionalFeeItem"`
	BPriceCanEdit          bool          `boil:"bPriceCanEdit" json:"bPriceCanEdit" toml:"bPriceCanEdit" yaml:"bPriceCanEdit"`
	NSortingOrder          int           `boil:"nSortingOrder" json:"nSortingOrder" toml:"nSortingOrder" yaml:"nSortingOrder"`
	BEntForMSBE            bool          `boil:"bEntForMSBE" json:"bEntForMSBE" toml:"bEntForMSBE" yaml:"bEntForMSBE"`
	BChargeCompulsory      bool          `boil:"bChargeCompulsory" json:"bChargeCompulsory" toml:"bChargeCompulsory" yaml:"bChargeCompulsory"`
	COTCategory            string        `boil:"cOTCategory" json:"cOTCategory" toml:"cOTCategory" yaml:"cOTCategory"`
	BIPBillable            bool          `boil:"bIPBillable" json:"bIPBillable" toml:"bIPBillable" yaml:"bIPBillable"`
	BServiceConfirmable    bool          `boil:"bServiceConfirmable" json:"bServiceConfirmable" toml:"bServiceConfirmable" yaml:"bServiceConfirmable"`
	BGtoPDiffItem          bool          `boil:"bGtoPDiffItem" json:"bGtoPDiffItem" toml:"bGtoPDiffItem" yaml:"bGtoPDiffItem"`
	BOPDVAT                bool          `boil:"bOPDVAT" json:"bOPDVAT" toml:"bOPDVAT" yaml:"bOPDVAT"`
	BIPDVAT                bool          `boil:"bIPDVAT" json:"bIPDVAT" toml:"bIPDVAT" yaml:"bIPDVAT"`
	BDangerous             bool          `boil:"bDangerous" json:"bDangerous" toml:"bDangerous" yaml:"bDangerous"`
	BItemEntryAllow        bool          `boil:"bItemEntryAllow" json:"bItemEntryAllow" toml:"bItemEntryAllow" yaml:"bItemEntryAllow"`

	R *tblMastItemHeaderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tblMastItemHeaderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TblMastItemHeaderColumns = struct {
	CItemCode              string
	VcItemDescrition       string
	CRepotingGroup         string
	CGenericCode           string
	CCategoryCode          string
	CSubCategoryCode       string
	CSubCategoryTemp       string
	CUnitCode              string
	CDepartmentCode        string
	CSupplierCode          string
	BEssentialItem         string
	BInPatientMarkup       string
	BBilabel               string
	CBilabel               string
	NROL                   string
	NROQ                   string
	BMaintainBatch         string
	BMaintainInventory     string
	BDiscount              string
	BActive                string
	BDeleted               string
	VcCreateID             string
	VcModifyID             string
	DtpCreateDate          string
	DtpModifyDate          string
	VcRecallID             string
	DtpRecallDate          string
	VcDeleteID             string
	DtpDeleteDate          string
	CLocationCode          string
	VcItemAlias            string
	CBillingType           string
	BConsultantFeeIncluded string
	CConsultantCode        string
	NSupportingRate        string
	BSupportingItem        string
	CSupportingCode        string
	BProfertionalFeeItem   string
	BPriceCanEdit          string
	NSortingOrder          string
	BEntForMSBE            string
	BChargeCompulsory      string
	COTCategory            string
	BIPBillable            string
	BServiceConfirmable    string
	BGtoPDiffItem          string
	BOPDVAT                string
	BIPDVAT                string
	BDangerous             string
	BItemEntryAllow        string
}{
	CItemCode:              "cItemCode",
	VcItemDescrition:       "vcItemDescrition",
	CRepotingGroup:         "cRepotingGroup",
	CGenericCode:           "cGenericCode",
	CCategoryCode:          "cCategoryCode",
	CSubCategoryCode:       "cSubCategoryCode",
	CSubCategoryTemp:       "cSubCategoryTemp",
	CUnitCode:              "cUnitCode",
	CDepartmentCode:        "cDepartmentCode",
	CSupplierCode:          "cSupplierCode",
	BEssentialItem:         "bEssentialItem",
	BInPatientMarkup:       "bInPatientMarkup",
	BBilabel:               "bBilabel",
	CBilabel:               "cBilabel",
	NROL:                   "nROL",
	NROQ:                   "nROQ",
	BMaintainBatch:         "bMaintainBatch",
	BMaintainInventory:     "bMaintainInventory",
	BDiscount:              "bDiscount",
	BActive:                "bActive",
	BDeleted:               "bDeleted",
	VcCreateID:             "vcCreateID",
	VcModifyID:             "vcModifyID",
	DtpCreateDate:          "dtpCreateDate",
	DtpModifyDate:          "dtpModifyDate",
	VcRecallID:             "vcRecallID",
	DtpRecallDate:          "dtpRecallDate",
	VcDeleteID:             "vcDeleteID",
	DtpDeleteDate:          "dtpDeleteDate",
	CLocationCode:          "cLocationCode",
	VcItemAlias:            "vcItemAlias",
	CBillingType:           "cBillingType",
	BConsultantFeeIncluded: "bConsultantFeeIncluded",
	CConsultantCode:        "cConsultantCode",
	NSupportingRate:        "nSupportingRate",
	BSupportingItem:        "bSupportingItem",
	CSupportingCode:        "cSupportingCode",
	BProfertionalFeeItem:   "bProfertionalFeeItem",
	BPriceCanEdit:          "bPriceCanEdit",
	NSortingOrder:          "nSortingOrder",
	BEntForMSBE:            "bEntForMSBE",
	BChargeCompulsory:      "bChargeCompulsory",
	COTCategory:            "cOTCategory",
	BIPBillable:            "bIPBillable",
	BServiceConfirmable:    "bServiceConfirmable",
	BGtoPDiffItem:          "bGtoPDiffItem",
	BOPDVAT:                "bOPDVAT",
	BIPDVAT:                "bIPDVAT",
	BDangerous:             "bDangerous",
	BItemEntryAllow:        "bItemEntryAllow",
}

var TblMastItemHeaderTableColumns = struct {
	CItemCode              string
	VcItemDescrition       string
	CRepotingGroup         string
	CGenericCode           string
	CCategoryCode          string
	CSubCategoryCode       string
	CSubCategoryTemp       string
	CUnitCode              string
	CDepartmentCode        string
	CSupplierCode          string
	BEssentialItem         string
	BInPatientMarkup       string
	BBilabel               string
	CBilabel               string
	NROL                   string
	NROQ                   string
	BMaintainBatch         string
	BMaintainInventory     string
	BDiscount              string
	BActive                string
	BDeleted               string
	VcCreateID             string
	VcModifyID             string
	DtpCreateDate          string
	DtpModifyDate          string
	VcRecallID             string
	DtpRecallDate          string
	VcDeleteID             string
	DtpDeleteDate          string
	CLocationCode          string
	VcItemAlias            string
	CBillingType           string
	BConsultantFeeIncluded string
	CConsultantCode        string
	NSupportingRate        string
	BSupportingItem        string
	CSupportingCode        string
	BProfertionalFeeItem   string
	BPriceCanEdit          string
	NSortingOrder          string
	BEntForMSBE            string
	BChargeCompulsory      string
	COTCategory            string
	BIPBillable            string
	BServiceConfirmable    string
	BGtoPDiffItem          string
	BOPDVAT                string
	BIPDVAT                string
	BDangerous             string
	BItemEntryAllow        string
}{
	CItemCode:              "tblMastItemHeader.cItemCode",
	VcItemDescrition:       "tblMastItemHeader.vcItemDescrition",
	CRepotingGroup:         "tblMastItemHeader.cRepotingGroup",
	CGenericCode:           "tblMastItemHeader.cGenericCode",
	CCategoryCode:          "tblMastItemHeader.cCategoryCode",
	CSubCategoryCode:       "tblMastItemHeader.cSubCategoryCode",
	CSubCategoryTemp:       "tblMastItemHeader.cSubCategoryTemp",
	CUnitCode:              "tblMastItemHeader.cUnitCode",
	CDepartmentCode:        "tblMastItemHeader.cDepartmentCode",
	CSupplierCode:          "tblMastItemHeader.cSupplierCode",
	BEssentialItem:         "tblMastItemHeader.bEssentialItem",
	BInPatientMarkup:       "tblMastItemHeader.bInPatientMarkup",
	BBilabel:               "tblMastItemHeader.bBilabel",
	CBilabel:               "tblMastItemHeader.cBilabel",
	NROL:                   "tblMastItemHeader.nROL",
	NROQ:                   "tblMastItemHeader.nROQ",
	BMaintainBatch:         "tblMastItemHeader.bMaintainBatch",
	BMaintainInventory:     "tblMastItemHeader.bMaintainInventory",
	BDiscount:              "tblMastItemHeader.bDiscount",
	BActive:                "tblMastItemHeader.bActive",
	BDeleted:               "tblMastItemHeader.bDeleted",
	VcCreateID:             "tblMastItemHeader.vcCreateID",
	VcModifyID:             "tblMastItemHeader.vcModifyID",
	DtpCreateDate:          "tblMastItemHeader.dtpCreateDate",
	DtpModifyDate:          "tblMastItemHeader.dtpModifyDate",
	VcRecallID:             "tblMastItemHeader.vcRecallID",
	DtpRecallDate:          "tblMastItemHeader.dtpRecallDate",
	VcDeleteID:             "tblMastItemHeader.vcDeleteID",
	DtpDeleteDate:          "tblMastItemHeader.dtpDeleteDate",
	CLocationCode:          "tblMastItemHeader.cLocationCode",
	VcItemAlias:            "tblMastItemHeader.vcItemAlias",
	CBillingType:           "tblMastItemHeader.cBillingType",
	BConsultantFeeIncluded: "tblMastItemHeader.bConsultantFeeIncluded",
	CConsultantCode:        "tblMastItemHeader.cConsultantCode",
	NSupportingRate:        "tblMastItemHeader.nSupportingRate",
	BSupportingItem:        "tblMastItemHeader.bSupportingItem",
	CSupportingCode:        "tblMastItemHeader.cSupportingCode",
	BProfertionalFeeItem:   "tblMastItemHeader.bProfertionalFeeItem",
	BPriceCanEdit:          "tblMastItemHeader.bPriceCanEdit",
	NSortingOrder:          "tblMastItemHeader.nSortingOrder",
	BEntForMSBE:            "tblMastItemHeader.bEntForMSBE",
	BChargeCompulsory:      "tblMastItemHeader.bChargeCompulsory",
	COTCategory:            "tblMastItemHeader.cOTCategory",
	BIPBillable:            "tblMastItemHeader.bIPBillable",
	BServiceConfirmable:    "tblMastItemHeader.bServiceConfirmable",
	BGtoPDiffItem:          "tblMastItemHeader.bGtoPDiffItem",
	BOPDVAT:                "tblMastItemHeader.bOPDVAT",
	BIPDVAT:                "tblMastItemHeader.bIPDVAT",
	BDangerous:             "tblMastItemHeader.bDangerous",
	BItemEntryAllow:        "tblMastItemHeader.bItemEntryAllow",
}

// Generated where

var TblMastItemHeaderWhere = struct {
	CItemCode              whereHelperstring
	VcItemDescrition       whereHelperstring
	CRepotingGroup         whereHelperstring
	CGenericCode           whereHelperstring
	CCategoryCode          whereHelperstring
	CSubCategoryCode       whereHelperstring
	CSubCategoryTemp       whereHelperstring
	CUnitCode              whereHelperstring
	CDepartmentCode        whereHelperstring
	CSupplierCode          whereHelperstring
	BEssentialItem         whereHelperbool
	BInPatientMarkup       whereHelperbool
	BBilabel               whereHelperbool
	CBilabel               whereHelperstring
	NROL                   whereHelpertypes_Decimal
	NROQ                   whereHelpertypes_Decimal
	BMaintainBatch         whereHelperbool
	BMaintainInventory     whereHelperbool
	BDiscount              whereHelperbool
	BActive                whereHelperbool
	BDeleted               whereHelperbool
	VcCreateID             whereHelperstring
	VcModifyID             whereHelperstring
	DtpCreateDate          whereHelpertime_Time
	DtpModifyDate          whereHelpertime_Time
	VcRecallID             whereHelperstring
	DtpRecallDate          whereHelpertime_Time
	VcDeleteID             whereHelperstring
	DtpDeleteDate          whereHelpertime_Time
	CLocationCode          whereHelperstring
	VcItemAlias            whereHelperstring
	CBillingType           whereHelperstring
	BConsultantFeeIncluded whereHelperbool
	CConsultantCode        whereHelperstring
	NSupportingRate        whereHelpertypes_Decimal
	BSupportingItem        whereHelperbool
	CSupportingCode        whereHelperstring
	BProfertionalFeeItem   whereHelperbool
	BPriceCanEdit          whereHelperbool
	NSortingOrder          whereHelperint
	BEntForMSBE            whereHelperbool
	BChargeCompulsory      whereHelperbool
	COTCategory            whereHelperstring
	BIPBillable            whereHelperbool
	BServiceConfirmable    whereHelperbool
	BGtoPDiffItem          whereHelperbool
	BOPDVAT                whereHelperbool
	BIPDVAT                whereHelperbool
	BDangerous             whereHelperbool
	BItemEntryAllow        whereHelperbool
}{
	CItemCode:              whereHelperstring{field: "[dbo].[tblMastItemHeader].[cItemCode]"},
	VcItemDescrition:       whereHelperstring{field: "[dbo].[tblMastItemHeader].[vcItemDescrition]"},
	CRepotingGroup:         whereHelperstring{field: "[dbo].[tblMastItemHeader].[cRepotingGroup]"},
	CGenericCode:           whereHelperstring{field: "[dbo].[tblMastItemHeader].[cGenericCode]"},
	CCategoryCode:          whereHelperstring{field: "[dbo].[tblMastItemHeader].[cCategoryCode]"},
	CSubCategoryCode:       whereHelperstring{field: "[dbo].[tblMastItemHeader].[cSubCategoryCode]"},
	CSubCategoryTemp:       whereHelperstring{field: "[dbo].[tblMastItemHeader].[cSubCategoryTemp]"},
	CUnitCode:              whereHelperstring{field: "[dbo].[tblMastItemHeader].[cUnitCode]"},
	CDepartmentCode:        whereHelperstring{field: "[dbo].[tblMastItemHeader].[cDepartmentCode]"},
	CSupplierCode:          whereHelperstring{field: "[dbo].[tblMastItemHeader].[cSupplierCode]"},
	BEssentialItem:         whereHelperbool{field: "[dbo].[tblMastItemHeader].[bEssentialItem]"},
	BInPatientMarkup:       whereHelperbool{field: "[dbo].[tblMastItemHeader].[bInPatientMarkup]"},
	BBilabel:               whereHelperbool{field: "[dbo].[tblMastItemHeader].[bBilabel]"},
	CBilabel:               whereHelperstring{field: "[dbo].[tblMastItemHeader].[cBilabel]"},
	NROL:                   whereHelpertypes_Decimal{field: "[dbo].[tblMastItemHeader].[nROL]"},
	NROQ:                   whereHelpertypes_Decimal{field: "[dbo].[tblMastItemHeader].[nROQ]"},
	BMaintainBatch:         whereHelperbool{field: "[dbo].[tblMastItemHeader].[bMaintainBatch]"},
	BMaintainInventory:     whereHelperbool{field: "[dbo].[tblMastItemHeader].[bMaintainInventory]"},
	BDiscount:              whereHelperbool{field: "[dbo].[tblMastItemHeader].[bDiscount]"},
	BActive:                whereHelperbool{field: "[dbo].[tblMastItemHeader].[bActive]"},
	BDeleted:               whereHelperbool{field: "[dbo].[tblMastItemHeader].[bDeleted]"},
	VcCreateID:             whereHelperstring{field: "[dbo].[tblMastItemHeader].[vcCreateID]"},
	VcModifyID:             whereHelperstring{field: "[dbo].[tblMastItemHeader].[vcModifyID]"},
	DtpCreateDate:          whereHelpertime_Time{field: "[dbo].[tblMastItemHeader].[dtpCreateDate]"},
	DtpModifyDate:          whereHelpertime_Time{field: "[dbo].[tblMastItemHeader].[dtpModifyDate]"},
	VcRecallID:             whereHelperstring{field: "[dbo].[tblMastItemHeader].[vcRecallID]"},
	DtpRecallDate:          whereHelpertime_Time{field: "[dbo].[tblMastItemHeader].[dtpRecallDate]"},
	VcDeleteID:             whereHelperstring{field: "[dbo].[tblMastItemHeader].[vcDeleteID]"},
	DtpDeleteDate:          whereHelpertime_Time{field: "[dbo].[tblMastItemHeader].[dtpDeleteDate]"},
	CLocationCode:          whereHelperstring{field: "[dbo].[tblMastItemHeader].[cLocationCode]"},
	VcItemAlias:            whereHelperstring{field: "[dbo].[tblMastItemHeader].[vcItemAlias]"},
	CBillingType:           whereHelperstring{field: "[dbo].[tblMastItemHeader].[cBillingType]"},
	BConsultantFeeIncluded: whereHelperbool{field: "[dbo].[tblMastItemHeader].[bConsultantFeeIncluded]"},
	CConsultantCode:        whereHelperstring{field: "[dbo].[tblMastItemHeader].[cConsultantCode]"},
	NSupportingRate:        whereHelpertypes_Decimal{field: "[dbo].[tblMastItemHeader].[nSupportingRate]"},
	BSupportingItem:        whereHelperbool{field: "[dbo].[tblMastItemHeader].[bSupportingItem]"},
	CSupportingCode:        whereHelperstring{field: "[dbo].[tblMastItemHeader].[cSupportingCode]"},
	BProfertionalFeeItem:   whereHelperbool{field: "[dbo].[tblMastItemHeader].[bProfertionalFeeItem]"},
	BPriceCanEdit:          whereHelperbool{field: "[dbo].[tblMastItemHeader].[bPriceCanEdit]"},
	NSortingOrder:          whereHelperint{field: "[dbo].[tblMastItemHeader].[nSortingOrder]"},
	BEntForMSBE:            whereHelperbool{field: "[dbo].[tblMastItemHeader].[bEntForMSBE]"},
	BChargeCompulsory:      whereHelperbool{field: "[dbo].[tblMastItemHeader].[bChargeCompulsory]"},
	COTCategory:            whereHelperstring{field: "[dbo].[tblMastItemHeader].[cOTCategory]"},
	BIPBillable:            whereHelperbool{field: "[dbo].[tblMastItemHeader].[bIPBillable]"},
	BServiceConfirmable:    whereHelperbool{field: "[dbo].[tblMastItemHeader].[bServiceConfirmable]"},
	BGtoPDiffItem:          whereHelperbool{field: "[dbo].[tblMastItemHeader].[bGtoPDiffItem]"},
	BOPDVAT:                whereHelperbool{field: "[dbo].[tblMastItemHeader].[bOPDVAT]"},
	BIPDVAT:                whereHelperbool{field: "[dbo].[tblMastItemHeader].[bIPDVAT]"},
	BDangerous:             whereHelperbool{field: "[dbo].[tblMastItemHeader].[bDangerous]"},
	BItemEntryAllow:        whereHelperbool{field: "[dbo].[tblMastItemHeader].[bItemEntryAllow]"},
}

// TblMastItemHeaderRels is where relationship names are stored.
var TblMastItemHeaderRels = struct {
}{}

// tblMastItemHeaderR is where relationships are stored.
type tblMastItemHeaderR struct {
}

// NewStruct creates a new relationship struct
func (*tblMastItemHeaderR) NewStruct() *tblMastItemHeaderR {
	return &tblMastItemHeaderR{}
}

// tblMastItemHeaderL is where Load methods for each relationship are stored.
type tblMastItemHeaderL struct{}

var (
	tblMastItemHeaderAllColumns            = []string{"cItemCode", "vcItemDescrition", "cRepotingGroup", "cGenericCode", "cCategoryCode", "cSubCategoryCode", "cSubCategoryTemp", "cUnitCode", "cDepartmentCode", "cSupplierCode", "bEssentialItem", "bInPatientMarkup", "bBilabel", "cBilabel", "nROL", "nROQ", "bMaintainBatch", "bMaintainInventory", "bDiscount", "bActive", "bDeleted", "vcCreateID", "vcModifyID", "dtpCreateDate", "dtpModifyDate", "vcRecallID", "dtpRecallDate", "vcDeleteID", "dtpDeleteDate", "cLocationCode", "vcItemAlias", "cBillingType", "bConsultantFeeIncluded", "cConsultantCode", "nSupportingRate", "bSupportingItem", "cSupportingCode", "bProfertionalFeeItem", "bPriceCanEdit", "nSortingOrder", "bEntForMSBE", "bChargeCompulsory", "cOTCategory", "bIPBillable", "bServiceConfirmable", "bGtoPDiffItem", "bOPDVAT", "bIPDVAT", "bDangerous", "bItemEntryAllow"}
	tblMastItemHeaderColumnsWithAuto       = []string{}
	tblMastItemHeaderColumnsWithoutDefault = []string{"cItemCode", "vcItemDescrition", "cRepotingGroup", "cGenericCode", "cCategoryCode", "cSubCategoryCode", "cSubCategoryTemp", "cUnitCode", "cDepartmentCode", "cSupplierCode", "bEssentialItem", "bInPatientMarkup", "bBilabel", "cBilabel", "nROL", "nROQ", "bMaintainBatch", "bMaintainInventory", "bDiscount", "bActive", "bDeleted", "vcCreateID", "vcModifyID", "dtpCreateDate", "dtpModifyDate", "vcRecallID", "dtpRecallDate", "vcDeleteID", "dtpDeleteDate", "cLocationCode", "vcItemAlias", "cBillingType", "bConsultantFeeIncluded", "cConsultantCode", "nSupportingRate", "bSupportingItem", "cSupportingCode", "bProfertionalFeeItem", "bPriceCanEdit", "nSortingOrder", "bEntForMSBE", "bChargeCompulsory", "cOTCategory", "bIPBillable", "bServiceConfirmable", "bGtoPDiffItem", "bOPDVAT", "bIPDVAT", "bDangerous", "bItemEntryAllow"}
	tblMastItemHeaderColumnsWithDefault    = []string{}
	tblMastItemHeaderPrimaryKeyColumns     = []string{"cItemCode"}
)

type (
	// TblMastItemHeaderSlice is an alias for a slice of pointers to TblMastItemHeader.
	// This should almost always be used instead of []TblMastItemHeader.
	TblMastItemHeaderSlice []*TblMastItemHeader
	// TblMastItemHeaderHook is the signature for custom TblMastItemHeader hook methods
	TblMastItemHeaderHook func(context.Context, boil.ContextExecutor, *TblMastItemHeader) error

	tblMastItemHeaderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tblMastItemHeaderType                 = reflect.TypeOf(&TblMastItemHeader{})
	tblMastItemHeaderMapping              = queries.MakeStructMapping(tblMastItemHeaderType)
	tblMastItemHeaderPrimaryKeyMapping, _ = queries.BindMapping(tblMastItemHeaderType, tblMastItemHeaderMapping, tblMastItemHeaderPrimaryKeyColumns)
	tblMastItemHeaderInsertCacheMut       sync.RWMutex
	tblMastItemHeaderInsertCache          = make(map[string]insertCache)
	tblMastItemHeaderUpdateCacheMut       sync.RWMutex
	tblMastItemHeaderUpdateCache          = make(map[string]updateCache)
	tblMastItemHeaderUpsertCacheMut       sync.RWMutex
	tblMastItemHeaderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tblMastItemHeaderBeforeInsertHooks []TblMastItemHeaderHook
var tblMastItemHeaderBeforeUpdateHooks []TblMastItemHeaderHook
var tblMastItemHeaderBeforeDeleteHooks []TblMastItemHeaderHook
var tblMastItemHeaderBeforeUpsertHooks []TblMastItemHeaderHook

var tblMastItemHeaderAfterInsertHooks []TblMastItemHeaderHook
var tblMastItemHeaderAfterSelectHooks []TblMastItemHeaderHook
var tblMastItemHeaderAfterUpdateHooks []TblMastItemHeaderHook
var tblMastItemHeaderAfterDeleteHooks []TblMastItemHeaderHook
var tblMastItemHeaderAfterUpsertHooks []TblMastItemHeaderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TblMastItemHeader) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblMastItemHeaderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TblMastItemHeader) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblMastItemHeaderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TblMastItemHeader) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblMastItemHeaderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TblMastItemHeader) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblMastItemHeaderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TblMastItemHeader) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblMastItemHeaderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TblMastItemHeader) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblMastItemHeaderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TblMastItemHeader) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblMastItemHeaderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TblMastItemHeader) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblMastItemHeaderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TblMastItemHeader) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tblMastItemHeaderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTblMastItemHeaderHook registers your hook function for all future operations.
func AddTblMastItemHeaderHook(hookPoint boil.HookPoint, tblMastItemHeaderHook TblMastItemHeaderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tblMastItemHeaderBeforeInsertHooks = append(tblMastItemHeaderBeforeInsertHooks, tblMastItemHeaderHook)
	case boil.BeforeUpdateHook:
		tblMastItemHeaderBeforeUpdateHooks = append(tblMastItemHeaderBeforeUpdateHooks, tblMastItemHeaderHook)
	case boil.BeforeDeleteHook:
		tblMastItemHeaderBeforeDeleteHooks = append(tblMastItemHeaderBeforeDeleteHooks, tblMastItemHeaderHook)
	case boil.BeforeUpsertHook:
		tblMastItemHeaderBeforeUpsertHooks = append(tblMastItemHeaderBeforeUpsertHooks, tblMastItemHeaderHook)
	case boil.AfterInsertHook:
		tblMastItemHeaderAfterInsertHooks = append(tblMastItemHeaderAfterInsertHooks, tblMastItemHeaderHook)
	case boil.AfterSelectHook:
		tblMastItemHeaderAfterSelectHooks = append(tblMastItemHeaderAfterSelectHooks, tblMastItemHeaderHook)
	case boil.AfterUpdateHook:
		tblMastItemHeaderAfterUpdateHooks = append(tblMastItemHeaderAfterUpdateHooks, tblMastItemHeaderHook)
	case boil.AfterDeleteHook:
		tblMastItemHeaderAfterDeleteHooks = append(tblMastItemHeaderAfterDeleteHooks, tblMastItemHeaderHook)
	case boil.AfterUpsertHook:
		tblMastItemHeaderAfterUpsertHooks = append(tblMastItemHeaderAfterUpsertHooks, tblMastItemHeaderHook)
	}
}

// One returns a single tblMastItemHeader record from the query.
func (q tblMastItemHeaderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TblMastItemHeader, error) {
	o := &TblMastItemHeader{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tblMastItemHeader")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TblMastItemHeader records from the query.
func (q tblMastItemHeaderQuery) All(ctx context.Context, exec boil.ContextExecutor) (TblMastItemHeaderSlice, error) {
	var o []*TblMastItemHeader

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TblMastItemHeader slice")
	}

	if len(tblMastItemHeaderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TblMastItemHeader records in the query.
func (q tblMastItemHeaderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tblMastItemHeader rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tblMastItemHeaderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tblMastItemHeader exists")
	}

	return count > 0, nil
}

// TblMastItemHeaders retrieves all the records using an executor.
func TblMastItemHeaders(mods ...qm.QueryMod) tblMastItemHeaderQuery {
	mods = append(mods, qm.From("[dbo].[tblMastItemHeader]"))
	return tblMastItemHeaderQuery{NewQuery(mods...)}
}

// FindTblMastItemHeader retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTblMastItemHeader(ctx context.Context, exec boil.ContextExecutor, cItemCode string, selectCols ...string) (*TblMastItemHeader, error) {
	tblMastItemHeaderObj := &TblMastItemHeader{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[tblMastItemHeader] where [cItemCode]=$1", sel,
	)

	q := queries.Raw(query, cItemCode)

	err := q.Bind(ctx, exec, tblMastItemHeaderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tblMastItemHeader")
	}

	if err = tblMastItemHeaderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tblMastItemHeaderObj, err
	}

	return tblMastItemHeaderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TblMastItemHeader) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tblMastItemHeader provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tblMastItemHeaderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tblMastItemHeaderInsertCacheMut.RLock()
	cache, cached := tblMastItemHeaderInsertCache[key]
	tblMastItemHeaderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tblMastItemHeaderAllColumns,
			tblMastItemHeaderColumnsWithDefault,
			tblMastItemHeaderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tblMastItemHeaderType, tblMastItemHeaderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tblMastItemHeaderType, tblMastItemHeaderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[tblMastItemHeader] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[tblMastItemHeader] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tblMastItemHeader")
	}

	if !cached {
		tblMastItemHeaderInsertCacheMut.Lock()
		tblMastItemHeaderInsertCache[key] = cache
		tblMastItemHeaderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TblMastItemHeader.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TblMastItemHeader) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tblMastItemHeaderUpdateCacheMut.RLock()
	cache, cached := tblMastItemHeaderUpdateCache[key]
	tblMastItemHeaderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tblMastItemHeaderAllColumns,
			tblMastItemHeaderPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, tblMastItemHeaderColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tblMastItemHeader, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[tblMastItemHeader] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, tblMastItemHeaderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tblMastItemHeaderType, tblMastItemHeaderMapping, append(wl, tblMastItemHeaderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tblMastItemHeader row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tblMastItemHeader")
	}

	if !cached {
		tblMastItemHeaderUpdateCacheMut.Lock()
		tblMastItemHeaderUpdateCache[key] = cache
		tblMastItemHeaderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tblMastItemHeaderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tblMastItemHeader")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tblMastItemHeader")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TblMastItemHeaderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tblMastItemHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[tblMastItemHeader] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tblMastItemHeaderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tblMastItemHeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tblMastItemHeader")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TblMastItemHeader) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tblMastItemHeader provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tblMastItemHeaderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tblMastItemHeaderUpsertCacheMut.RLock()
	cache, cached := tblMastItemHeaderUpsertCache[key]
	tblMastItemHeaderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tblMastItemHeaderAllColumns,
			tblMastItemHeaderColumnsWithDefault,
			tblMastItemHeaderColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, tblMastItemHeaderColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(tblMastItemHeaderPrimaryKeyColumns, v) && strmangle.ContainsAny(tblMastItemHeaderColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert tblMastItemHeader, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, tblMastItemHeaderColumnsWithAuto)
		ret = strmangle.SetMerge(ret, tblMastItemHeaderColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			tblMastItemHeaderAllColumns,
			tblMastItemHeaderPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, tblMastItemHeaderColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert tblMastItemHeader, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[tblMastItemHeader]", tblMastItemHeaderPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(tblMastItemHeaderPrimaryKeyColumns))
		copy(whitelist, tblMastItemHeaderPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(tblMastItemHeaderType, tblMastItemHeaderMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tblMastItemHeaderType, tblMastItemHeaderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tblMastItemHeader")
	}

	if !cached {
		tblMastItemHeaderUpsertCacheMut.Lock()
		tblMastItemHeaderUpsertCache[key] = cache
		tblMastItemHeaderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TblMastItemHeader record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TblMastItemHeader) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TblMastItemHeader provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tblMastItemHeaderPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[tblMastItemHeader] WHERE [cItemCode]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tblMastItemHeader")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tblMastItemHeader")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tblMastItemHeaderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tblMastItemHeaderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tblMastItemHeader")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tblMastItemHeader")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TblMastItemHeaderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tblMastItemHeaderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tblMastItemHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[tblMastItemHeader] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tblMastItemHeaderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tblMastItemHeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tblMastItemHeader")
	}

	if len(tblMastItemHeaderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TblMastItemHeader) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTblMastItemHeader(ctx, exec, o.CItemCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TblMastItemHeaderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TblMastItemHeaderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tblMastItemHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[tblMastItemHeader].* FROM [dbo].[tblMastItemHeader] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tblMastItemHeaderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TblMastItemHeaderSlice")
	}

	*o = slice

	return nil
}

// TblMastItemHeaderExists checks if the TblMastItemHeader row exists.
func TblMastItemHeaderExists(ctx context.Context, exec boil.ContextExecutor, cItemCode string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[tblMastItemHeader] where [cItemCode]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cItemCode)
	}
	row := exec.QueryRowContext(ctx, sql, cItemCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tblMastItemHeader exists")
	}

	return exists, nil
}
