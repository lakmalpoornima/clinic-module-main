// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TempLabdatum is an object representing the database table.
type TempLabdatum struct {
	CRegistrationNo  string    `boil:"cRegistrationNo" json:"cRegistrationNo" toml:"cRegistrationNo" yaml:"cRegistrationNo"`
	VcPatientName    string    `boil:"vcPatientName" json:"vcPatientName" toml:"vcPatientName" yaml:"vcPatientName"`
	DtpDate          time.Time `boil:"dtpDate" json:"dtpDate" toml:"dtpDate" yaml:"dtpDate"`
	CLabReferenceNo  string    `boil:"cLabReferenceNo" json:"cLabReferenceNo" toml:"cLabReferenceNo" yaml:"cLabReferenceNo"`
	CTestCode        string    `boil:"cTestCode" json:"cTestCode" toml:"cTestCode" yaml:"cTestCode"`
	CElementCode     string    `boil:"cElementCode" json:"cElementCode" toml:"cElementCode" yaml:"cElementCode"`
	VcLabDescription string    `boil:"vcLabDescription" json:"vcLabDescription" toml:"vcLabDescription" yaml:"vcLabDescription"`
	VcKeyword        string    `boil:"vcKeyword" json:"vcKeyword" toml:"vcKeyword" yaml:"vcKeyword"`
	VcUnit           string    `boil:"vcUnit" json:"vcUnit" toml:"vcUnit" yaml:"vcUnit"`
	ID               int       `boil:"iD" json:"iD" toml:"iD" yaml:"iD"`

	R *tempLabdatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tempLabdatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TempLabdatumColumns = struct {
	CRegistrationNo  string
	VcPatientName    string
	DtpDate          string
	CLabReferenceNo  string
	CTestCode        string
	CElementCode     string
	VcLabDescription string
	VcKeyword        string
	VcUnit           string
	ID               string
}{
	CRegistrationNo:  "cRegistrationNo",
	VcPatientName:    "vcPatientName",
	DtpDate:          "dtpDate",
	CLabReferenceNo:  "cLabReferenceNo",
	CTestCode:        "cTestCode",
	CElementCode:     "cElementCode",
	VcLabDescription: "vcLabDescription",
	VcKeyword:        "vcKeyword",
	VcUnit:           "vcUnit",
	ID:               "iD",
}

var TempLabdatumTableColumns = struct {
	CRegistrationNo  string
	VcPatientName    string
	DtpDate          string
	CLabReferenceNo  string
	CTestCode        string
	CElementCode     string
	VcLabDescription string
	VcKeyword        string
	VcUnit           string
	ID               string
}{
	CRegistrationNo:  "TempLabdata.cRegistrationNo",
	VcPatientName:    "TempLabdata.vcPatientName",
	DtpDate:          "TempLabdata.dtpDate",
	CLabReferenceNo:  "TempLabdata.cLabReferenceNo",
	CTestCode:        "TempLabdata.cTestCode",
	CElementCode:     "TempLabdata.cElementCode",
	VcLabDescription: "TempLabdata.vcLabDescription",
	VcKeyword:        "TempLabdata.vcKeyword",
	VcUnit:           "TempLabdata.vcUnit",
	ID:               "TempLabdata.iD",
}

// Generated where

var TempLabdatumWhere = struct {
	CRegistrationNo  whereHelperstring
	VcPatientName    whereHelperstring
	DtpDate          whereHelpertime_Time
	CLabReferenceNo  whereHelperstring
	CTestCode        whereHelperstring
	CElementCode     whereHelperstring
	VcLabDescription whereHelperstring
	VcKeyword        whereHelperstring
	VcUnit           whereHelperstring
	ID               whereHelperint
}{
	CRegistrationNo:  whereHelperstring{field: "[dbo].[TempLabdata].[cRegistrationNo]"},
	VcPatientName:    whereHelperstring{field: "[dbo].[TempLabdata].[vcPatientName]"},
	DtpDate:          whereHelpertime_Time{field: "[dbo].[TempLabdata].[dtpDate]"},
	CLabReferenceNo:  whereHelperstring{field: "[dbo].[TempLabdata].[cLabReferenceNo]"},
	CTestCode:        whereHelperstring{field: "[dbo].[TempLabdata].[cTestCode]"},
	CElementCode:     whereHelperstring{field: "[dbo].[TempLabdata].[cElementCode]"},
	VcLabDescription: whereHelperstring{field: "[dbo].[TempLabdata].[vcLabDescription]"},
	VcKeyword:        whereHelperstring{field: "[dbo].[TempLabdata].[vcKeyword]"},
	VcUnit:           whereHelperstring{field: "[dbo].[TempLabdata].[vcUnit]"},
	ID:               whereHelperint{field: "[dbo].[TempLabdata].[iD]"},
}

// TempLabdatumRels is where relationship names are stored.
var TempLabdatumRels = struct {
}{}

// tempLabdatumR is where relationships are stored.
type tempLabdatumR struct {
}

// NewStruct creates a new relationship struct
func (*tempLabdatumR) NewStruct() *tempLabdatumR {
	return &tempLabdatumR{}
}

// tempLabdatumL is where Load methods for each relationship are stored.
type tempLabdatumL struct{}

var (
	tempLabdatumAllColumns            = []string{"cRegistrationNo", "vcPatientName", "dtpDate", "cLabReferenceNo", "cTestCode", "cElementCode", "vcLabDescription", "vcKeyword", "vcUnit", "iD"}
	tempLabdatumColumnsWithAuto       = []string{}
	tempLabdatumColumnsWithoutDefault = []string{}
	tempLabdatumColumnsWithDefault    = []string{"cRegistrationNo", "vcPatientName", "dtpDate", "cLabReferenceNo", "cTestCode", "cElementCode", "vcLabDescription", "vcKeyword", "vcUnit", "iD"}
	tempLabdatumPrimaryKeyColumns     = []string{"iD"}
)

type (
	// TempLabdatumSlice is an alias for a slice of pointers to TempLabdatum.
	// This should almost always be used instead of []TempLabdatum.
	TempLabdatumSlice []*TempLabdatum
	// TempLabdatumHook is the signature for custom TempLabdatum hook methods
	TempLabdatumHook func(context.Context, boil.ContextExecutor, *TempLabdatum) error

	tempLabdatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tempLabdatumType                 = reflect.TypeOf(&TempLabdatum{})
	tempLabdatumMapping              = queries.MakeStructMapping(tempLabdatumType)
	tempLabdatumPrimaryKeyMapping, _ = queries.BindMapping(tempLabdatumType, tempLabdatumMapping, tempLabdatumPrimaryKeyColumns)
	tempLabdatumInsertCacheMut       sync.RWMutex
	tempLabdatumInsertCache          = make(map[string]insertCache)
	tempLabdatumUpdateCacheMut       sync.RWMutex
	tempLabdatumUpdateCache          = make(map[string]updateCache)
	tempLabdatumUpsertCacheMut       sync.RWMutex
	tempLabdatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tempLabdatumBeforeInsertHooks []TempLabdatumHook
var tempLabdatumBeforeUpdateHooks []TempLabdatumHook
var tempLabdatumBeforeDeleteHooks []TempLabdatumHook
var tempLabdatumBeforeUpsertHooks []TempLabdatumHook

var tempLabdatumAfterInsertHooks []TempLabdatumHook
var tempLabdatumAfterSelectHooks []TempLabdatumHook
var tempLabdatumAfterUpdateHooks []TempLabdatumHook
var tempLabdatumAfterDeleteHooks []TempLabdatumHook
var tempLabdatumAfterUpsertHooks []TempLabdatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TempLabdatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempLabdatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TempLabdatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempLabdatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TempLabdatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempLabdatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TempLabdatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempLabdatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TempLabdatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempLabdatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TempLabdatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempLabdatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TempLabdatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempLabdatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TempLabdatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempLabdatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TempLabdatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempLabdatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTempLabdatumHook registers your hook function for all future operations.
func AddTempLabdatumHook(hookPoint boil.HookPoint, tempLabdatumHook TempLabdatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tempLabdatumBeforeInsertHooks = append(tempLabdatumBeforeInsertHooks, tempLabdatumHook)
	case boil.BeforeUpdateHook:
		tempLabdatumBeforeUpdateHooks = append(tempLabdatumBeforeUpdateHooks, tempLabdatumHook)
	case boil.BeforeDeleteHook:
		tempLabdatumBeforeDeleteHooks = append(tempLabdatumBeforeDeleteHooks, tempLabdatumHook)
	case boil.BeforeUpsertHook:
		tempLabdatumBeforeUpsertHooks = append(tempLabdatumBeforeUpsertHooks, tempLabdatumHook)
	case boil.AfterInsertHook:
		tempLabdatumAfterInsertHooks = append(tempLabdatumAfterInsertHooks, tempLabdatumHook)
	case boil.AfterSelectHook:
		tempLabdatumAfterSelectHooks = append(tempLabdatumAfterSelectHooks, tempLabdatumHook)
	case boil.AfterUpdateHook:
		tempLabdatumAfterUpdateHooks = append(tempLabdatumAfterUpdateHooks, tempLabdatumHook)
	case boil.AfterDeleteHook:
		tempLabdatumAfterDeleteHooks = append(tempLabdatumAfterDeleteHooks, tempLabdatumHook)
	case boil.AfterUpsertHook:
		tempLabdatumAfterUpsertHooks = append(tempLabdatumAfterUpsertHooks, tempLabdatumHook)
	}
}

// One returns a single tempLabdatum record from the query.
func (q tempLabdatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TempLabdatum, error) {
	o := &TempLabdatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TempLabdata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TempLabdatum records from the query.
func (q tempLabdatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (TempLabdatumSlice, error) {
	var o []*TempLabdatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TempLabdatum slice")
	}

	if len(tempLabdatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TempLabdatum records in the query.
func (q tempLabdatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TempLabdata rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tempLabdatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TempLabdata exists")
	}

	return count > 0, nil
}

// TempLabdata retrieves all the records using an executor.
func TempLabdata(mods ...qm.QueryMod) tempLabdatumQuery {
	mods = append(mods, qm.From("[dbo].[TempLabdata]"))
	return tempLabdatumQuery{NewQuery(mods...)}
}

// FindTempLabdatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTempLabdatum(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TempLabdatum, error) {
	tempLabdatumObj := &TempLabdatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[TempLabdata] where [iD]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tempLabdatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TempLabdata")
	}

	if err = tempLabdatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tempLabdatumObj, err
	}

	return tempLabdatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TempLabdatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TempLabdata provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tempLabdatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tempLabdatumInsertCacheMut.RLock()
	cache, cached := tempLabdatumInsertCache[key]
	tempLabdatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tempLabdatumAllColumns,
			tempLabdatumColumnsWithDefault,
			tempLabdatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tempLabdatumType, tempLabdatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tempLabdatumType, tempLabdatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[TempLabdata] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[TempLabdata] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TempLabdata")
	}

	if !cached {
		tempLabdatumInsertCacheMut.Lock()
		tempLabdatumInsertCache[key] = cache
		tempLabdatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TempLabdatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TempLabdatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tempLabdatumUpdateCacheMut.RLock()
	cache, cached := tempLabdatumUpdateCache[key]
	tempLabdatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tempLabdatumAllColumns,
			tempLabdatumPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, tempLabdatumColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TempLabdata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[TempLabdata] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, tempLabdatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tempLabdatumType, tempLabdatumMapping, append(wl, tempLabdatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TempLabdata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TempLabdata")
	}

	if !cached {
		tempLabdatumUpdateCacheMut.Lock()
		tempLabdatumUpdateCache[key] = cache
		tempLabdatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tempLabdatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TempLabdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TempLabdata")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TempLabdatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tempLabdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[TempLabdata] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tempLabdatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tempLabdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tempLabdatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TempLabdatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TempLabdata provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tempLabdatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tempLabdatumUpsertCacheMut.RLock()
	cache, cached := tempLabdatumUpsertCache[key]
	tempLabdatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tempLabdatumAllColumns,
			tempLabdatumColumnsWithDefault,
			tempLabdatumColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, tempLabdatumColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(tempLabdatumPrimaryKeyColumns, v) && strmangle.ContainsAny(tempLabdatumColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert TempLabdata, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, tempLabdatumColumnsWithAuto)
		ret = strmangle.SetMerge(ret, tempLabdatumColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			tempLabdatumAllColumns,
			tempLabdatumPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, tempLabdatumColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert TempLabdata, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[TempLabdata]", tempLabdatumPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(tempLabdatumPrimaryKeyColumns))
		copy(whitelist, tempLabdatumPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(tempLabdatumType, tempLabdatumMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tempLabdatumType, tempLabdatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert TempLabdata")
	}

	if !cached {
		tempLabdatumUpsertCacheMut.Lock()
		tempLabdatumUpsertCache[key] = cache
		tempLabdatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TempLabdatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TempLabdatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TempLabdatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tempLabdatumPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[TempLabdata] WHERE [iD]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TempLabdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TempLabdata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tempLabdatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tempLabdatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TempLabdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TempLabdata")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TempLabdatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tempLabdatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tempLabdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[TempLabdata] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tempLabdatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tempLabdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TempLabdata")
	}

	if len(tempLabdatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TempLabdatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTempLabdatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TempLabdatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TempLabdatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tempLabdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[TempLabdata].* FROM [dbo].[TempLabdata] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tempLabdatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TempLabdatumSlice")
	}

	*o = slice

	return nil
}

// TempLabdatumExists checks if the TempLabdatum row exists.
func TempLabdatumExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[TempLabdata] where [iD]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TempLabdata exists")
	}

	return exists, nil
}
