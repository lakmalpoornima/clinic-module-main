// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AspNetRole is an object representing the database table.
type AspNetRole struct {
	ID               string      `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Name             null.String `boil:"Name" json:"Name,omitempty" toml:"Name" yaml:"Name,omitempty"`
	NormalizedName   null.String `boil:"NormalizedName" json:"NormalizedName,omitempty" toml:"NormalizedName" yaml:"NormalizedName,omitempty"`
	ConcurrencyStamp null.String `boil:"ConcurrencyStamp" json:"ConcurrencyStamp,omitempty" toml:"ConcurrencyStamp" yaml:"ConcurrencyStamp,omitempty"`

	R *aspNetRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aspNetRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AspNetRoleColumns = struct {
	ID               string
	Name             string
	NormalizedName   string
	ConcurrencyStamp string
}{
	ID:               "Id",
	Name:             "Name",
	NormalizedName:   "NormalizedName",
	ConcurrencyStamp: "ConcurrencyStamp",
}

var AspNetRoleTableColumns = struct {
	ID               string
	Name             string
	NormalizedName   string
	ConcurrencyStamp string
}{
	ID:               "AspNetRoles.Id",
	Name:             "AspNetRoles.Name",
	NormalizedName:   "AspNetRoles.NormalizedName",
	ConcurrencyStamp: "AspNetRoles.ConcurrencyStamp",
}

// Generated where

var AspNetRoleWhere = struct {
	ID               whereHelperstring
	Name             whereHelpernull_String
	NormalizedName   whereHelpernull_String
	ConcurrencyStamp whereHelpernull_String
}{
	ID:               whereHelperstring{field: "[dbo].[AspNetRoles].[Id]"},
	Name:             whereHelpernull_String{field: "[dbo].[AspNetRoles].[Name]"},
	NormalizedName:   whereHelpernull_String{field: "[dbo].[AspNetRoles].[NormalizedName]"},
	ConcurrencyStamp: whereHelpernull_String{field: "[dbo].[AspNetRoles].[ConcurrencyStamp]"},
}

// AspNetRoleRels is where relationship names are stored.
var AspNetRoleRels = struct {
	RoleIdAspNetRoleClaims   string
	UserIdAspNetUsers978979s string
}{
	RoleIdAspNetRoleClaims:   "RoleIdAspNetRoleClaims",
	UserIdAspNetUsers978979s: "UserIdAspNetUsers978979s",
}

// aspNetRoleR is where relationships are stored.
type aspNetRoleR struct {
	RoleIdAspNetRoleClaims   AspNetRoleClaimSlice   `boil:"RoleIdAspNetRoleClaims" json:"RoleIdAspNetRoleClaims" toml:"RoleIdAspNetRoleClaims" yaml:"RoleIdAspNetRoleClaims"`
	UserIdAspNetUsers978979s AspNetUsers978979Slice `boil:"UserIdAspNetUsers978979s" json:"UserIdAspNetUsers978979s" toml:"UserIdAspNetUsers978979s" yaml:"UserIdAspNetUsers978979s"`
}

// NewStruct creates a new relationship struct
func (*aspNetRoleR) NewStruct() *aspNetRoleR {
	return &aspNetRoleR{}
}

// aspNetRoleL is where Load methods for each relationship are stored.
type aspNetRoleL struct{}

var (
	aspNetRoleAllColumns            = []string{"Id", "Name", "NormalizedName", "ConcurrencyStamp"}
	aspNetRoleColumnsWithAuto       = []string{}
	aspNetRoleColumnsWithoutDefault = []string{"Id", "Name", "NormalizedName", "ConcurrencyStamp"}
	aspNetRoleColumnsWithDefault    = []string{}
	aspNetRolePrimaryKeyColumns     = []string{"Id"}
)

type (
	// AspNetRoleSlice is an alias for a slice of pointers to AspNetRole.
	// This should almost always be used instead of []AspNetRole.
	AspNetRoleSlice []*AspNetRole
	// AspNetRoleHook is the signature for custom AspNetRole hook methods
	AspNetRoleHook func(context.Context, boil.ContextExecutor, *AspNetRole) error

	aspNetRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aspNetRoleType                 = reflect.TypeOf(&AspNetRole{})
	aspNetRoleMapping              = queries.MakeStructMapping(aspNetRoleType)
	aspNetRolePrimaryKeyMapping, _ = queries.BindMapping(aspNetRoleType, aspNetRoleMapping, aspNetRolePrimaryKeyColumns)
	aspNetRoleInsertCacheMut       sync.RWMutex
	aspNetRoleInsertCache          = make(map[string]insertCache)
	aspNetRoleUpdateCacheMut       sync.RWMutex
	aspNetRoleUpdateCache          = make(map[string]updateCache)
	aspNetRoleUpsertCacheMut       sync.RWMutex
	aspNetRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aspNetRoleBeforeInsertHooks []AspNetRoleHook
var aspNetRoleBeforeUpdateHooks []AspNetRoleHook
var aspNetRoleBeforeDeleteHooks []AspNetRoleHook
var aspNetRoleBeforeUpsertHooks []AspNetRoleHook

var aspNetRoleAfterInsertHooks []AspNetRoleHook
var aspNetRoleAfterSelectHooks []AspNetRoleHook
var aspNetRoleAfterUpdateHooks []AspNetRoleHook
var aspNetRoleAfterDeleteHooks []AspNetRoleHook
var aspNetRoleAfterUpsertHooks []AspNetRoleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AspNetRole) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AspNetRole) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AspNetRole) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AspNetRole) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AspNetRole) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AspNetRole) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AspNetRole) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AspNetRole) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AspNetRole) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetRoleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAspNetRoleHook registers your hook function for all future operations.
func AddAspNetRoleHook(hookPoint boil.HookPoint, aspNetRoleHook AspNetRoleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		aspNetRoleBeforeInsertHooks = append(aspNetRoleBeforeInsertHooks, aspNetRoleHook)
	case boil.BeforeUpdateHook:
		aspNetRoleBeforeUpdateHooks = append(aspNetRoleBeforeUpdateHooks, aspNetRoleHook)
	case boil.BeforeDeleteHook:
		aspNetRoleBeforeDeleteHooks = append(aspNetRoleBeforeDeleteHooks, aspNetRoleHook)
	case boil.BeforeUpsertHook:
		aspNetRoleBeforeUpsertHooks = append(aspNetRoleBeforeUpsertHooks, aspNetRoleHook)
	case boil.AfterInsertHook:
		aspNetRoleAfterInsertHooks = append(aspNetRoleAfterInsertHooks, aspNetRoleHook)
	case boil.AfterSelectHook:
		aspNetRoleAfterSelectHooks = append(aspNetRoleAfterSelectHooks, aspNetRoleHook)
	case boil.AfterUpdateHook:
		aspNetRoleAfterUpdateHooks = append(aspNetRoleAfterUpdateHooks, aspNetRoleHook)
	case boil.AfterDeleteHook:
		aspNetRoleAfterDeleteHooks = append(aspNetRoleAfterDeleteHooks, aspNetRoleHook)
	case boil.AfterUpsertHook:
		aspNetRoleAfterUpsertHooks = append(aspNetRoleAfterUpsertHooks, aspNetRoleHook)
	}
}

// One returns a single aspNetRole record from the query.
func (q aspNetRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AspNetRole, error) {
	o := &AspNetRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AspNetRoles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AspNetRole records from the query.
func (q aspNetRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (AspNetRoleSlice, error) {
	var o []*AspNetRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AspNetRole slice")
	}

	if len(aspNetRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AspNetRole records in the query.
func (q aspNetRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AspNetRoles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aspNetRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AspNetRoles exists")
	}

	return count > 0, nil
}

// RoleIdAspNetRoleClaims retrieves all the AspNetRoleClaim's AspNetRoleClaims with an executor via RoleId column.
func (o *AspNetRole) RoleIdAspNetRoleClaims(mods ...qm.QueryMod) aspNetRoleClaimQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[AspNetRoleClaims].[RoleId]=?", o.ID),
	)

	query := AspNetRoleClaims(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[AspNetRoleClaims]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[AspNetRoleClaims].*"})
	}

	return query
}

// UserIdAspNetUsers978979s retrieves all the AspNetUsers978979's AspNetUsers978979s with an executor via Id column.
func (o *AspNetRole) UserIdAspNetUsers978979s(mods ...qm.QueryMod) aspNetUsers978979Query {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("[dbo].[AspNetUserRoles] on [dbo].[AspNetUsers978979].[Id] = [dbo].[AspNetUserRoles].[UserId]"),
		qm.Where("[dbo].[AspNetUserRoles].[RoleId]=?", o.ID),
	)

	query := AspNetUsers978979s(queryMods...)
	queries.SetFrom(query.Query, "[dbo].[AspNetUsers978979]")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"[dbo].[AspNetUsers978979].*"})
	}

	return query
}

// LoadRoleIdAspNetRoleClaims allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aspNetRoleL) LoadRoleIdAspNetRoleClaims(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAspNetRole interface{}, mods queries.Applicator) error {
	var slice []*AspNetRole
	var object *AspNetRole

	if singular {
		object = maybeAspNetRole.(*AspNetRole)
	} else {
		slice = *maybeAspNetRole.(*[]*AspNetRole)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aspNetRoleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aspNetRoleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.AspNetRoleClaims`),
		qm.WhereIn(`dbo.AspNetRoleClaims.RoleId in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AspNetRoleClaims")
	}

	var resultSlice []*AspNetRoleClaim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AspNetRoleClaims")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on AspNetRoleClaims")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AspNetRoleClaims")
	}

	if len(aspNetRoleClaimAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoleIdAspNetRoleClaims = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &aspNetRoleClaimR{}
			}
			foreign.R.RoleIdAspNetRole = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoleId {
				local.R.RoleIdAspNetRoleClaims = append(local.R.RoleIdAspNetRoleClaims, foreign)
				if foreign.R == nil {
					foreign.R = &aspNetRoleClaimR{}
				}
				foreign.R.RoleIdAspNetRole = local
				break
			}
		}
	}

	return nil
}

// LoadUserIdAspNetUsers978979s allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aspNetRoleL) LoadUserIdAspNetUsers978979s(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAspNetRole interface{}, mods queries.Applicator) error {
	var slice []*AspNetRole
	var object *AspNetRole

	if singular {
		object = maybeAspNetRole.(*AspNetRole)
	} else {
		slice = *maybeAspNetRole.(*[]*AspNetRole)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &aspNetRoleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aspNetRoleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("[dbo].[AspNetUsers978979].Id, [dbo].[AspNetUsers978979].UserName, [dbo].[AspNetUsers978979].NormalizedUserName, [dbo].[AspNetUsers978979].Email, [dbo].[AspNetUsers978979].NormalizedEmail, [dbo].[AspNetUsers978979].EmailConfirmed, [dbo].[AspNetUsers978979].PasswordHash, [dbo].[AspNetUsers978979].SecurityStamp, [dbo].[AspNetUsers978979].ConcurrencyStamp, [dbo].[AspNetUsers978979].PhoneNumber, [dbo].[AspNetUsers978979].PhoneNumberConfirmed, [dbo].[AspNetUsers978979].TwoFactorEnabled, [dbo].[AspNetUsers978979].LockoutEnd, [dbo].[AspNetUsers978979].LockoutEnabled, [dbo].[AspNetUsers978979].AccessFailedCount, [a].[RoleId]"),
		qm.From("[dbo].[AspNetUsers978979]"),
		qm.InnerJoin("[dbo].[AspNetUserRoles] as [a] on [dbo].[AspNetUsers978979].[Id] = [a].[UserId]"),
		qm.WhereIn("[a].[RoleId] in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AspNetUsers978979")
	}

	var resultSlice []*AspNetUsers978979

	var localJoinCols []string
	for results.Next() {
		one := new(AspNetUsers978979)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.UserName, &one.NormalizedUserName, &one.Email, &one.NormalizedEmail, &one.EmailConfirmed, &one.PasswordHash, &one.SecurityStamp, &one.ConcurrencyStamp, &one.PhoneNumber, &one.PhoneNumberConfirmed, &one.TwoFactorEnabled, &one.LockoutEnd, &one.LockoutEnabled, &one.AccessFailedCount, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for AspNetUsers978979")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice AspNetUsers978979")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on AspNetUsers978979")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for AspNetUsers978979")
	}

	if len(aspNetUsers978979AfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserIdAspNetUsers978979s = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &aspNetUsers978979R{}
			}
			foreign.R.RoleIdAspNetRoles = append(foreign.R.RoleIdAspNetRoles, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.UserIdAspNetUsers978979s = append(local.R.UserIdAspNetUsers978979s, foreign)
				if foreign.R == nil {
					foreign.R = &aspNetUsers978979R{}
				}
				foreign.R.RoleIdAspNetRoles = append(foreign.R.RoleIdAspNetRoles, local)
				break
			}
		}
	}

	return nil
}

// AddRoleIdAspNetRoleClaims adds the given related objects to the existing relationships
// of the AspNetRole, optionally inserting them as new records.
// Appends related to o.R.RoleIdAspNetRoleClaims.
// Sets related.R.RoleIdAspNetRole appropriately.
func (o *AspNetRole) AddRoleIdAspNetRoleClaims(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AspNetRoleClaim) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoleId = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[AspNetRoleClaims] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"RoleId"}),
				strmangle.WhereClause("[", "]", 2, aspNetRoleClaimPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoleId = o.ID
		}
	}

	if o.R == nil {
		o.R = &aspNetRoleR{
			RoleIdAspNetRoleClaims: related,
		}
	} else {
		o.R.RoleIdAspNetRoleClaims = append(o.R.RoleIdAspNetRoleClaims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &aspNetRoleClaimR{
				RoleIdAspNetRole: o,
			}
		} else {
			rel.R.RoleIdAspNetRole = o
		}
	}
	return nil
}

// AddUserIdAspNetUsers978979s adds the given related objects to the existing relationships
// of the AspNetRole, optionally inserting them as new records.
// Appends related to o.R.UserIdAspNetUsers978979s.
// Sets related.R.RoleIdAspNetRoles appropriately.
func (o *AspNetRole) AddUserIdAspNetUsers978979s(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AspNetUsers978979) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into [dbo].[AspNetUserRoles] ([RoleId], [UserId]) values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &aspNetRoleR{
			UserIdAspNetUsers978979s: related,
		}
	} else {
		o.R.UserIdAspNetUsers978979s = append(o.R.UserIdAspNetUsers978979s, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &aspNetUsers978979R{
				RoleIdAspNetRoles: AspNetRoleSlice{o},
			}
		} else {
			rel.R.RoleIdAspNetRoles = append(rel.R.RoleIdAspNetRoles, o)
		}
	}
	return nil
}

// SetUserIdAspNetUsers978979s removes all previously related items of the
// AspNetRole replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RoleIdAspNetRoles's UserIdAspNetUsers978979s accordingly.
// Replaces o.R.UserIdAspNetUsers978979s with related.
// Sets related.R.RoleIdAspNetRoles's UserIdAspNetUsers978979s accordingly.
func (o *AspNetRole) SetUserIdAspNetUsers978979s(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AspNetUsers978979) error {
	query := "delete from [dbo].[AspNetUserRoles] where [RoleId] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUserIdAspNetUsers978979sFromRoleIdAspNetRolesSlice(o, related)
	if o.R != nil {
		o.R.UserIdAspNetUsers978979s = nil
	}
	return o.AddUserIdAspNetUsers978979s(ctx, exec, insert, related...)
}

// RemoveUserIdAspNetUsers978979s relationships from objects passed in.
// Removes related items from R.UserIdAspNetUsers978979s (uses pointer comparison, removal does not keep order)
// Sets related.R.RoleIdAspNetRoles.
func (o *AspNetRole) RemoveUserIdAspNetUsers978979s(ctx context.Context, exec boil.ContextExecutor, related ...*AspNetUsers978979) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from [dbo].[AspNetUserRoles] where [RoleId] = $1 and [UserId] in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUserIdAspNetUsers978979sFromRoleIdAspNetRolesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserIdAspNetUsers978979s {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserIdAspNetUsers978979s)
			if ln > 1 && i < ln-1 {
				o.R.UserIdAspNetUsers978979s[i] = o.R.UserIdAspNetUsers978979s[ln-1]
			}
			o.R.UserIdAspNetUsers978979s = o.R.UserIdAspNetUsers978979s[:ln-1]
			break
		}
	}

	return nil
}

func removeUserIdAspNetUsers978979sFromRoleIdAspNetRolesSlice(o *AspNetRole, related []*AspNetUsers978979) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.RoleIdAspNetRoles {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.RoleIdAspNetRoles)
			if ln > 1 && i < ln-1 {
				rel.R.RoleIdAspNetRoles[i] = rel.R.RoleIdAspNetRoles[ln-1]
			}
			rel.R.RoleIdAspNetRoles = rel.R.RoleIdAspNetRoles[:ln-1]
			break
		}
	}
}

// AspNetRoles retrieves all the records using an executor.
func AspNetRoles(mods ...qm.QueryMod) aspNetRoleQuery {
	mods = append(mods, qm.From("[dbo].[AspNetRoles]"))
	return aspNetRoleQuery{NewQuery(mods...)}
}

// FindAspNetRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAspNetRole(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AspNetRole, error) {
	aspNetRoleObj := &AspNetRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[AspNetRoles] where [Id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, aspNetRoleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AspNetRoles")
	}

	if err = aspNetRoleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aspNetRoleObj, err
	}

	return aspNetRoleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AspNetRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetRoles provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aspNetRoleInsertCacheMut.RLock()
	cache, cached := aspNetRoleInsertCache[key]
	aspNetRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aspNetRoleAllColumns,
			aspNetRoleColumnsWithDefault,
			aspNetRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aspNetRoleType, aspNetRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aspNetRoleType, aspNetRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[AspNetRoles] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[AspNetRoles] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AspNetRoles")
	}

	if !cached {
		aspNetRoleInsertCacheMut.Lock()
		aspNetRoleInsertCache[key] = cache
		aspNetRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AspNetRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AspNetRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aspNetRoleUpdateCacheMut.RLock()
	cache, cached := aspNetRoleUpdateCache[key]
	aspNetRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aspNetRoleAllColumns,
			aspNetRolePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, aspNetRoleColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AspNetRoles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[AspNetRoles] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, aspNetRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aspNetRoleType, aspNetRoleMapping, append(wl, aspNetRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AspNetRoles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AspNetRoles")
	}

	if !cached {
		aspNetRoleUpdateCacheMut.Lock()
		aspNetRoleUpdateCache[key] = cache
		aspNetRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aspNetRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AspNetRoles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AspNetRoles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AspNetRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[AspNetRoles] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aspNetRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aspNetRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aspNetRole")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AspNetRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetRoles provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aspNetRoleUpsertCacheMut.RLock()
	cache, cached := aspNetRoleUpsertCache[key]
	aspNetRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			aspNetRoleAllColumns,
			aspNetRoleColumnsWithDefault,
			aspNetRoleColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, aspNetRoleColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(aspNetRolePrimaryKeyColumns, v) && strmangle.ContainsAny(aspNetRoleColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert AspNetRoles, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, aspNetRoleColumnsWithAuto)
		ret = strmangle.SetMerge(ret, aspNetRoleColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			aspNetRoleAllColumns,
			aspNetRolePrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, aspNetRoleColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert AspNetRoles, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[AspNetRoles]", aspNetRolePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(aspNetRolePrimaryKeyColumns))
		copy(whitelist, aspNetRolePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(aspNetRoleType, aspNetRoleMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aspNetRoleType, aspNetRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert AspNetRoles")
	}

	if !cached {
		aspNetRoleUpsertCacheMut.Lock()
		aspNetRoleUpsertCache[key] = cache
		aspNetRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AspNetRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AspNetRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AspNetRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aspNetRolePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[AspNetRoles] WHERE [Id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AspNetRoles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AspNetRoles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aspNetRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aspNetRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AspNetRoles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetRoles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AspNetRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aspNetRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[AspNetRoles] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aspNetRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetRoles")
	}

	if len(aspNetRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AspNetRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAspNetRole(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AspNetRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AspNetRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[AspNetRoles].* FROM [dbo].[AspNetRoles] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AspNetRoleSlice")
	}

	*o = slice

	return nil
}

// AspNetRoleExists checks if the AspNetRole row exists.
func AspNetRoleExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[AspNetRoles] where [Id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AspNetRoles exists")
	}

	return exists, nil
}
