// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DoctorNoteImage is an object representing the database table.
type DoctorNoteImage struct {
	ID             int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	DocumentID     null.String `boil:"DocumentID" json:"DocumentID,omitempty" toml:"DocumentID" yaml:"DocumentID,omitempty"`
	RegistrationNo null.String `boil:"RegistrationNo" json:"RegistrationNo,omitempty" toml:"RegistrationNo" yaml:"RegistrationNo,omitempty"`
	Image64Bit     null.String `boil:"Image64Bit" json:"Image64Bit,omitempty" toml:"Image64Bit" yaml:"Image64Bit,omitempty"`

	R *doctorNoteImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doctorNoteImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoctorNoteImageColumns = struct {
	ID             string
	DocumentID     string
	RegistrationNo string
	Image64Bit     string
}{
	ID:             "ID",
	DocumentID:     "DocumentID",
	RegistrationNo: "RegistrationNo",
	Image64Bit:     "Image64Bit",
}

var DoctorNoteImageTableColumns = struct {
	ID             string
	DocumentID     string
	RegistrationNo string
	Image64Bit     string
}{
	ID:             "DoctorNoteImage.ID",
	DocumentID:     "DoctorNoteImage.DocumentID",
	RegistrationNo: "DoctorNoteImage.RegistrationNo",
	Image64Bit:     "DoctorNoteImage.Image64Bit",
}

// Generated where

var DoctorNoteImageWhere = struct {
	ID             whereHelperint
	DocumentID     whereHelpernull_String
	RegistrationNo whereHelpernull_String
	Image64Bit     whereHelpernull_String
}{
	ID:             whereHelperint{field: "[dbo].[DoctorNoteImage].[ID]"},
	DocumentID:     whereHelpernull_String{field: "[dbo].[DoctorNoteImage].[DocumentID]"},
	RegistrationNo: whereHelpernull_String{field: "[dbo].[DoctorNoteImage].[RegistrationNo]"},
	Image64Bit:     whereHelpernull_String{field: "[dbo].[DoctorNoteImage].[Image64Bit]"},
}

// DoctorNoteImageRels is where relationship names are stored.
var DoctorNoteImageRels = struct {
}{}

// doctorNoteImageR is where relationships are stored.
type doctorNoteImageR struct {
}

// NewStruct creates a new relationship struct
func (*doctorNoteImageR) NewStruct() *doctorNoteImageR {
	return &doctorNoteImageR{}
}

// doctorNoteImageL is where Load methods for each relationship are stored.
type doctorNoteImageL struct{}

var (
	doctorNoteImageAllColumns            = []string{"ID", "DocumentID", "RegistrationNo", "Image64Bit"}
	doctorNoteImageColumnsWithAuto       = []string{}
	doctorNoteImageColumnsWithoutDefault = []string{"DocumentID", "RegistrationNo", "Image64Bit"}
	doctorNoteImageColumnsWithDefault    = []string{"ID"}
	doctorNoteImagePrimaryKeyColumns     = []string{"ID"}
)

type (
	// DoctorNoteImageSlice is an alias for a slice of pointers to DoctorNoteImage.
	// This should almost always be used instead of []DoctorNoteImage.
	DoctorNoteImageSlice []*DoctorNoteImage
	// DoctorNoteImageHook is the signature for custom DoctorNoteImage hook methods
	DoctorNoteImageHook func(context.Context, boil.ContextExecutor, *DoctorNoteImage) error

	doctorNoteImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doctorNoteImageType                 = reflect.TypeOf(&DoctorNoteImage{})
	doctorNoteImageMapping              = queries.MakeStructMapping(doctorNoteImageType)
	doctorNoteImagePrimaryKeyMapping, _ = queries.BindMapping(doctorNoteImageType, doctorNoteImageMapping, doctorNoteImagePrimaryKeyColumns)
	doctorNoteImageInsertCacheMut       sync.RWMutex
	doctorNoteImageInsertCache          = make(map[string]insertCache)
	doctorNoteImageUpdateCacheMut       sync.RWMutex
	doctorNoteImageUpdateCache          = make(map[string]updateCache)
	doctorNoteImageUpsertCacheMut       sync.RWMutex
	doctorNoteImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doctorNoteImageBeforeInsertHooks []DoctorNoteImageHook
var doctorNoteImageBeforeUpdateHooks []DoctorNoteImageHook
var doctorNoteImageBeforeDeleteHooks []DoctorNoteImageHook
var doctorNoteImageBeforeUpsertHooks []DoctorNoteImageHook

var doctorNoteImageAfterInsertHooks []DoctorNoteImageHook
var doctorNoteImageAfterSelectHooks []DoctorNoteImageHook
var doctorNoteImageAfterUpdateHooks []DoctorNoteImageHook
var doctorNoteImageAfterDeleteHooks []DoctorNoteImageHook
var doctorNoteImageAfterUpsertHooks []DoctorNoteImageHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DoctorNoteImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DoctorNoteImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DoctorNoteImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DoctorNoteImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DoctorNoteImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DoctorNoteImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DoctorNoteImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DoctorNoteImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DoctorNoteImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoctorNoteImageHook registers your hook function for all future operations.
func AddDoctorNoteImageHook(hookPoint boil.HookPoint, doctorNoteImageHook DoctorNoteImageHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doctorNoteImageBeforeInsertHooks = append(doctorNoteImageBeforeInsertHooks, doctorNoteImageHook)
	case boil.BeforeUpdateHook:
		doctorNoteImageBeforeUpdateHooks = append(doctorNoteImageBeforeUpdateHooks, doctorNoteImageHook)
	case boil.BeforeDeleteHook:
		doctorNoteImageBeforeDeleteHooks = append(doctorNoteImageBeforeDeleteHooks, doctorNoteImageHook)
	case boil.BeforeUpsertHook:
		doctorNoteImageBeforeUpsertHooks = append(doctorNoteImageBeforeUpsertHooks, doctorNoteImageHook)
	case boil.AfterInsertHook:
		doctorNoteImageAfterInsertHooks = append(doctorNoteImageAfterInsertHooks, doctorNoteImageHook)
	case boil.AfterSelectHook:
		doctorNoteImageAfterSelectHooks = append(doctorNoteImageAfterSelectHooks, doctorNoteImageHook)
	case boil.AfterUpdateHook:
		doctorNoteImageAfterUpdateHooks = append(doctorNoteImageAfterUpdateHooks, doctorNoteImageHook)
	case boil.AfterDeleteHook:
		doctorNoteImageAfterDeleteHooks = append(doctorNoteImageAfterDeleteHooks, doctorNoteImageHook)
	case boil.AfterUpsertHook:
		doctorNoteImageAfterUpsertHooks = append(doctorNoteImageAfterUpsertHooks, doctorNoteImageHook)
	}
}

// One returns a single doctorNoteImage record from the query.
func (q doctorNoteImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DoctorNoteImage, error) {
	o := &DoctorNoteImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for DoctorNoteImage")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DoctorNoteImage records from the query.
func (q doctorNoteImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoctorNoteImageSlice, error) {
	var o []*DoctorNoteImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DoctorNoteImage slice")
	}

	if len(doctorNoteImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DoctorNoteImage records in the query.
func (q doctorNoteImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count DoctorNoteImage rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doctorNoteImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if DoctorNoteImage exists")
	}

	return count > 0, nil
}

// DoctorNoteImages retrieves all the records using an executor.
func DoctorNoteImages(mods ...qm.QueryMod) doctorNoteImageQuery {
	mods = append(mods, qm.From("[dbo].[DoctorNoteImage]"))
	return doctorNoteImageQuery{NewQuery(mods...)}
}

// FindDoctorNoteImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoctorNoteImage(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DoctorNoteImage, error) {
	doctorNoteImageObj := &DoctorNoteImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[DoctorNoteImage] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doctorNoteImageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from DoctorNoteImage")
	}

	if err = doctorNoteImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return doctorNoteImageObj, err
	}

	return doctorNoteImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DoctorNoteImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteImage provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doctorNoteImageInsertCacheMut.RLock()
	cache, cached := doctorNoteImageInsertCache[key]
	doctorNoteImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doctorNoteImageAllColumns,
			doctorNoteImageColumnsWithDefault,
			doctorNoteImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doctorNoteImageType, doctorNoteImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doctorNoteImageType, doctorNoteImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[DoctorNoteImage] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[DoctorNoteImage] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into DoctorNoteImage")
	}

	if !cached {
		doctorNoteImageInsertCacheMut.Lock()
		doctorNoteImageInsertCache[key] = cache
		doctorNoteImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DoctorNoteImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DoctorNoteImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doctorNoteImageUpdateCacheMut.RLock()
	cache, cached := doctorNoteImageUpdateCache[key]
	doctorNoteImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doctorNoteImageAllColumns,
			doctorNoteImagePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, doctorNoteImageColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update DoctorNoteImage, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[DoctorNoteImage] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, doctorNoteImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doctorNoteImageType, doctorNoteImageMapping, append(wl, doctorNoteImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update DoctorNoteImage row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for DoctorNoteImage")
	}

	if !cached {
		doctorNoteImageUpdateCacheMut.Lock()
		doctorNoteImageUpdateCache[key] = cache
		doctorNoteImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doctorNoteImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for DoctorNoteImage")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for DoctorNoteImage")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoctorNoteImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[DoctorNoteImage] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, doctorNoteImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doctorNoteImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doctorNoteImage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DoctorNoteImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteImage provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteImageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	doctorNoteImageUpsertCacheMut.RLock()
	cache, cached := doctorNoteImageUpsertCache[key]
	doctorNoteImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			doctorNoteImageAllColumns,
			doctorNoteImageColumnsWithDefault,
			doctorNoteImageColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, doctorNoteImageColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(doctorNoteImagePrimaryKeyColumns, v) && strmangle.ContainsAny(doctorNoteImageColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert DoctorNoteImage, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, doctorNoteImageColumnsWithAuto)
		ret = strmangle.SetMerge(ret, doctorNoteImageColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			doctorNoteImageAllColumns,
			doctorNoteImagePrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, doctorNoteImageColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert DoctorNoteImage, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[DoctorNoteImage]", doctorNoteImagePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(doctorNoteImagePrimaryKeyColumns))
		copy(whitelist, doctorNoteImagePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(doctorNoteImageType, doctorNoteImageMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(doctorNoteImageType, doctorNoteImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert DoctorNoteImage")
	}

	if !cached {
		doctorNoteImageUpsertCacheMut.Lock()
		doctorNoteImageUpsertCache[key] = cache
		doctorNoteImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DoctorNoteImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DoctorNoteImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DoctorNoteImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doctorNoteImagePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[DoctorNoteImage] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from DoctorNoteImage")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for DoctorNoteImage")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doctorNoteImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doctorNoteImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from DoctorNoteImage")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteImage")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoctorNoteImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doctorNoteImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[DoctorNoteImage] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doctorNoteImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteImage")
	}

	if len(doctorNoteImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DoctorNoteImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoctorNoteImage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoctorNoteImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoctorNoteImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[DoctorNoteImage].* FROM [dbo].[DoctorNoteImage] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoctorNoteImageSlice")
	}

	*o = slice

	return nil
}

// DoctorNoteImageExists checks if the DoctorNoteImage row exists.
func DoctorNoteImageExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[DoctorNoteImage] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if DoctorNoteImage exists")
	}

	return exists, nil
}
