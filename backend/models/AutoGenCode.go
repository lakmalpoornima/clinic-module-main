// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AutoGenCode is an object representing the database table.
type AutoGenCode struct {
	DocCode     string    `boil:"DocCode" json:"DocCode" toml:"DocCode" yaml:"DocCode"`
	CompanyCode string    `boil:"CompanyCode" json:"CompanyCode" toml:"CompanyCode" yaml:"CompanyCode"`
	Prefix      string    `boil:"Prefix" json:"Prefix" toml:"Prefix" yaml:"Prefix"`
	NextNo      int       `boil:"NextNo" json:"NextNo" toml:"NextNo" yaml:"NextNo"`
	DtpDate     time.Time `boil:"dtpDate" json:"dtpDate" toml:"dtpDate" yaml:"dtpDate"`
	LastGenCode string    `boil:"LastGenCode" json:"LastGenCode" toml:"LastGenCode" yaml:"LastGenCode"`

	R *autoGenCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L autoGenCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AutoGenCodeColumns = struct {
	DocCode     string
	CompanyCode string
	Prefix      string
	NextNo      string
	DtpDate     string
	LastGenCode string
}{
	DocCode:     "DocCode",
	CompanyCode: "CompanyCode",
	Prefix:      "Prefix",
	NextNo:      "NextNo",
	DtpDate:     "dtpDate",
	LastGenCode: "LastGenCode",
}

var AutoGenCodeTableColumns = struct {
	DocCode     string
	CompanyCode string
	Prefix      string
	NextNo      string
	DtpDate     string
	LastGenCode string
}{
	DocCode:     "AutoGenCode.DocCode",
	CompanyCode: "AutoGenCode.CompanyCode",
	Prefix:      "AutoGenCode.Prefix",
	NextNo:      "AutoGenCode.NextNo",
	DtpDate:     "AutoGenCode.dtpDate",
	LastGenCode: "AutoGenCode.LastGenCode",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AutoGenCodeWhere = struct {
	DocCode     whereHelperstring
	CompanyCode whereHelperstring
	Prefix      whereHelperstring
	NextNo      whereHelperint
	DtpDate     whereHelpertime_Time
	LastGenCode whereHelperstring
}{
	DocCode:     whereHelperstring{field: "[dbo].[AutoGenCode].[DocCode]"},
	CompanyCode: whereHelperstring{field: "[dbo].[AutoGenCode].[CompanyCode]"},
	Prefix:      whereHelperstring{field: "[dbo].[AutoGenCode].[Prefix]"},
	NextNo:      whereHelperint{field: "[dbo].[AutoGenCode].[NextNo]"},
	DtpDate:     whereHelpertime_Time{field: "[dbo].[AutoGenCode].[dtpDate]"},
	LastGenCode: whereHelperstring{field: "[dbo].[AutoGenCode].[LastGenCode]"},
}

// AutoGenCodeRels is where relationship names are stored.
var AutoGenCodeRels = struct {
}{}

// autoGenCodeR is where relationships are stored.
type autoGenCodeR struct {
}

// NewStruct creates a new relationship struct
func (*autoGenCodeR) NewStruct() *autoGenCodeR {
	return &autoGenCodeR{}
}

// autoGenCodeL is where Load methods for each relationship are stored.
type autoGenCodeL struct{}

var (
	autoGenCodeAllColumns            = []string{"DocCode", "CompanyCode", "Prefix", "NextNo", "dtpDate", "LastGenCode"}
	autoGenCodeColumnsWithAuto       = []string{}
	autoGenCodeColumnsWithoutDefault = []string{}
	autoGenCodeColumnsWithDefault    = []string{"DocCode", "CompanyCode", "Prefix", "NextNo", "dtpDate", "LastGenCode"}
	autoGenCodePrimaryKeyColumns     = []string{"DocCode", "CompanyCode"}
)

type (
	// AutoGenCodeSlice is an alias for a slice of pointers to AutoGenCode.
	// This should almost always be used instead of []AutoGenCode.
	AutoGenCodeSlice []*AutoGenCode
	// AutoGenCodeHook is the signature for custom AutoGenCode hook methods
	AutoGenCodeHook func(context.Context, boil.ContextExecutor, *AutoGenCode) error

	autoGenCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	autoGenCodeType                 = reflect.TypeOf(&AutoGenCode{})
	autoGenCodeMapping              = queries.MakeStructMapping(autoGenCodeType)
	autoGenCodePrimaryKeyMapping, _ = queries.BindMapping(autoGenCodeType, autoGenCodeMapping, autoGenCodePrimaryKeyColumns)
	autoGenCodeInsertCacheMut       sync.RWMutex
	autoGenCodeInsertCache          = make(map[string]insertCache)
	autoGenCodeUpdateCacheMut       sync.RWMutex
	autoGenCodeUpdateCache          = make(map[string]updateCache)
	autoGenCodeUpsertCacheMut       sync.RWMutex
	autoGenCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var autoGenCodeBeforeInsertHooks []AutoGenCodeHook
var autoGenCodeBeforeUpdateHooks []AutoGenCodeHook
var autoGenCodeBeforeDeleteHooks []AutoGenCodeHook
var autoGenCodeBeforeUpsertHooks []AutoGenCodeHook

var autoGenCodeAfterInsertHooks []AutoGenCodeHook
var autoGenCodeAfterSelectHooks []AutoGenCodeHook
var autoGenCodeAfterUpdateHooks []AutoGenCodeHook
var autoGenCodeAfterDeleteHooks []AutoGenCodeHook
var autoGenCodeAfterUpsertHooks []AutoGenCodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AutoGenCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoGenCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AutoGenCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoGenCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AutoGenCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoGenCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AutoGenCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoGenCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AutoGenCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoGenCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AutoGenCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoGenCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AutoGenCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoGenCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AutoGenCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoGenCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AutoGenCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range autoGenCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAutoGenCodeHook registers your hook function for all future operations.
func AddAutoGenCodeHook(hookPoint boil.HookPoint, autoGenCodeHook AutoGenCodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		autoGenCodeBeforeInsertHooks = append(autoGenCodeBeforeInsertHooks, autoGenCodeHook)
	case boil.BeforeUpdateHook:
		autoGenCodeBeforeUpdateHooks = append(autoGenCodeBeforeUpdateHooks, autoGenCodeHook)
	case boil.BeforeDeleteHook:
		autoGenCodeBeforeDeleteHooks = append(autoGenCodeBeforeDeleteHooks, autoGenCodeHook)
	case boil.BeforeUpsertHook:
		autoGenCodeBeforeUpsertHooks = append(autoGenCodeBeforeUpsertHooks, autoGenCodeHook)
	case boil.AfterInsertHook:
		autoGenCodeAfterInsertHooks = append(autoGenCodeAfterInsertHooks, autoGenCodeHook)
	case boil.AfterSelectHook:
		autoGenCodeAfterSelectHooks = append(autoGenCodeAfterSelectHooks, autoGenCodeHook)
	case boil.AfterUpdateHook:
		autoGenCodeAfterUpdateHooks = append(autoGenCodeAfterUpdateHooks, autoGenCodeHook)
	case boil.AfterDeleteHook:
		autoGenCodeAfterDeleteHooks = append(autoGenCodeAfterDeleteHooks, autoGenCodeHook)
	case boil.AfterUpsertHook:
		autoGenCodeAfterUpsertHooks = append(autoGenCodeAfterUpsertHooks, autoGenCodeHook)
	}
}

// One returns a single autoGenCode record from the query.
func (q autoGenCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AutoGenCode, error) {
	o := &AutoGenCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AutoGenCode")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AutoGenCode records from the query.
func (q autoGenCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AutoGenCodeSlice, error) {
	var o []*AutoGenCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AutoGenCode slice")
	}

	if len(autoGenCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AutoGenCode records in the query.
func (q autoGenCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AutoGenCode rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q autoGenCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AutoGenCode exists")
	}

	return count > 0, nil
}

// AutoGenCodes retrieves all the records using an executor.
func AutoGenCodes(mods ...qm.QueryMod) autoGenCodeQuery {
	mods = append(mods, qm.From("[dbo].[AutoGenCode]"))
	return autoGenCodeQuery{NewQuery(mods...)}
}

// FindAutoGenCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAutoGenCode(ctx context.Context, exec boil.ContextExecutor, docCode string, companyCode string, selectCols ...string) (*AutoGenCode, error) {
	autoGenCodeObj := &AutoGenCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[AutoGenCode] where [DocCode]=$1 AND [CompanyCode]=$2", sel,
	)

	q := queries.Raw(query, docCode, companyCode)

	err := q.Bind(ctx, exec, autoGenCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AutoGenCode")
	}

	if err = autoGenCodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return autoGenCodeObj, err
	}

	return autoGenCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AutoGenCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AutoGenCode provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoGenCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	autoGenCodeInsertCacheMut.RLock()
	cache, cached := autoGenCodeInsertCache[key]
	autoGenCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			autoGenCodeAllColumns,
			autoGenCodeColumnsWithDefault,
			autoGenCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(autoGenCodeType, autoGenCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(autoGenCodeType, autoGenCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[AutoGenCode] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[AutoGenCode] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AutoGenCode")
	}

	if !cached {
		autoGenCodeInsertCacheMut.Lock()
		autoGenCodeInsertCache[key] = cache
		autoGenCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AutoGenCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AutoGenCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	autoGenCodeUpdateCacheMut.RLock()
	cache, cached := autoGenCodeUpdateCache[key]
	autoGenCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			autoGenCodeAllColumns,
			autoGenCodePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, autoGenCodeColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AutoGenCode, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[AutoGenCode] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, autoGenCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(autoGenCodeType, autoGenCodeMapping, append(wl, autoGenCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AutoGenCode row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AutoGenCode")
	}

	if !cached {
		autoGenCodeUpdateCacheMut.Lock()
		autoGenCodeUpdateCache[key] = cache
		autoGenCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q autoGenCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AutoGenCode")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AutoGenCode")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AutoGenCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoGenCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[AutoGenCode] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, autoGenCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in autoGenCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all autoGenCode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AutoGenCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AutoGenCode provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(autoGenCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	autoGenCodeUpsertCacheMut.RLock()
	cache, cached := autoGenCodeUpsertCache[key]
	autoGenCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			autoGenCodeAllColumns,
			autoGenCodeColumnsWithDefault,
			autoGenCodeColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, autoGenCodeColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(autoGenCodePrimaryKeyColumns, v) && strmangle.ContainsAny(autoGenCodeColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert AutoGenCode, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, autoGenCodeColumnsWithAuto)
		ret = strmangle.SetMerge(ret, autoGenCodeColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			autoGenCodeAllColumns,
			autoGenCodePrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, autoGenCodeColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert AutoGenCode, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[AutoGenCode]", autoGenCodePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(autoGenCodePrimaryKeyColumns))
		copy(whitelist, autoGenCodePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(autoGenCodeType, autoGenCodeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(autoGenCodeType, autoGenCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert AutoGenCode")
	}

	if !cached {
		autoGenCodeUpsertCacheMut.Lock()
		autoGenCodeUpsertCache[key] = cache
		autoGenCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AutoGenCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AutoGenCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AutoGenCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), autoGenCodePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[AutoGenCode] WHERE [DocCode]=$1 AND [CompanyCode]=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AutoGenCode")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AutoGenCode")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q autoGenCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no autoGenCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AutoGenCode")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AutoGenCode")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AutoGenCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(autoGenCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoGenCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[AutoGenCode] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autoGenCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from autoGenCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AutoGenCode")
	}

	if len(autoGenCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AutoGenCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAutoGenCode(ctx, exec, o.DocCode, o.CompanyCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AutoGenCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AutoGenCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), autoGenCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[AutoGenCode].* FROM [dbo].[AutoGenCode] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, autoGenCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AutoGenCodeSlice")
	}

	*o = slice

	return nil
}

// AutoGenCodeExists checks if the AutoGenCode row exists.
func AutoGenCodeExists(ctx context.Context, exec boil.ContextExecutor, docCode string, companyCode string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[AutoGenCode] where [DocCode]=$1 AND [CompanyCode]=$2) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, docCode, companyCode)
	}
	row := exec.QueryRowContext(ctx, sql, docCode, companyCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AutoGenCode exists")
	}

	return exists, nil
}
