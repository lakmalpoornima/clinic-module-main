// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PatientBioLoadItem is an object representing the database table.
type PatientBioLoadItem struct {
	ID          int    `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	ItemCode    string `boil:"ItemCode" json:"ItemCode" toml:"ItemCode" yaml:"ItemCode"`
	ElementCode string `boil:"ElementCode" json:"ElementCode" toml:"ElementCode" yaml:"ElementCode"`
	Name        string `boil:"Name" json:"Name" toml:"Name" yaml:"Name"`
	Type        string `boil:"Type" json:"Type" toml:"Type" yaml:"Type"`

	R *patientBioLoadItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L patientBioLoadItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PatientBioLoadItemColumns = struct {
	ID          string
	ItemCode    string
	ElementCode string
	Name        string
	Type        string
}{
	ID:          "Id",
	ItemCode:    "ItemCode",
	ElementCode: "ElementCode",
	Name:        "Name",
	Type:        "Type",
}

var PatientBioLoadItemTableColumns = struct {
	ID          string
	ItemCode    string
	ElementCode string
	Name        string
	Type        string
}{
	ID:          "PatientBioLoadItem.Id",
	ItemCode:    "PatientBioLoadItem.ItemCode",
	ElementCode: "PatientBioLoadItem.ElementCode",
	Name:        "PatientBioLoadItem.Name",
	Type:        "PatientBioLoadItem.Type",
}

// Generated where

var PatientBioLoadItemWhere = struct {
	ID          whereHelperint
	ItemCode    whereHelperstring
	ElementCode whereHelperstring
	Name        whereHelperstring
	Type        whereHelperstring
}{
	ID:          whereHelperint{field: "[dbo].[PatientBioLoadItem].[Id]"},
	ItemCode:    whereHelperstring{field: "[dbo].[PatientBioLoadItem].[ItemCode]"},
	ElementCode: whereHelperstring{field: "[dbo].[PatientBioLoadItem].[ElementCode]"},
	Name:        whereHelperstring{field: "[dbo].[PatientBioLoadItem].[Name]"},
	Type:        whereHelperstring{field: "[dbo].[PatientBioLoadItem].[Type]"},
}

// PatientBioLoadItemRels is where relationship names are stored.
var PatientBioLoadItemRels = struct {
}{}

// patientBioLoadItemR is where relationships are stored.
type patientBioLoadItemR struct {
}

// NewStruct creates a new relationship struct
func (*patientBioLoadItemR) NewStruct() *patientBioLoadItemR {
	return &patientBioLoadItemR{}
}

// patientBioLoadItemL is where Load methods for each relationship are stored.
type patientBioLoadItemL struct{}

var (
	patientBioLoadItemAllColumns            = []string{"Id", "ItemCode", "ElementCode", "Name", "Type"}
	patientBioLoadItemColumnsWithAuto       = []string{}
	patientBioLoadItemColumnsWithoutDefault = []string{}
	patientBioLoadItemColumnsWithDefault    = []string{"Id", "ItemCode", "ElementCode", "Name", "Type"}
	patientBioLoadItemPrimaryKeyColumns     = []string{"Id"}
)

type (
	// PatientBioLoadItemSlice is an alias for a slice of pointers to PatientBioLoadItem.
	// This should almost always be used instead of []PatientBioLoadItem.
	PatientBioLoadItemSlice []*PatientBioLoadItem
	// PatientBioLoadItemHook is the signature for custom PatientBioLoadItem hook methods
	PatientBioLoadItemHook func(context.Context, boil.ContextExecutor, *PatientBioLoadItem) error

	patientBioLoadItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	patientBioLoadItemType                 = reflect.TypeOf(&PatientBioLoadItem{})
	patientBioLoadItemMapping              = queries.MakeStructMapping(patientBioLoadItemType)
	patientBioLoadItemPrimaryKeyMapping, _ = queries.BindMapping(patientBioLoadItemType, patientBioLoadItemMapping, patientBioLoadItemPrimaryKeyColumns)
	patientBioLoadItemInsertCacheMut       sync.RWMutex
	patientBioLoadItemInsertCache          = make(map[string]insertCache)
	patientBioLoadItemUpdateCacheMut       sync.RWMutex
	patientBioLoadItemUpdateCache          = make(map[string]updateCache)
	patientBioLoadItemUpsertCacheMut       sync.RWMutex
	patientBioLoadItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var patientBioLoadItemBeforeInsertHooks []PatientBioLoadItemHook
var patientBioLoadItemBeforeUpdateHooks []PatientBioLoadItemHook
var patientBioLoadItemBeforeDeleteHooks []PatientBioLoadItemHook
var patientBioLoadItemBeforeUpsertHooks []PatientBioLoadItemHook

var patientBioLoadItemAfterInsertHooks []PatientBioLoadItemHook
var patientBioLoadItemAfterSelectHooks []PatientBioLoadItemHook
var patientBioLoadItemAfterUpdateHooks []PatientBioLoadItemHook
var patientBioLoadItemAfterDeleteHooks []PatientBioLoadItemHook
var patientBioLoadItemAfterUpsertHooks []PatientBioLoadItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PatientBioLoadItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBioLoadItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PatientBioLoadItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBioLoadItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PatientBioLoadItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBioLoadItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PatientBioLoadItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBioLoadItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PatientBioLoadItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBioLoadItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PatientBioLoadItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBioLoadItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PatientBioLoadItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBioLoadItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PatientBioLoadItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBioLoadItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PatientBioLoadItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBioLoadItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPatientBioLoadItemHook registers your hook function for all future operations.
func AddPatientBioLoadItemHook(hookPoint boil.HookPoint, patientBioLoadItemHook PatientBioLoadItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		patientBioLoadItemBeforeInsertHooks = append(patientBioLoadItemBeforeInsertHooks, patientBioLoadItemHook)
	case boil.BeforeUpdateHook:
		patientBioLoadItemBeforeUpdateHooks = append(patientBioLoadItemBeforeUpdateHooks, patientBioLoadItemHook)
	case boil.BeforeDeleteHook:
		patientBioLoadItemBeforeDeleteHooks = append(patientBioLoadItemBeforeDeleteHooks, patientBioLoadItemHook)
	case boil.BeforeUpsertHook:
		patientBioLoadItemBeforeUpsertHooks = append(patientBioLoadItemBeforeUpsertHooks, patientBioLoadItemHook)
	case boil.AfterInsertHook:
		patientBioLoadItemAfterInsertHooks = append(patientBioLoadItemAfterInsertHooks, patientBioLoadItemHook)
	case boil.AfterSelectHook:
		patientBioLoadItemAfterSelectHooks = append(patientBioLoadItemAfterSelectHooks, patientBioLoadItemHook)
	case boil.AfterUpdateHook:
		patientBioLoadItemAfterUpdateHooks = append(patientBioLoadItemAfterUpdateHooks, patientBioLoadItemHook)
	case boil.AfterDeleteHook:
		patientBioLoadItemAfterDeleteHooks = append(patientBioLoadItemAfterDeleteHooks, patientBioLoadItemHook)
	case boil.AfterUpsertHook:
		patientBioLoadItemAfterUpsertHooks = append(patientBioLoadItemAfterUpsertHooks, patientBioLoadItemHook)
	}
}

// One returns a single patientBioLoadItem record from the query.
func (q patientBioLoadItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PatientBioLoadItem, error) {
	o := &PatientBioLoadItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PatientBioLoadItem")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PatientBioLoadItem records from the query.
func (q patientBioLoadItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (PatientBioLoadItemSlice, error) {
	var o []*PatientBioLoadItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PatientBioLoadItem slice")
	}

	if len(patientBioLoadItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PatientBioLoadItem records in the query.
func (q patientBioLoadItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PatientBioLoadItem rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q patientBioLoadItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PatientBioLoadItem exists")
	}

	return count > 0, nil
}

// PatientBioLoadItems retrieves all the records using an executor.
func PatientBioLoadItems(mods ...qm.QueryMod) patientBioLoadItemQuery {
	mods = append(mods, qm.From("[dbo].[PatientBioLoadItem]"))
	return patientBioLoadItemQuery{NewQuery(mods...)}
}

// FindPatientBioLoadItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPatientBioLoadItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PatientBioLoadItem, error) {
	patientBioLoadItemObj := &PatientBioLoadItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[PatientBioLoadItem] where [Id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, patientBioLoadItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PatientBioLoadItem")
	}

	if err = patientBioLoadItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return patientBioLoadItemObj, err
	}

	return patientBioLoadItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PatientBioLoadItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PatientBioLoadItem provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patientBioLoadItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	patientBioLoadItemInsertCacheMut.RLock()
	cache, cached := patientBioLoadItemInsertCache[key]
	patientBioLoadItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			patientBioLoadItemAllColumns,
			patientBioLoadItemColumnsWithDefault,
			patientBioLoadItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(patientBioLoadItemType, patientBioLoadItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(patientBioLoadItemType, patientBioLoadItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[PatientBioLoadItem] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[PatientBioLoadItem] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PatientBioLoadItem")
	}

	if !cached {
		patientBioLoadItemInsertCacheMut.Lock()
		patientBioLoadItemInsertCache[key] = cache
		patientBioLoadItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PatientBioLoadItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PatientBioLoadItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	patientBioLoadItemUpdateCacheMut.RLock()
	cache, cached := patientBioLoadItemUpdateCache[key]
	patientBioLoadItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			patientBioLoadItemAllColumns,
			patientBioLoadItemPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, patientBioLoadItemColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PatientBioLoadItem, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[PatientBioLoadItem] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, patientBioLoadItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(patientBioLoadItemType, patientBioLoadItemMapping, append(wl, patientBioLoadItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PatientBioLoadItem row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PatientBioLoadItem")
	}

	if !cached {
		patientBioLoadItemUpdateCacheMut.Lock()
		patientBioLoadItemUpdateCache[key] = cache
		patientBioLoadItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q patientBioLoadItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PatientBioLoadItem")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PatientBioLoadItem")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PatientBioLoadItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientBioLoadItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[PatientBioLoadItem] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, patientBioLoadItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in patientBioLoadItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all patientBioLoadItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *PatientBioLoadItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PatientBioLoadItem provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patientBioLoadItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	patientBioLoadItemUpsertCacheMut.RLock()
	cache, cached := patientBioLoadItemUpsertCache[key]
	patientBioLoadItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			patientBioLoadItemAllColumns,
			patientBioLoadItemColumnsWithDefault,
			patientBioLoadItemColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, patientBioLoadItemColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(patientBioLoadItemPrimaryKeyColumns, v) && strmangle.ContainsAny(patientBioLoadItemColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert PatientBioLoadItem, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, patientBioLoadItemColumnsWithAuto)
		ret = strmangle.SetMerge(ret, patientBioLoadItemColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			patientBioLoadItemAllColumns,
			patientBioLoadItemPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, patientBioLoadItemColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert PatientBioLoadItem, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[PatientBioLoadItem]", patientBioLoadItemPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(patientBioLoadItemPrimaryKeyColumns))
		copy(whitelist, patientBioLoadItemPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(patientBioLoadItemType, patientBioLoadItemMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(patientBioLoadItemType, patientBioLoadItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert PatientBioLoadItem")
	}

	if !cached {
		patientBioLoadItemUpsertCacheMut.Lock()
		patientBioLoadItemUpsertCache[key] = cache
		patientBioLoadItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PatientBioLoadItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PatientBioLoadItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PatientBioLoadItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), patientBioLoadItemPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[PatientBioLoadItem] WHERE [Id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PatientBioLoadItem")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PatientBioLoadItem")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q patientBioLoadItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no patientBioLoadItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PatientBioLoadItem")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PatientBioLoadItem")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PatientBioLoadItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(patientBioLoadItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientBioLoadItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[PatientBioLoadItem] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patientBioLoadItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patientBioLoadItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PatientBioLoadItem")
	}

	if len(patientBioLoadItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PatientBioLoadItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPatientBioLoadItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PatientBioLoadItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PatientBioLoadItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientBioLoadItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[PatientBioLoadItem].* FROM [dbo].[PatientBioLoadItem] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patientBioLoadItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PatientBioLoadItemSlice")
	}

	*o = slice

	return nil
}

// PatientBioLoadItemExists checks if the PatientBioLoadItem row exists.
func PatientBioLoadItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[PatientBioLoadItem] where [Id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PatientBioLoadItem exists")
	}

	return exists, nil
}
