// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DoctorNoteFootcare is an object representing the database table.
type DoctorNoteFootcare struct {
	ID                        int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	CompanyCode               string      `boil:"CompanyCode" json:"CompanyCode" toml:"CompanyCode" yaml:"CompanyCode"`
	DocumentID                null.String `boil:"DocumentID" json:"DocumentID,omitempty" toml:"DocumentID" yaml:"DocumentID,omitempty"`
	DMType                    string      `boil:"DMType" json:"DMType" toml:"DMType" yaml:"DMType"`
	DMTypeDuration            null.String `boil:"DMTypeDuration" json:"DMTypeDuration,omitempty" toml:"DMTypeDuration" yaml:"DMTypeDuration,omitempty"`
	Treatment                 string      `boil:"Treatment" json:"Treatment" toml:"Treatment" yaml:"Treatment"`
	HBA1C                     string      `boil:"HbA1c" json:"HbA1c" toml:"HbA1c" yaml:"HbA1c"`
	ImpairedVision            string      `boil:"ImpairedVision" json:"ImpairedVision" toml:"ImpairedVision" yaml:"ImpairedVision"`
	Smoking                   string      `boil:"Smoking" json:"Smoking" toml:"Smoking" yaml:"Smoking"`
	Other                     string      `boil:"Other" json:"Other" toml:"Other" yaml:"Other"`
	SNDrySkinRight            bool        `boil:"SNDrySkinRight" json:"SNDrySkinRight" toml:"SNDrySkinRight" yaml:"SNDrySkinRight"`
	SNDrySkinLeft             bool        `boil:"SNDrySkinLeft" json:"SNDrySkinLeft" toml:"SNDrySkinLeft" yaml:"SNDrySkinLeft"`
	SNCallusCornsRight        bool        `boil:"SNCallusCornsRight" json:"SNCallusCornsRight" toml:"SNCallusCornsRight" yaml:"SNCallusCornsRight"`
	SNCallusCornsLeft         bool        `boil:"SNCallusCornsLeft" json:"SNCallusCornsLeft" toml:"SNCallusCornsLeft" yaml:"SNCallusCornsLeft"`
	SNFissuresCracksRight     bool        `boil:"SNFissuresCracksRight" json:"SNFissuresCracksRight" toml:"SNFissuresCracksRight" yaml:"SNFissuresCracksRight"`
	SNFissuresCracksLeft      bool        `boil:"SNFissuresCracksLeft" json:"SNFissuresCracksLeft" toml:"SNFissuresCracksLeft" yaml:"SNFissuresCracksLeft"`
	SNWebSpaceInfectionRight  bool        `boil:"SNWebSpaceInfectionRight" json:"SNWebSpaceInfectionRight" toml:"SNWebSpaceInfectionRight" yaml:"SNWebSpaceInfectionRight"`
	SNWebSpaceInfectionLeft   bool        `boil:"SNWebSpaceInfectionLeft" json:"SNWebSpaceInfectionLeft" toml:"SNWebSpaceInfectionLeft" yaml:"SNWebSpaceInfectionLeft"`
	SNNailBedInfectionRight   bool        `boil:"SNNailBedInfectionRight" json:"SNNailBedInfectionRight" toml:"SNNailBedInfectionRight" yaml:"SNNailBedInfectionRight"`
	SNNailBedInfectionLeft    bool        `boil:"SNNailBedInfectionLeft" json:"SNNailBedInfectionLeft" toml:"SNNailBedInfectionLeft" yaml:"SNNailBedInfectionLeft"`
	SNInGrowingToeNailsRight  bool        `boil:"SNInGrowingToeNailsRight" json:"SNInGrowingToeNailsRight" toml:"SNInGrowingToeNailsRight" yaml:"SNInGrowingToeNailsRight"`
	SNInGrowingToeNailsLeft   bool        `boil:"SNInGrowingToeNailsLeft" json:"SNInGrowingToeNailsLeft" toml:"SNInGrowingToeNailsLeft" yaml:"SNInGrowingToeNailsLeft"`
	HammerToesRight           bool        `boil:"HammerToesRight" json:"HammerToesRight" toml:"HammerToesRight" yaml:"HammerToesRight"`
	HammerToesLeft            bool        `boil:"HammerToesLeft" json:"HammerToesLeft" toml:"HammerToesLeft" yaml:"HammerToesLeft"`
	ReducedAnkleReflexRight   bool        `boil:"ReducedAnkleReflexRight" json:"ReducedAnkleReflexRight" toml:"ReducedAnkleReflexRight" yaml:"ReducedAnkleReflexRight"`
	ReducedAnkleReflexLeft    bool        `boil:"ReducedAnkleReflexLeft" json:"ReducedAnkleReflexLeft" toml:"ReducedAnkleReflexLeft" yaml:"ReducedAnkleReflexLeft"`
	ClawtoesRight             bool        `boil:"ClawtoesRight" json:"ClawtoesRight" toml:"ClawtoesRight" yaml:"ClawtoesRight"`
	ClawtoesLeft              bool        `boil:"ClawtoesLeft" json:"ClawtoesLeft" toml:"ClawtoesLeft" yaml:"ClawtoesLeft"`
	OLDRight                  bool        `boil:"OLDRight" json:"OLDRight" toml:"OLDRight" yaml:"OLDRight"`
	OLDLeft                   bool        `boil:"OLDLeft" json:"OLDLeft" toml:"OLDLeft" yaml:"OLDLeft"`
	PositiveMonofilamentRight bool        `boil:"PositiveMonofilamentRight" json:"PositiveMonofilamentRight" toml:"PositiveMonofilamentRight" yaml:"PositiveMonofilamentRight"`
	PositiveMonofilamentLeft  bool        `boil:"PositiveMonofilamentLeft" json:"PositiveMonofilamentLeft" toml:"PositiveMonofilamentLeft" yaml:"PositiveMonofilamentLeft"`
	BunionRight               bool        `boil:"BunionRight" json:"BunionRight" toml:"BunionRight" yaml:"BunionRight"`
	BunionLeft                bool        `boil:"BunionLeft" json:"BunionLeft" toml:"BunionLeft" yaml:"BunionLeft"`
	ADRight                   bool        `boil:"ADRight" json:"ADRight" toml:"ADRight" yaml:"ADRight"`
	ADLeft                    bool        `boil:"ADLeft" json:"ADLeft" toml:"ADLeft" yaml:"ADLeft"`
	ABTRight                  bool        `boil:"ABTRight" json:"ABTRight" toml:"ABTRight" yaml:"ABTRight"`
	ABTLeft                   bool        `boil:"ABTLeft" json:"ABTLeft" toml:"ABTLeft" yaml:"ABTLeft"`
	ADPRight                  bool        `boil:"ADPRight" json:"ADPRight" toml:"ADPRight" yaml:"ADPRight"`
	ADPLeft                   bool        `boil:"ADPLeft" json:"ADPLeft" toml:"ADPLeft" yaml:"ADPLeft"`
	PreviousUlcerationRight   bool        `boil:"PreviousUlcerationRight" json:"PreviousUlcerationRight" toml:"PreviousUlcerationRight" yaml:"PreviousUlcerationRight"`
	PreviousUlcerationLeft    bool        `boil:"PreviousUlcerationLeft" json:"PreviousUlcerationLeft" toml:"PreviousUlcerationLeft" yaml:"PreviousUlcerationLeft"`
	APTRight                  bool        `boil:"APTRight" json:"APTRight" toml:"APTRight" yaml:"APTRight"`
	APTLeft                   bool        `boil:"APTLeft" json:"APTLeft" toml:"APTLeft" yaml:"APTLeft"`
	PreviousAmputationRight   bool        `boil:"PreviousAmputationRight" json:"PreviousAmputationRight" toml:"PreviousAmputationRight" yaml:"PreviousAmputationRight"`
	PreviousAmputationLeft    bool        `boil:"PreviousAmputationLeft" json:"PreviousAmputationLeft" toml:"PreviousAmputationLeft" yaml:"PreviousAmputationLeft"`
	AbplR                     string      `boil:"abplR" json:"abplR" toml:"abplR" yaml:"abplR"`
	AbplL                     string      `boil:"abplL" json:"abplL" toml:"abplL" yaml:"abplL"`
	Specify                   string      `boil:"Specify" json:"Specify" toml:"Specify" yaml:"Specify"`
	IFAPTRight                bool        `boil:"IFAPTRight" json:"IFAPTRight" toml:"IFAPTRight" yaml:"IFAPTRight"`
	IFAPTLeft                 bool        `boil:"IFAPTLeft" json:"IFAPTLeft" toml:"IFAPTLeft" yaml:"IFAPTLeft"`
	ORRTRight                 bool        `boil:"ORRTRight" json:"ORRTRight" toml:"ORRTRight" yaml:"ORRTRight"`
	ORRTLeft                  bool        `boil:"ORRTLeft" json:"ORRTLeft" toml:"ORRTLeft" yaml:"ORRTLeft"`
	VasAnuR                   bool        `boil:"VasAnuR" json:"VasAnuR" toml:"VasAnuR" yaml:"VasAnuR"`
	VasAnuL                   bool        `boil:"VasAnuL" json:"VasAnuL" toml:"VasAnuL" yaml:"VasAnuL"`
	VasSixL                   bool        `boil:"VasSixL" json:"VasSixL" toml:"VasSixL" yaml:"VasSixL"`
	VasSixR                   bool        `boil:"VasSixR" json:"VasSixR" toml:"VasSixR" yaml:"VasSixR"`
	VasThreeL                 bool        `boil:"VasThreeL" json:"VasThreeL" toml:"VasThreeL" yaml:"VasThreeL"`
	VasThreeR                 bool        `boil:"VasThreeR" json:"VasThreeR" toml:"VasThreeR" yaml:"VasThreeR"`
	CellulitesR               bool        `boil:"CellulitesR" json:"CellulitesR" toml:"CellulitesR" yaml:"CellulitesR"`
	CellulitesL               bool        `boil:"CellulitesL" json:"CellulitesL" toml:"CellulitesL" yaml:"CellulitesL"`
	GangreneR                 bool        `boil:"GangreneR" json:"GangreneR" toml:"GangreneR" yaml:"GangreneR"`
	GangreneL                 bool        `boil:"GangreneL" json:"GangreneL" toml:"GangreneL" yaml:"GangreneL"`
	AcuteUlcerR               bool        `boil:"AcuteUlcerR" json:"AcuteUlcerR" toml:"AcuteUlcerR" yaml:"AcuteUlcerR"`
	AcuteUlcerL               bool        `boil:"AcuteUlcerL" json:"AcuteUlcerL" toml:"AcuteUlcerL" yaml:"AcuteUlcerL"`
	AcuteCharcotR             bool        `boil:"AcuteCharcotR" json:"AcuteCharcotR" toml:"AcuteCharcotR" yaml:"AcuteCharcotR"`
	AcuteCharcotL             bool        `boil:"AcuteCharcotL" json:"AcuteCharcotL" toml:"AcuteCharcotL" yaml:"AcuteCharcotL"`
	SepsisR                   bool        `boil:"SepsisR" json:"SepsisR" toml:"SepsisR" yaml:"SepsisR"`
	SepsisL                   bool        `boil:"SepsisL" json:"SepsisL" toml:"SepsisL" yaml:"SepsisL"`
	ADFOtherR                 bool        `boil:"ADFOtherR" json:"ADFOtherR" toml:"ADFOtherR" yaml:"ADFOtherR"`
	ADFOtherL                 bool        `boil:"ADFOtherL" json:"ADFOtherL" toml:"ADFOtherL" yaml:"ADFOtherL"`
	SFHRight                  bool        `boil:"SFHRight" json:"SFHRight" toml:"SFHRight" yaml:"SFHRight"`
	SFHLeft                   bool        `boil:"SFHLeft" json:"SFHLeft" toml:"SFHLeft" yaml:"SFHLeft"`
	EducationReceivedR        bool        `boil:"EducationReceivedR" json:"EducationReceivedR" toml:"EducationReceivedR" yaml:"EducationReceivedR"`
	EducationReceivedL        bool        `boil:"EducationReceivedL" json:"EducationReceivedL" toml:"EducationReceivedL" yaml:"EducationReceivedL"`
	SARight                   bool        `boil:"SARight" json:"SARight" toml:"SARight" yaml:"SARight"`
	SALeft                    bool        `boil:"SALeft" json:"SALeft" toml:"SALeft" yaml:"SALeft"`
	AppropriateR              bool        `boil:"AppropriateR" json:"AppropriateR" toml:"AppropriateR" yaml:"AppropriateR"`
	AppropriateL              bool        `boil:"AppropriateL" json:"AppropriateL" toml:"AppropriateL" yaml:"AppropriateL"`
	NormalR                   bool        `boil:"NormalR" json:"NormalR" toml:"NormalR" yaml:"NormalR"`
	NormalL                   bool        `boil:"NormalL" json:"NormalL" toml:"NormalL" yaml:"NormalL"`
	DiabeticShoeR             bool        `boil:"DiabeticShoeR" json:"DiabeticShoeR" toml:"DiabeticShoeR" yaml:"DiabeticShoeR"`
	DiabeticShoeL             bool        `boil:"DiabeticShoeL" json:"DiabeticShoeL" toml:"DiabeticShoeL" yaml:"DiabeticShoeL"`
	ThereapeuticShoeR         bool        `boil:"ThereapeuticShoeR" json:"ThereapeuticShoeR" toml:"ThereapeuticShoeR" yaml:"ThereapeuticShoeR"`
	ThereapeuticShoeL         bool        `boil:"ThereapeuticShoeL" json:"ThereapeuticShoeL" toml:"ThereapeuticShoeL" yaml:"ThereapeuticShoeL"`
	DebridementOfCallus       bool        `boil:"DebridementOfCallus" json:"DebridementOfCallus" toml:"DebridementOfCallus" yaml:"DebridementOfCallus"`
	OffloadingShoe            bool        `boil:"OffloadingShoe" json:"OffloadingShoe" toml:"OffloadingShoe" yaml:"OffloadingShoe"`
	Medication                bool        `boil:"Medication" json:"Medication" toml:"Medication" yaml:"Medication"`
	Education                 bool        `boil:"Education" json:"Education" toml:"Education" yaml:"Education"`
	Physiotherapy             bool        `boil:"Physiotherapy" json:"Physiotherapy" toml:"Physiotherapy" yaml:"Physiotherapy"`
	AppropriateFootwear       bool        `boil:"AppropriateFootwear" json:"AppropriateFootwear" toml:"AppropriateFootwear" yaml:"AppropriateFootwear"`
	VascularClinic            bool        `boil:"VascularClinic" json:"VascularClinic" toml:"VascularClinic" yaml:"VascularClinic"`
	UlcerClinic               bool        `boil:"UlcerClinic" json:"UlcerClinic" toml:"UlcerClinic" yaml:"UlcerClinic"`
	Orthotist                 bool        `boil:"Orthotist" json:"Orthotist" toml:"Orthotist" yaml:"Orthotist"`
	RFOther                   bool        `boil:"RFOther" json:"RFOther" toml:"RFOther" yaml:"RFOther"`
	RegistrationNo            string      `boil:"RegistrationNo" json:"RegistrationNo" toml:"RegistrationNo" yaml:"RegistrationNo"`
	CreatedDate               time.Time   `boil:"CreatedDate" json:"CreatedDate" toml:"CreatedDate" yaml:"CreatedDate"`

	R *doctorNoteFootcareR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doctorNoteFootcareL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoctorNoteFootcareColumns = struct {
	ID                        string
	CompanyCode               string
	DocumentID                string
	DMType                    string
	DMTypeDuration            string
	Treatment                 string
	HBA1C                     string
	ImpairedVision            string
	Smoking                   string
	Other                     string
	SNDrySkinRight            string
	SNDrySkinLeft             string
	SNCallusCornsRight        string
	SNCallusCornsLeft         string
	SNFissuresCracksRight     string
	SNFissuresCracksLeft      string
	SNWebSpaceInfectionRight  string
	SNWebSpaceInfectionLeft   string
	SNNailBedInfectionRight   string
	SNNailBedInfectionLeft    string
	SNInGrowingToeNailsRight  string
	SNInGrowingToeNailsLeft   string
	HammerToesRight           string
	HammerToesLeft            string
	ReducedAnkleReflexRight   string
	ReducedAnkleReflexLeft    string
	ClawtoesRight             string
	ClawtoesLeft              string
	OLDRight                  string
	OLDLeft                   string
	PositiveMonofilamentRight string
	PositiveMonofilamentLeft  string
	BunionRight               string
	BunionLeft                string
	ADRight                   string
	ADLeft                    string
	ABTRight                  string
	ABTLeft                   string
	ADPRight                  string
	ADPLeft                   string
	PreviousUlcerationRight   string
	PreviousUlcerationLeft    string
	APTRight                  string
	APTLeft                   string
	PreviousAmputationRight   string
	PreviousAmputationLeft    string
	AbplR                     string
	AbplL                     string
	Specify                   string
	IFAPTRight                string
	IFAPTLeft                 string
	ORRTRight                 string
	ORRTLeft                  string
	VasAnuR                   string
	VasAnuL                   string
	VasSixL                   string
	VasSixR                   string
	VasThreeL                 string
	VasThreeR                 string
	CellulitesR               string
	CellulitesL               string
	GangreneR                 string
	GangreneL                 string
	AcuteUlcerR               string
	AcuteUlcerL               string
	AcuteCharcotR             string
	AcuteCharcotL             string
	SepsisR                   string
	SepsisL                   string
	ADFOtherR                 string
	ADFOtherL                 string
	SFHRight                  string
	SFHLeft                   string
	EducationReceivedR        string
	EducationReceivedL        string
	SARight                   string
	SALeft                    string
	AppropriateR              string
	AppropriateL              string
	NormalR                   string
	NormalL                   string
	DiabeticShoeR             string
	DiabeticShoeL             string
	ThereapeuticShoeR         string
	ThereapeuticShoeL         string
	DebridementOfCallus       string
	OffloadingShoe            string
	Medication                string
	Education                 string
	Physiotherapy             string
	AppropriateFootwear       string
	VascularClinic            string
	UlcerClinic               string
	Orthotist                 string
	RFOther                   string
	RegistrationNo            string
	CreatedDate               string
}{
	ID:                        "ID",
	CompanyCode:               "CompanyCode",
	DocumentID:                "DocumentID",
	DMType:                    "DMType",
	DMTypeDuration:            "DMTypeDuration",
	Treatment:                 "Treatment",
	HBA1C:                     "HbA1c",
	ImpairedVision:            "ImpairedVision",
	Smoking:                   "Smoking",
	Other:                     "Other",
	SNDrySkinRight:            "SNDrySkinRight",
	SNDrySkinLeft:             "SNDrySkinLeft",
	SNCallusCornsRight:        "SNCallusCornsRight",
	SNCallusCornsLeft:         "SNCallusCornsLeft",
	SNFissuresCracksRight:     "SNFissuresCracksRight",
	SNFissuresCracksLeft:      "SNFissuresCracksLeft",
	SNWebSpaceInfectionRight:  "SNWebSpaceInfectionRight",
	SNWebSpaceInfectionLeft:   "SNWebSpaceInfectionLeft",
	SNNailBedInfectionRight:   "SNNailBedInfectionRight",
	SNNailBedInfectionLeft:    "SNNailBedInfectionLeft",
	SNInGrowingToeNailsRight:  "SNInGrowingToeNailsRight",
	SNInGrowingToeNailsLeft:   "SNInGrowingToeNailsLeft",
	HammerToesRight:           "HammerToesRight",
	HammerToesLeft:            "HammerToesLeft",
	ReducedAnkleReflexRight:   "ReducedAnkleReflexRight",
	ReducedAnkleReflexLeft:    "ReducedAnkleReflexLeft",
	ClawtoesRight:             "ClawtoesRight",
	ClawtoesLeft:              "ClawtoesLeft",
	OLDRight:                  "OLDRight",
	OLDLeft:                   "OLDLeft",
	PositiveMonofilamentRight: "PositiveMonofilamentRight",
	PositiveMonofilamentLeft:  "PositiveMonofilamentLeft",
	BunionRight:               "BunionRight",
	BunionLeft:                "BunionLeft",
	ADRight:                   "ADRight",
	ADLeft:                    "ADLeft",
	ABTRight:                  "ABTRight",
	ABTLeft:                   "ABTLeft",
	ADPRight:                  "ADPRight",
	ADPLeft:                   "ADPLeft",
	PreviousUlcerationRight:   "PreviousUlcerationRight",
	PreviousUlcerationLeft:    "PreviousUlcerationLeft",
	APTRight:                  "APTRight",
	APTLeft:                   "APTLeft",
	PreviousAmputationRight:   "PreviousAmputationRight",
	PreviousAmputationLeft:    "PreviousAmputationLeft",
	AbplR:                     "abplR",
	AbplL:                     "abplL",
	Specify:                   "Specify",
	IFAPTRight:                "IFAPTRight",
	IFAPTLeft:                 "IFAPTLeft",
	ORRTRight:                 "ORRTRight",
	ORRTLeft:                  "ORRTLeft",
	VasAnuR:                   "VasAnuR",
	VasAnuL:                   "VasAnuL",
	VasSixL:                   "VasSixL",
	VasSixR:                   "VasSixR",
	VasThreeL:                 "VasThreeL",
	VasThreeR:                 "VasThreeR",
	CellulitesR:               "CellulitesR",
	CellulitesL:               "CellulitesL",
	GangreneR:                 "GangreneR",
	GangreneL:                 "GangreneL",
	AcuteUlcerR:               "AcuteUlcerR",
	AcuteUlcerL:               "AcuteUlcerL",
	AcuteCharcotR:             "AcuteCharcotR",
	AcuteCharcotL:             "AcuteCharcotL",
	SepsisR:                   "SepsisR",
	SepsisL:                   "SepsisL",
	ADFOtherR:                 "ADFOtherR",
	ADFOtherL:                 "ADFOtherL",
	SFHRight:                  "SFHRight",
	SFHLeft:                   "SFHLeft",
	EducationReceivedR:        "EducationReceivedR",
	EducationReceivedL:        "EducationReceivedL",
	SARight:                   "SARight",
	SALeft:                    "SALeft",
	AppropriateR:              "AppropriateR",
	AppropriateL:              "AppropriateL",
	NormalR:                   "NormalR",
	NormalL:                   "NormalL",
	DiabeticShoeR:             "DiabeticShoeR",
	DiabeticShoeL:             "DiabeticShoeL",
	ThereapeuticShoeR:         "ThereapeuticShoeR",
	ThereapeuticShoeL:         "ThereapeuticShoeL",
	DebridementOfCallus:       "DebridementOfCallus",
	OffloadingShoe:            "OffloadingShoe",
	Medication:                "Medication",
	Education:                 "Education",
	Physiotherapy:             "Physiotherapy",
	AppropriateFootwear:       "AppropriateFootwear",
	VascularClinic:            "VascularClinic",
	UlcerClinic:               "UlcerClinic",
	Orthotist:                 "Orthotist",
	RFOther:                   "RFOther",
	RegistrationNo:            "RegistrationNo",
	CreatedDate:               "CreatedDate",
}

var DoctorNoteFootcareTableColumns = struct {
	ID                        string
	CompanyCode               string
	DocumentID                string
	DMType                    string
	DMTypeDuration            string
	Treatment                 string
	HBA1C                     string
	ImpairedVision            string
	Smoking                   string
	Other                     string
	SNDrySkinRight            string
	SNDrySkinLeft             string
	SNCallusCornsRight        string
	SNCallusCornsLeft         string
	SNFissuresCracksRight     string
	SNFissuresCracksLeft      string
	SNWebSpaceInfectionRight  string
	SNWebSpaceInfectionLeft   string
	SNNailBedInfectionRight   string
	SNNailBedInfectionLeft    string
	SNInGrowingToeNailsRight  string
	SNInGrowingToeNailsLeft   string
	HammerToesRight           string
	HammerToesLeft            string
	ReducedAnkleReflexRight   string
	ReducedAnkleReflexLeft    string
	ClawtoesRight             string
	ClawtoesLeft              string
	OLDRight                  string
	OLDLeft                   string
	PositiveMonofilamentRight string
	PositiveMonofilamentLeft  string
	BunionRight               string
	BunionLeft                string
	ADRight                   string
	ADLeft                    string
	ABTRight                  string
	ABTLeft                   string
	ADPRight                  string
	ADPLeft                   string
	PreviousUlcerationRight   string
	PreviousUlcerationLeft    string
	APTRight                  string
	APTLeft                   string
	PreviousAmputationRight   string
	PreviousAmputationLeft    string
	AbplR                     string
	AbplL                     string
	Specify                   string
	IFAPTRight                string
	IFAPTLeft                 string
	ORRTRight                 string
	ORRTLeft                  string
	VasAnuR                   string
	VasAnuL                   string
	VasSixL                   string
	VasSixR                   string
	VasThreeL                 string
	VasThreeR                 string
	CellulitesR               string
	CellulitesL               string
	GangreneR                 string
	GangreneL                 string
	AcuteUlcerR               string
	AcuteUlcerL               string
	AcuteCharcotR             string
	AcuteCharcotL             string
	SepsisR                   string
	SepsisL                   string
	ADFOtherR                 string
	ADFOtherL                 string
	SFHRight                  string
	SFHLeft                   string
	EducationReceivedR        string
	EducationReceivedL        string
	SARight                   string
	SALeft                    string
	AppropriateR              string
	AppropriateL              string
	NormalR                   string
	NormalL                   string
	DiabeticShoeR             string
	DiabeticShoeL             string
	ThereapeuticShoeR         string
	ThereapeuticShoeL         string
	DebridementOfCallus       string
	OffloadingShoe            string
	Medication                string
	Education                 string
	Physiotherapy             string
	AppropriateFootwear       string
	VascularClinic            string
	UlcerClinic               string
	Orthotist                 string
	RFOther                   string
	RegistrationNo            string
	CreatedDate               string
}{
	ID:                        "DoctorNoteFootcare.ID",
	CompanyCode:               "DoctorNoteFootcare.CompanyCode",
	DocumentID:                "DoctorNoteFootcare.DocumentID",
	DMType:                    "DoctorNoteFootcare.DMType",
	DMTypeDuration:            "DoctorNoteFootcare.DMTypeDuration",
	Treatment:                 "DoctorNoteFootcare.Treatment",
	HBA1C:                     "DoctorNoteFootcare.HbA1c",
	ImpairedVision:            "DoctorNoteFootcare.ImpairedVision",
	Smoking:                   "DoctorNoteFootcare.Smoking",
	Other:                     "DoctorNoteFootcare.Other",
	SNDrySkinRight:            "DoctorNoteFootcare.SNDrySkinRight",
	SNDrySkinLeft:             "DoctorNoteFootcare.SNDrySkinLeft",
	SNCallusCornsRight:        "DoctorNoteFootcare.SNCallusCornsRight",
	SNCallusCornsLeft:         "DoctorNoteFootcare.SNCallusCornsLeft",
	SNFissuresCracksRight:     "DoctorNoteFootcare.SNFissuresCracksRight",
	SNFissuresCracksLeft:      "DoctorNoteFootcare.SNFissuresCracksLeft",
	SNWebSpaceInfectionRight:  "DoctorNoteFootcare.SNWebSpaceInfectionRight",
	SNWebSpaceInfectionLeft:   "DoctorNoteFootcare.SNWebSpaceInfectionLeft",
	SNNailBedInfectionRight:   "DoctorNoteFootcare.SNNailBedInfectionRight",
	SNNailBedInfectionLeft:    "DoctorNoteFootcare.SNNailBedInfectionLeft",
	SNInGrowingToeNailsRight:  "DoctorNoteFootcare.SNInGrowingToeNailsRight",
	SNInGrowingToeNailsLeft:   "DoctorNoteFootcare.SNInGrowingToeNailsLeft",
	HammerToesRight:           "DoctorNoteFootcare.HammerToesRight",
	HammerToesLeft:            "DoctorNoteFootcare.HammerToesLeft",
	ReducedAnkleReflexRight:   "DoctorNoteFootcare.ReducedAnkleReflexRight",
	ReducedAnkleReflexLeft:    "DoctorNoteFootcare.ReducedAnkleReflexLeft",
	ClawtoesRight:             "DoctorNoteFootcare.ClawtoesRight",
	ClawtoesLeft:              "DoctorNoteFootcare.ClawtoesLeft",
	OLDRight:                  "DoctorNoteFootcare.OLDRight",
	OLDLeft:                   "DoctorNoteFootcare.OLDLeft",
	PositiveMonofilamentRight: "DoctorNoteFootcare.PositiveMonofilamentRight",
	PositiveMonofilamentLeft:  "DoctorNoteFootcare.PositiveMonofilamentLeft",
	BunionRight:               "DoctorNoteFootcare.BunionRight",
	BunionLeft:                "DoctorNoteFootcare.BunionLeft",
	ADRight:                   "DoctorNoteFootcare.ADRight",
	ADLeft:                    "DoctorNoteFootcare.ADLeft",
	ABTRight:                  "DoctorNoteFootcare.ABTRight",
	ABTLeft:                   "DoctorNoteFootcare.ABTLeft",
	ADPRight:                  "DoctorNoteFootcare.ADPRight",
	ADPLeft:                   "DoctorNoteFootcare.ADPLeft",
	PreviousUlcerationRight:   "DoctorNoteFootcare.PreviousUlcerationRight",
	PreviousUlcerationLeft:    "DoctorNoteFootcare.PreviousUlcerationLeft",
	APTRight:                  "DoctorNoteFootcare.APTRight",
	APTLeft:                   "DoctorNoteFootcare.APTLeft",
	PreviousAmputationRight:   "DoctorNoteFootcare.PreviousAmputationRight",
	PreviousAmputationLeft:    "DoctorNoteFootcare.PreviousAmputationLeft",
	AbplR:                     "DoctorNoteFootcare.abplR",
	AbplL:                     "DoctorNoteFootcare.abplL",
	Specify:                   "DoctorNoteFootcare.Specify",
	IFAPTRight:                "DoctorNoteFootcare.IFAPTRight",
	IFAPTLeft:                 "DoctorNoteFootcare.IFAPTLeft",
	ORRTRight:                 "DoctorNoteFootcare.ORRTRight",
	ORRTLeft:                  "DoctorNoteFootcare.ORRTLeft",
	VasAnuR:                   "DoctorNoteFootcare.VasAnuR",
	VasAnuL:                   "DoctorNoteFootcare.VasAnuL",
	VasSixL:                   "DoctorNoteFootcare.VasSixL",
	VasSixR:                   "DoctorNoteFootcare.VasSixR",
	VasThreeL:                 "DoctorNoteFootcare.VasThreeL",
	VasThreeR:                 "DoctorNoteFootcare.VasThreeR",
	CellulitesR:               "DoctorNoteFootcare.CellulitesR",
	CellulitesL:               "DoctorNoteFootcare.CellulitesL",
	GangreneR:                 "DoctorNoteFootcare.GangreneR",
	GangreneL:                 "DoctorNoteFootcare.GangreneL",
	AcuteUlcerR:               "DoctorNoteFootcare.AcuteUlcerR",
	AcuteUlcerL:               "DoctorNoteFootcare.AcuteUlcerL",
	AcuteCharcotR:             "DoctorNoteFootcare.AcuteCharcotR",
	AcuteCharcotL:             "DoctorNoteFootcare.AcuteCharcotL",
	SepsisR:                   "DoctorNoteFootcare.SepsisR",
	SepsisL:                   "DoctorNoteFootcare.SepsisL",
	ADFOtherR:                 "DoctorNoteFootcare.ADFOtherR",
	ADFOtherL:                 "DoctorNoteFootcare.ADFOtherL",
	SFHRight:                  "DoctorNoteFootcare.SFHRight",
	SFHLeft:                   "DoctorNoteFootcare.SFHLeft",
	EducationReceivedR:        "DoctorNoteFootcare.EducationReceivedR",
	EducationReceivedL:        "DoctorNoteFootcare.EducationReceivedL",
	SARight:                   "DoctorNoteFootcare.SARight",
	SALeft:                    "DoctorNoteFootcare.SALeft",
	AppropriateR:              "DoctorNoteFootcare.AppropriateR",
	AppropriateL:              "DoctorNoteFootcare.AppropriateL",
	NormalR:                   "DoctorNoteFootcare.NormalR",
	NormalL:                   "DoctorNoteFootcare.NormalL",
	DiabeticShoeR:             "DoctorNoteFootcare.DiabeticShoeR",
	DiabeticShoeL:             "DoctorNoteFootcare.DiabeticShoeL",
	ThereapeuticShoeR:         "DoctorNoteFootcare.ThereapeuticShoeR",
	ThereapeuticShoeL:         "DoctorNoteFootcare.ThereapeuticShoeL",
	DebridementOfCallus:       "DoctorNoteFootcare.DebridementOfCallus",
	OffloadingShoe:            "DoctorNoteFootcare.OffloadingShoe",
	Medication:                "DoctorNoteFootcare.Medication",
	Education:                 "DoctorNoteFootcare.Education",
	Physiotherapy:             "DoctorNoteFootcare.Physiotherapy",
	AppropriateFootwear:       "DoctorNoteFootcare.AppropriateFootwear",
	VascularClinic:            "DoctorNoteFootcare.VascularClinic",
	UlcerClinic:               "DoctorNoteFootcare.UlcerClinic",
	Orthotist:                 "DoctorNoteFootcare.Orthotist",
	RFOther:                   "DoctorNoteFootcare.RFOther",
	RegistrationNo:            "DoctorNoteFootcare.RegistrationNo",
	CreatedDate:               "DoctorNoteFootcare.CreatedDate",
}

// Generated where

var DoctorNoteFootcareWhere = struct {
	ID                        whereHelperint
	CompanyCode               whereHelperstring
	DocumentID                whereHelpernull_String
	DMType                    whereHelperstring
	DMTypeDuration            whereHelpernull_String
	Treatment                 whereHelperstring
	HBA1C                     whereHelperstring
	ImpairedVision            whereHelperstring
	Smoking                   whereHelperstring
	Other                     whereHelperstring
	SNDrySkinRight            whereHelperbool
	SNDrySkinLeft             whereHelperbool
	SNCallusCornsRight        whereHelperbool
	SNCallusCornsLeft         whereHelperbool
	SNFissuresCracksRight     whereHelperbool
	SNFissuresCracksLeft      whereHelperbool
	SNWebSpaceInfectionRight  whereHelperbool
	SNWebSpaceInfectionLeft   whereHelperbool
	SNNailBedInfectionRight   whereHelperbool
	SNNailBedInfectionLeft    whereHelperbool
	SNInGrowingToeNailsRight  whereHelperbool
	SNInGrowingToeNailsLeft   whereHelperbool
	HammerToesRight           whereHelperbool
	HammerToesLeft            whereHelperbool
	ReducedAnkleReflexRight   whereHelperbool
	ReducedAnkleReflexLeft    whereHelperbool
	ClawtoesRight             whereHelperbool
	ClawtoesLeft              whereHelperbool
	OLDRight                  whereHelperbool
	OLDLeft                   whereHelperbool
	PositiveMonofilamentRight whereHelperbool
	PositiveMonofilamentLeft  whereHelperbool
	BunionRight               whereHelperbool
	BunionLeft                whereHelperbool
	ADRight                   whereHelperbool
	ADLeft                    whereHelperbool
	ABTRight                  whereHelperbool
	ABTLeft                   whereHelperbool
	ADPRight                  whereHelperbool
	ADPLeft                   whereHelperbool
	PreviousUlcerationRight   whereHelperbool
	PreviousUlcerationLeft    whereHelperbool
	APTRight                  whereHelperbool
	APTLeft                   whereHelperbool
	PreviousAmputationRight   whereHelperbool
	PreviousAmputationLeft    whereHelperbool
	AbplR                     whereHelperstring
	AbplL                     whereHelperstring
	Specify                   whereHelperstring
	IFAPTRight                whereHelperbool
	IFAPTLeft                 whereHelperbool
	ORRTRight                 whereHelperbool
	ORRTLeft                  whereHelperbool
	VasAnuR                   whereHelperbool
	VasAnuL                   whereHelperbool
	VasSixL                   whereHelperbool
	VasSixR                   whereHelperbool
	VasThreeL                 whereHelperbool
	VasThreeR                 whereHelperbool
	CellulitesR               whereHelperbool
	CellulitesL               whereHelperbool
	GangreneR                 whereHelperbool
	GangreneL                 whereHelperbool
	AcuteUlcerR               whereHelperbool
	AcuteUlcerL               whereHelperbool
	AcuteCharcotR             whereHelperbool
	AcuteCharcotL             whereHelperbool
	SepsisR                   whereHelperbool
	SepsisL                   whereHelperbool
	ADFOtherR                 whereHelperbool
	ADFOtherL                 whereHelperbool
	SFHRight                  whereHelperbool
	SFHLeft                   whereHelperbool
	EducationReceivedR        whereHelperbool
	EducationReceivedL        whereHelperbool
	SARight                   whereHelperbool
	SALeft                    whereHelperbool
	AppropriateR              whereHelperbool
	AppropriateL              whereHelperbool
	NormalR                   whereHelperbool
	NormalL                   whereHelperbool
	DiabeticShoeR             whereHelperbool
	DiabeticShoeL             whereHelperbool
	ThereapeuticShoeR         whereHelperbool
	ThereapeuticShoeL         whereHelperbool
	DebridementOfCallus       whereHelperbool
	OffloadingShoe            whereHelperbool
	Medication                whereHelperbool
	Education                 whereHelperbool
	Physiotherapy             whereHelperbool
	AppropriateFootwear       whereHelperbool
	VascularClinic            whereHelperbool
	UlcerClinic               whereHelperbool
	Orthotist                 whereHelperbool
	RFOther                   whereHelperbool
	RegistrationNo            whereHelperstring
	CreatedDate               whereHelpertime_Time
}{
	ID:                        whereHelperint{field: "[dbo].[DoctorNoteFootcare].[ID]"},
	CompanyCode:               whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[CompanyCode]"},
	DocumentID:                whereHelpernull_String{field: "[dbo].[DoctorNoteFootcare].[DocumentID]"},
	DMType:                    whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[DMType]"},
	DMTypeDuration:            whereHelpernull_String{field: "[dbo].[DoctorNoteFootcare].[DMTypeDuration]"},
	Treatment:                 whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[Treatment]"},
	HBA1C:                     whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[HbA1c]"},
	ImpairedVision:            whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[ImpairedVision]"},
	Smoking:                   whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[Smoking]"},
	Other:                     whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[Other]"},
	SNDrySkinRight:            whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNDrySkinRight]"},
	SNDrySkinLeft:             whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNDrySkinLeft]"},
	SNCallusCornsRight:        whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNCallusCornsRight]"},
	SNCallusCornsLeft:         whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNCallusCornsLeft]"},
	SNFissuresCracksRight:     whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNFissuresCracksRight]"},
	SNFissuresCracksLeft:      whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNFissuresCracksLeft]"},
	SNWebSpaceInfectionRight:  whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNWebSpaceInfectionRight]"},
	SNWebSpaceInfectionLeft:   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNWebSpaceInfectionLeft]"},
	SNNailBedInfectionRight:   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNNailBedInfectionRight]"},
	SNNailBedInfectionLeft:    whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNNailBedInfectionLeft]"},
	SNInGrowingToeNailsRight:  whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNInGrowingToeNailsRight]"},
	SNInGrowingToeNailsLeft:   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SNInGrowingToeNailsLeft]"},
	HammerToesRight:           whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[HammerToesRight]"},
	HammerToesLeft:            whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[HammerToesLeft]"},
	ReducedAnkleReflexRight:   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ReducedAnkleReflexRight]"},
	ReducedAnkleReflexLeft:    whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ReducedAnkleReflexLeft]"},
	ClawtoesRight:             whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ClawtoesRight]"},
	ClawtoesLeft:              whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ClawtoesLeft]"},
	OLDRight:                  whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[OLDRight]"},
	OLDLeft:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[OLDLeft]"},
	PositiveMonofilamentRight: whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[PositiveMonofilamentRight]"},
	PositiveMonofilamentLeft:  whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[PositiveMonofilamentLeft]"},
	BunionRight:               whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[BunionRight]"},
	BunionLeft:                whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[BunionLeft]"},
	ADRight:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ADRight]"},
	ADLeft:                    whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ADLeft]"},
	ABTRight:                  whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ABTRight]"},
	ABTLeft:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ABTLeft]"},
	ADPRight:                  whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ADPRight]"},
	ADPLeft:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ADPLeft]"},
	PreviousUlcerationRight:   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[PreviousUlcerationRight]"},
	PreviousUlcerationLeft:    whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[PreviousUlcerationLeft]"},
	APTRight:                  whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[APTRight]"},
	APTLeft:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[APTLeft]"},
	PreviousAmputationRight:   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[PreviousAmputationRight]"},
	PreviousAmputationLeft:    whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[PreviousAmputationLeft]"},
	AbplR:                     whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[abplR]"},
	AbplL:                     whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[abplL]"},
	Specify:                   whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[Specify]"},
	IFAPTRight:                whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[IFAPTRight]"},
	IFAPTLeft:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[IFAPTLeft]"},
	ORRTRight:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ORRTRight]"},
	ORRTLeft:                  whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ORRTLeft]"},
	VasAnuR:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[VasAnuR]"},
	VasAnuL:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[VasAnuL]"},
	VasSixL:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[VasSixL]"},
	VasSixR:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[VasSixR]"},
	VasThreeL:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[VasThreeL]"},
	VasThreeR:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[VasThreeR]"},
	CellulitesR:               whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[CellulitesR]"},
	CellulitesL:               whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[CellulitesL]"},
	GangreneR:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[GangreneR]"},
	GangreneL:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[GangreneL]"},
	AcuteUlcerR:               whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[AcuteUlcerR]"},
	AcuteUlcerL:               whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[AcuteUlcerL]"},
	AcuteCharcotR:             whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[AcuteCharcotR]"},
	AcuteCharcotL:             whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[AcuteCharcotL]"},
	SepsisR:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SepsisR]"},
	SepsisL:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SepsisL]"},
	ADFOtherR:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ADFOtherR]"},
	ADFOtherL:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ADFOtherL]"},
	SFHRight:                  whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SFHRight]"},
	SFHLeft:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SFHLeft]"},
	EducationReceivedR:        whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[EducationReceivedR]"},
	EducationReceivedL:        whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[EducationReceivedL]"},
	SARight:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SARight]"},
	SALeft:                    whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[SALeft]"},
	AppropriateR:              whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[AppropriateR]"},
	AppropriateL:              whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[AppropriateL]"},
	NormalR:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[NormalR]"},
	NormalL:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[NormalL]"},
	DiabeticShoeR:             whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[DiabeticShoeR]"},
	DiabeticShoeL:             whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[DiabeticShoeL]"},
	ThereapeuticShoeR:         whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ThereapeuticShoeR]"},
	ThereapeuticShoeL:         whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[ThereapeuticShoeL]"},
	DebridementOfCallus:       whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[DebridementOfCallus]"},
	OffloadingShoe:            whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[OffloadingShoe]"},
	Medication:                whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[Medication]"},
	Education:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[Education]"},
	Physiotherapy:             whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[Physiotherapy]"},
	AppropriateFootwear:       whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[AppropriateFootwear]"},
	VascularClinic:            whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[VascularClinic]"},
	UlcerClinic:               whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[UlcerClinic]"},
	Orthotist:                 whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[Orthotist]"},
	RFOther:                   whereHelperbool{field: "[dbo].[DoctorNoteFootcare].[RFOther]"},
	RegistrationNo:            whereHelperstring{field: "[dbo].[DoctorNoteFootcare].[RegistrationNo]"},
	CreatedDate:               whereHelpertime_Time{field: "[dbo].[DoctorNoteFootcare].[CreatedDate]"},
}

// DoctorNoteFootcareRels is where relationship names are stored.
var DoctorNoteFootcareRels = struct {
}{}

// doctorNoteFootcareR is where relationships are stored.
type doctorNoteFootcareR struct {
}

// NewStruct creates a new relationship struct
func (*doctorNoteFootcareR) NewStruct() *doctorNoteFootcareR {
	return &doctorNoteFootcareR{}
}

// doctorNoteFootcareL is where Load methods for each relationship are stored.
type doctorNoteFootcareL struct{}

var (
	doctorNoteFootcareAllColumns            = []string{"ID", "CompanyCode", "DocumentID", "DMType", "DMTypeDuration", "Treatment", "HbA1c", "ImpairedVision", "Smoking", "Other", "SNDrySkinRight", "SNDrySkinLeft", "SNCallusCornsRight", "SNCallusCornsLeft", "SNFissuresCracksRight", "SNFissuresCracksLeft", "SNWebSpaceInfectionRight", "SNWebSpaceInfectionLeft", "SNNailBedInfectionRight", "SNNailBedInfectionLeft", "SNInGrowingToeNailsRight", "SNInGrowingToeNailsLeft", "HammerToesRight", "HammerToesLeft", "ReducedAnkleReflexRight", "ReducedAnkleReflexLeft", "ClawtoesRight", "ClawtoesLeft", "OLDRight", "OLDLeft", "PositiveMonofilamentRight", "PositiveMonofilamentLeft", "BunionRight", "BunionLeft", "ADRight", "ADLeft", "ABTRight", "ABTLeft", "ADPRight", "ADPLeft", "PreviousUlcerationRight", "PreviousUlcerationLeft", "APTRight", "APTLeft", "PreviousAmputationRight", "PreviousAmputationLeft", "abplR", "abplL", "Specify", "IFAPTRight", "IFAPTLeft", "ORRTRight", "ORRTLeft", "VasAnuR", "VasAnuL", "VasSixL", "VasSixR", "VasThreeL", "VasThreeR", "CellulitesR", "CellulitesL", "GangreneR", "GangreneL", "AcuteUlcerR", "AcuteUlcerL", "AcuteCharcotR", "AcuteCharcotL", "SepsisR", "SepsisL", "ADFOtherR", "ADFOtherL", "SFHRight", "SFHLeft", "EducationReceivedR", "EducationReceivedL", "SARight", "SALeft", "AppropriateR", "AppropriateL", "NormalR", "NormalL", "DiabeticShoeR", "DiabeticShoeL", "ThereapeuticShoeR", "ThereapeuticShoeL", "DebridementOfCallus", "OffloadingShoe", "Medication", "Education", "Physiotherapy", "AppropriateFootwear", "VascularClinic", "UlcerClinic", "Orthotist", "RFOther", "RegistrationNo", "CreatedDate"}
	doctorNoteFootcareColumnsWithAuto       = []string{}
	doctorNoteFootcareColumnsWithoutDefault = []string{"DMTypeDuration"}
	doctorNoteFootcareColumnsWithDefault    = []string{"ID", "CompanyCode", "DocumentID", "DMType", "Treatment", "HbA1c", "ImpairedVision", "Smoking", "Other", "SNDrySkinRight", "SNDrySkinLeft", "SNCallusCornsRight", "SNCallusCornsLeft", "SNFissuresCracksRight", "SNFissuresCracksLeft", "SNWebSpaceInfectionRight", "SNWebSpaceInfectionLeft", "SNNailBedInfectionRight", "SNNailBedInfectionLeft", "SNInGrowingToeNailsRight", "SNInGrowingToeNailsLeft", "HammerToesRight", "HammerToesLeft", "ReducedAnkleReflexRight", "ReducedAnkleReflexLeft", "ClawtoesRight", "ClawtoesLeft", "OLDRight", "OLDLeft", "PositiveMonofilamentRight", "PositiveMonofilamentLeft", "BunionRight", "BunionLeft", "ADRight", "ADLeft", "ABTRight", "ABTLeft", "ADPRight", "ADPLeft", "PreviousUlcerationRight", "PreviousUlcerationLeft", "APTRight", "APTLeft", "PreviousAmputationRight", "PreviousAmputationLeft", "abplR", "abplL", "Specify", "IFAPTRight", "IFAPTLeft", "ORRTRight", "ORRTLeft", "VasAnuR", "VasAnuL", "VasSixL", "VasSixR", "VasThreeL", "VasThreeR", "CellulitesR", "CellulitesL", "GangreneR", "GangreneL", "AcuteUlcerR", "AcuteUlcerL", "AcuteCharcotR", "AcuteCharcotL", "SepsisR", "SepsisL", "ADFOtherR", "ADFOtherL", "SFHRight", "SFHLeft", "EducationReceivedR", "EducationReceivedL", "SARight", "SALeft", "AppropriateR", "AppropriateL", "NormalR", "NormalL", "DiabeticShoeR", "DiabeticShoeL", "ThereapeuticShoeR", "ThereapeuticShoeL", "DebridementOfCallus", "OffloadingShoe", "Medication", "Education", "Physiotherapy", "AppropriateFootwear", "VascularClinic", "UlcerClinic", "Orthotist", "RFOther", "RegistrationNo", "CreatedDate"}
	doctorNoteFootcarePrimaryKeyColumns     = []string{"ID"}
)

type (
	// DoctorNoteFootcareSlice is an alias for a slice of pointers to DoctorNoteFootcare.
	// This should almost always be used instead of []DoctorNoteFootcare.
	DoctorNoteFootcareSlice []*DoctorNoteFootcare
	// DoctorNoteFootcareHook is the signature for custom DoctorNoteFootcare hook methods
	DoctorNoteFootcareHook func(context.Context, boil.ContextExecutor, *DoctorNoteFootcare) error

	doctorNoteFootcareQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doctorNoteFootcareType                 = reflect.TypeOf(&DoctorNoteFootcare{})
	doctorNoteFootcareMapping              = queries.MakeStructMapping(doctorNoteFootcareType)
	doctorNoteFootcarePrimaryKeyMapping, _ = queries.BindMapping(doctorNoteFootcareType, doctorNoteFootcareMapping, doctorNoteFootcarePrimaryKeyColumns)
	doctorNoteFootcareInsertCacheMut       sync.RWMutex
	doctorNoteFootcareInsertCache          = make(map[string]insertCache)
	doctorNoteFootcareUpdateCacheMut       sync.RWMutex
	doctorNoteFootcareUpdateCache          = make(map[string]updateCache)
	doctorNoteFootcareUpsertCacheMut       sync.RWMutex
	doctorNoteFootcareUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doctorNoteFootcareBeforeInsertHooks []DoctorNoteFootcareHook
var doctorNoteFootcareBeforeUpdateHooks []DoctorNoteFootcareHook
var doctorNoteFootcareBeforeDeleteHooks []DoctorNoteFootcareHook
var doctorNoteFootcareBeforeUpsertHooks []DoctorNoteFootcareHook

var doctorNoteFootcareAfterInsertHooks []DoctorNoteFootcareHook
var doctorNoteFootcareAfterSelectHooks []DoctorNoteFootcareHook
var doctorNoteFootcareAfterUpdateHooks []DoctorNoteFootcareHook
var doctorNoteFootcareAfterDeleteHooks []DoctorNoteFootcareHook
var doctorNoteFootcareAfterUpsertHooks []DoctorNoteFootcareHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DoctorNoteFootcare) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootcareBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DoctorNoteFootcare) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootcareBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DoctorNoteFootcare) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootcareBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DoctorNoteFootcare) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootcareBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DoctorNoteFootcare) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootcareAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DoctorNoteFootcare) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootcareAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DoctorNoteFootcare) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootcareAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DoctorNoteFootcare) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootcareAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DoctorNoteFootcare) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootcareAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoctorNoteFootcareHook registers your hook function for all future operations.
func AddDoctorNoteFootcareHook(hookPoint boil.HookPoint, doctorNoteFootcareHook DoctorNoteFootcareHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doctorNoteFootcareBeforeInsertHooks = append(doctorNoteFootcareBeforeInsertHooks, doctorNoteFootcareHook)
	case boil.BeforeUpdateHook:
		doctorNoteFootcareBeforeUpdateHooks = append(doctorNoteFootcareBeforeUpdateHooks, doctorNoteFootcareHook)
	case boil.BeforeDeleteHook:
		doctorNoteFootcareBeforeDeleteHooks = append(doctorNoteFootcareBeforeDeleteHooks, doctorNoteFootcareHook)
	case boil.BeforeUpsertHook:
		doctorNoteFootcareBeforeUpsertHooks = append(doctorNoteFootcareBeforeUpsertHooks, doctorNoteFootcareHook)
	case boil.AfterInsertHook:
		doctorNoteFootcareAfterInsertHooks = append(doctorNoteFootcareAfterInsertHooks, doctorNoteFootcareHook)
	case boil.AfterSelectHook:
		doctorNoteFootcareAfterSelectHooks = append(doctorNoteFootcareAfterSelectHooks, doctorNoteFootcareHook)
	case boil.AfterUpdateHook:
		doctorNoteFootcareAfterUpdateHooks = append(doctorNoteFootcareAfterUpdateHooks, doctorNoteFootcareHook)
	case boil.AfterDeleteHook:
		doctorNoteFootcareAfterDeleteHooks = append(doctorNoteFootcareAfterDeleteHooks, doctorNoteFootcareHook)
	case boil.AfterUpsertHook:
		doctorNoteFootcareAfterUpsertHooks = append(doctorNoteFootcareAfterUpsertHooks, doctorNoteFootcareHook)
	}
}

// One returns a single doctorNoteFootcare record from the query.
func (q doctorNoteFootcareQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DoctorNoteFootcare, error) {
	o := &DoctorNoteFootcare{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for DoctorNoteFootcare")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DoctorNoteFootcare records from the query.
func (q doctorNoteFootcareQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoctorNoteFootcareSlice, error) {
	var o []*DoctorNoteFootcare

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DoctorNoteFootcare slice")
	}

	if len(doctorNoteFootcareAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DoctorNoteFootcare records in the query.
func (q doctorNoteFootcareQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count DoctorNoteFootcare rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doctorNoteFootcareQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if DoctorNoteFootcare exists")
	}

	return count > 0, nil
}

// DoctorNoteFootcares retrieves all the records using an executor.
func DoctorNoteFootcares(mods ...qm.QueryMod) doctorNoteFootcareQuery {
	mods = append(mods, qm.From("[dbo].[DoctorNoteFootcare]"))
	return doctorNoteFootcareQuery{NewQuery(mods...)}
}

// FindDoctorNoteFootcare retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoctorNoteFootcare(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DoctorNoteFootcare, error) {
	doctorNoteFootcareObj := &DoctorNoteFootcare{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[DoctorNoteFootcare] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doctorNoteFootcareObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from DoctorNoteFootcare")
	}

	if err = doctorNoteFootcareObj.doAfterSelectHooks(ctx, exec); err != nil {
		return doctorNoteFootcareObj, err
	}

	return doctorNoteFootcareObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DoctorNoteFootcare) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteFootcare provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteFootcareColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doctorNoteFootcareInsertCacheMut.RLock()
	cache, cached := doctorNoteFootcareInsertCache[key]
	doctorNoteFootcareInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doctorNoteFootcareAllColumns,
			doctorNoteFootcareColumnsWithDefault,
			doctorNoteFootcareColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doctorNoteFootcareType, doctorNoteFootcareMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doctorNoteFootcareType, doctorNoteFootcareMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[DoctorNoteFootcare] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[DoctorNoteFootcare] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into DoctorNoteFootcare")
	}

	if !cached {
		doctorNoteFootcareInsertCacheMut.Lock()
		doctorNoteFootcareInsertCache[key] = cache
		doctorNoteFootcareInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DoctorNoteFootcare.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DoctorNoteFootcare) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doctorNoteFootcareUpdateCacheMut.RLock()
	cache, cached := doctorNoteFootcareUpdateCache[key]
	doctorNoteFootcareUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doctorNoteFootcareAllColumns,
			doctorNoteFootcarePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, doctorNoteFootcareColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update DoctorNoteFootcare, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[DoctorNoteFootcare] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, doctorNoteFootcarePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doctorNoteFootcareType, doctorNoteFootcareMapping, append(wl, doctorNoteFootcarePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update DoctorNoteFootcare row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for DoctorNoteFootcare")
	}

	if !cached {
		doctorNoteFootcareUpdateCacheMut.Lock()
		doctorNoteFootcareUpdateCache[key] = cache
		doctorNoteFootcareUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doctorNoteFootcareQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for DoctorNoteFootcare")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for DoctorNoteFootcare")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoctorNoteFootcareSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteFootcarePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[DoctorNoteFootcare] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, doctorNoteFootcarePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doctorNoteFootcare slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doctorNoteFootcare")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DoctorNoteFootcare) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteFootcare provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteFootcareColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	doctorNoteFootcareUpsertCacheMut.RLock()
	cache, cached := doctorNoteFootcareUpsertCache[key]
	doctorNoteFootcareUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			doctorNoteFootcareAllColumns,
			doctorNoteFootcareColumnsWithDefault,
			doctorNoteFootcareColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, doctorNoteFootcareColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(doctorNoteFootcarePrimaryKeyColumns, v) && strmangle.ContainsAny(doctorNoteFootcareColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert DoctorNoteFootcare, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, doctorNoteFootcareColumnsWithAuto)
		ret = strmangle.SetMerge(ret, doctorNoteFootcareColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			doctorNoteFootcareAllColumns,
			doctorNoteFootcarePrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, doctorNoteFootcareColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert DoctorNoteFootcare, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[DoctorNoteFootcare]", doctorNoteFootcarePrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(doctorNoteFootcarePrimaryKeyColumns))
		copy(whitelist, doctorNoteFootcarePrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(doctorNoteFootcareType, doctorNoteFootcareMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(doctorNoteFootcareType, doctorNoteFootcareMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert DoctorNoteFootcare")
	}

	if !cached {
		doctorNoteFootcareUpsertCacheMut.Lock()
		doctorNoteFootcareUpsertCache[key] = cache
		doctorNoteFootcareUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DoctorNoteFootcare record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DoctorNoteFootcare) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DoctorNoteFootcare provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doctorNoteFootcarePrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[DoctorNoteFootcare] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from DoctorNoteFootcare")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for DoctorNoteFootcare")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doctorNoteFootcareQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doctorNoteFootcareQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from DoctorNoteFootcare")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteFootcare")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoctorNoteFootcareSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doctorNoteFootcareBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteFootcarePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[DoctorNoteFootcare] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteFootcarePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doctorNoteFootcare slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteFootcare")
	}

	if len(doctorNoteFootcareAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DoctorNoteFootcare) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoctorNoteFootcare(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoctorNoteFootcareSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoctorNoteFootcareSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteFootcarePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[DoctorNoteFootcare].* FROM [dbo].[DoctorNoteFootcare] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteFootcarePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoctorNoteFootcareSlice")
	}

	*o = slice

	return nil
}

// DoctorNoteFootcareExists checks if the DoctorNoteFootcare row exists.
func DoctorNoteFootcareExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[DoctorNoteFootcare] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if DoctorNoteFootcare exists")
	}

	return exists, nil
}
