// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReuestedDoc is an object representing the database table.
type ReuestedDoc struct {
	ID                int       `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	RegistrationNo    string    `boil:"RegistrationNo" json:"RegistrationNo" toml:"RegistrationNo" yaml:"RegistrationNo"`
	ReferenceNo       string    `boil:"ReferenceNo" json:"ReferenceNo" toml:"ReferenceNo" yaml:"ReferenceNo"`
	CompanyCode       string    `boil:"CompanyCode" json:"CompanyCode" toml:"CompanyCode" yaml:"CompanyCode"`
	DtpDate           time.Time `boil:"dtpDate" json:"dtpDate" toml:"dtpDate" yaml:"dtpDate"`
	RequestByService  string    `boil:"RequestByService" json:"RequestByService" toml:"RequestByService" yaml:"RequestByService"`
	RequestItem       string    `boil:"RequestItem" json:"RequestItem" toml:"RequestItem" yaml:"RequestItem"`
	DtpRequestOn      time.Time `boil:"dtpRequestOn" json:"dtpRequestOn" toml:"dtpRequestOn" yaml:"dtpRequestOn"`
	ItemType          string    `boil:"ItemType" json:"ItemType" toml:"ItemType" yaml:"ItemType"`
	RequestBy         string    `boil:"RequestBy" json:"RequestBy" toml:"RequestBy" yaml:"RequestBy"`
	DtpReportSubmitOn time.Time `boil:"dtpReportSubmitOn" json:"dtpReportSubmitOn" toml:"dtpReportSubmitOn" yaml:"dtpReportSubmitOn"`
	ReportCheckBy     string    `boil:"ReportCheckBy" json:"ReportCheckBy" toml:"ReportCheckBy" yaml:"ReportCheckBy"`
	BCollected        bool      `boil:"bCollected" json:"bCollected" toml:"bCollected" yaml:"bCollected"`

	R *reuestedDocR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reuestedDocL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReuestedDocColumns = struct {
	ID                string
	RegistrationNo    string
	ReferenceNo       string
	CompanyCode       string
	DtpDate           string
	RequestByService  string
	RequestItem       string
	DtpRequestOn      string
	ItemType          string
	RequestBy         string
	DtpReportSubmitOn string
	ReportCheckBy     string
	BCollected        string
}{
	ID:                "ID",
	RegistrationNo:    "RegistrationNo",
	ReferenceNo:       "ReferenceNo",
	CompanyCode:       "CompanyCode",
	DtpDate:           "dtpDate",
	RequestByService:  "RequestByService",
	RequestItem:       "RequestItem",
	DtpRequestOn:      "dtpRequestOn",
	ItemType:          "ItemType",
	RequestBy:         "RequestBy",
	DtpReportSubmitOn: "dtpReportSubmitOn",
	ReportCheckBy:     "ReportCheckBy",
	BCollected:        "bCollected",
}

var ReuestedDocTableColumns = struct {
	ID                string
	RegistrationNo    string
	ReferenceNo       string
	CompanyCode       string
	DtpDate           string
	RequestByService  string
	RequestItem       string
	DtpRequestOn      string
	ItemType          string
	RequestBy         string
	DtpReportSubmitOn string
	ReportCheckBy     string
	BCollected        string
}{
	ID:                "ReuestedDoc.ID",
	RegistrationNo:    "ReuestedDoc.RegistrationNo",
	ReferenceNo:       "ReuestedDoc.ReferenceNo",
	CompanyCode:       "ReuestedDoc.CompanyCode",
	DtpDate:           "ReuestedDoc.dtpDate",
	RequestByService:  "ReuestedDoc.RequestByService",
	RequestItem:       "ReuestedDoc.RequestItem",
	DtpRequestOn:      "ReuestedDoc.dtpRequestOn",
	ItemType:          "ReuestedDoc.ItemType",
	RequestBy:         "ReuestedDoc.RequestBy",
	DtpReportSubmitOn: "ReuestedDoc.dtpReportSubmitOn",
	ReportCheckBy:     "ReuestedDoc.ReportCheckBy",
	BCollected:        "ReuestedDoc.bCollected",
}

// Generated where

var ReuestedDocWhere = struct {
	ID                whereHelperint
	RegistrationNo    whereHelperstring
	ReferenceNo       whereHelperstring
	CompanyCode       whereHelperstring
	DtpDate           whereHelpertime_Time
	RequestByService  whereHelperstring
	RequestItem       whereHelperstring
	DtpRequestOn      whereHelpertime_Time
	ItemType          whereHelperstring
	RequestBy         whereHelperstring
	DtpReportSubmitOn whereHelpertime_Time
	ReportCheckBy     whereHelperstring
	BCollected        whereHelperbool
}{
	ID:                whereHelperint{field: "[dbo].[ReuestedDoc].[ID]"},
	RegistrationNo:    whereHelperstring{field: "[dbo].[ReuestedDoc].[RegistrationNo]"},
	ReferenceNo:       whereHelperstring{field: "[dbo].[ReuestedDoc].[ReferenceNo]"},
	CompanyCode:       whereHelperstring{field: "[dbo].[ReuestedDoc].[CompanyCode]"},
	DtpDate:           whereHelpertime_Time{field: "[dbo].[ReuestedDoc].[dtpDate]"},
	RequestByService:  whereHelperstring{field: "[dbo].[ReuestedDoc].[RequestByService]"},
	RequestItem:       whereHelperstring{field: "[dbo].[ReuestedDoc].[RequestItem]"},
	DtpRequestOn:      whereHelpertime_Time{field: "[dbo].[ReuestedDoc].[dtpRequestOn]"},
	ItemType:          whereHelperstring{field: "[dbo].[ReuestedDoc].[ItemType]"},
	RequestBy:         whereHelperstring{field: "[dbo].[ReuestedDoc].[RequestBy]"},
	DtpReportSubmitOn: whereHelpertime_Time{field: "[dbo].[ReuestedDoc].[dtpReportSubmitOn]"},
	ReportCheckBy:     whereHelperstring{field: "[dbo].[ReuestedDoc].[ReportCheckBy]"},
	BCollected:        whereHelperbool{field: "[dbo].[ReuestedDoc].[bCollected]"},
}

// ReuestedDocRels is where relationship names are stored.
var ReuestedDocRels = struct {
}{}

// reuestedDocR is where relationships are stored.
type reuestedDocR struct {
}

// NewStruct creates a new relationship struct
func (*reuestedDocR) NewStruct() *reuestedDocR {
	return &reuestedDocR{}
}

// reuestedDocL is where Load methods for each relationship are stored.
type reuestedDocL struct{}

var (
	reuestedDocAllColumns            = []string{"ID", "RegistrationNo", "ReferenceNo", "CompanyCode", "dtpDate", "RequestByService", "RequestItem", "dtpRequestOn", "ItemType", "RequestBy", "dtpReportSubmitOn", "ReportCheckBy", "bCollected"}
	reuestedDocColumnsWithAuto       = []string{}
	reuestedDocColumnsWithoutDefault = []string{}
	reuestedDocColumnsWithDefault    = []string{"ID", "RegistrationNo", "ReferenceNo", "CompanyCode", "dtpDate", "RequestByService", "RequestItem", "dtpRequestOn", "ItemType", "RequestBy", "dtpReportSubmitOn", "ReportCheckBy", "bCollected"}
	reuestedDocPrimaryKeyColumns     = []string{"ID"}
)

type (
	// ReuestedDocSlice is an alias for a slice of pointers to ReuestedDoc.
	// This should almost always be used instead of []ReuestedDoc.
	ReuestedDocSlice []*ReuestedDoc
	// ReuestedDocHook is the signature for custom ReuestedDoc hook methods
	ReuestedDocHook func(context.Context, boil.ContextExecutor, *ReuestedDoc) error

	reuestedDocQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reuestedDocType                 = reflect.TypeOf(&ReuestedDoc{})
	reuestedDocMapping              = queries.MakeStructMapping(reuestedDocType)
	reuestedDocPrimaryKeyMapping, _ = queries.BindMapping(reuestedDocType, reuestedDocMapping, reuestedDocPrimaryKeyColumns)
	reuestedDocInsertCacheMut       sync.RWMutex
	reuestedDocInsertCache          = make(map[string]insertCache)
	reuestedDocUpdateCacheMut       sync.RWMutex
	reuestedDocUpdateCache          = make(map[string]updateCache)
	reuestedDocUpsertCacheMut       sync.RWMutex
	reuestedDocUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reuestedDocBeforeInsertHooks []ReuestedDocHook
var reuestedDocBeforeUpdateHooks []ReuestedDocHook
var reuestedDocBeforeDeleteHooks []ReuestedDocHook
var reuestedDocBeforeUpsertHooks []ReuestedDocHook

var reuestedDocAfterInsertHooks []ReuestedDocHook
var reuestedDocAfterSelectHooks []ReuestedDocHook
var reuestedDocAfterUpdateHooks []ReuestedDocHook
var reuestedDocAfterDeleteHooks []ReuestedDocHook
var reuestedDocAfterUpsertHooks []ReuestedDocHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReuestedDoc) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reuestedDocBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReuestedDoc) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reuestedDocBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReuestedDoc) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reuestedDocBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReuestedDoc) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reuestedDocBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReuestedDoc) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reuestedDocAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReuestedDoc) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reuestedDocAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReuestedDoc) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reuestedDocAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReuestedDoc) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reuestedDocAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReuestedDoc) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reuestedDocAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReuestedDocHook registers your hook function for all future operations.
func AddReuestedDocHook(hookPoint boil.HookPoint, reuestedDocHook ReuestedDocHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		reuestedDocBeforeInsertHooks = append(reuestedDocBeforeInsertHooks, reuestedDocHook)
	case boil.BeforeUpdateHook:
		reuestedDocBeforeUpdateHooks = append(reuestedDocBeforeUpdateHooks, reuestedDocHook)
	case boil.BeforeDeleteHook:
		reuestedDocBeforeDeleteHooks = append(reuestedDocBeforeDeleteHooks, reuestedDocHook)
	case boil.BeforeUpsertHook:
		reuestedDocBeforeUpsertHooks = append(reuestedDocBeforeUpsertHooks, reuestedDocHook)
	case boil.AfterInsertHook:
		reuestedDocAfterInsertHooks = append(reuestedDocAfterInsertHooks, reuestedDocHook)
	case boil.AfterSelectHook:
		reuestedDocAfterSelectHooks = append(reuestedDocAfterSelectHooks, reuestedDocHook)
	case boil.AfterUpdateHook:
		reuestedDocAfterUpdateHooks = append(reuestedDocAfterUpdateHooks, reuestedDocHook)
	case boil.AfterDeleteHook:
		reuestedDocAfterDeleteHooks = append(reuestedDocAfterDeleteHooks, reuestedDocHook)
	case boil.AfterUpsertHook:
		reuestedDocAfterUpsertHooks = append(reuestedDocAfterUpsertHooks, reuestedDocHook)
	}
}

// One returns a single reuestedDoc record from the query.
func (q reuestedDocQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReuestedDoc, error) {
	o := &ReuestedDoc{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ReuestedDoc")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReuestedDoc records from the query.
func (q reuestedDocQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReuestedDocSlice, error) {
	var o []*ReuestedDoc

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReuestedDoc slice")
	}

	if len(reuestedDocAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReuestedDoc records in the query.
func (q reuestedDocQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ReuestedDoc rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reuestedDocQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ReuestedDoc exists")
	}

	return count > 0, nil
}

// ReuestedDocs retrieves all the records using an executor.
func ReuestedDocs(mods ...qm.QueryMod) reuestedDocQuery {
	mods = append(mods, qm.From("[dbo].[ReuestedDoc]"))
	return reuestedDocQuery{NewQuery(mods...)}
}

// FindReuestedDoc retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReuestedDoc(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ReuestedDoc, error) {
	reuestedDocObj := &ReuestedDoc{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ReuestedDoc] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reuestedDocObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ReuestedDoc")
	}

	if err = reuestedDocObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reuestedDocObj, err
	}

	return reuestedDocObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReuestedDoc) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ReuestedDoc provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reuestedDocColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reuestedDocInsertCacheMut.RLock()
	cache, cached := reuestedDocInsertCache[key]
	reuestedDocInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reuestedDocAllColumns,
			reuestedDocColumnsWithDefault,
			reuestedDocColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reuestedDocType, reuestedDocMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reuestedDocType, reuestedDocMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ReuestedDoc] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ReuestedDoc] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ReuestedDoc")
	}

	if !cached {
		reuestedDocInsertCacheMut.Lock()
		reuestedDocInsertCache[key] = cache
		reuestedDocInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReuestedDoc.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReuestedDoc) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reuestedDocUpdateCacheMut.RLock()
	cache, cached := reuestedDocUpdateCache[key]
	reuestedDocUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reuestedDocAllColumns,
			reuestedDocPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, reuestedDocColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ReuestedDoc, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ReuestedDoc] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, reuestedDocPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reuestedDocType, reuestedDocMapping, append(wl, reuestedDocPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ReuestedDoc row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ReuestedDoc")
	}

	if !cached {
		reuestedDocUpdateCacheMut.Lock()
		reuestedDocUpdateCache[key] = cache
		reuestedDocUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reuestedDocQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ReuestedDoc")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ReuestedDoc")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReuestedDocSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reuestedDocPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ReuestedDoc] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reuestedDocPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reuestedDoc slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reuestedDoc")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ReuestedDoc) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ReuestedDoc provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reuestedDocColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reuestedDocUpsertCacheMut.RLock()
	cache, cached := reuestedDocUpsertCache[key]
	reuestedDocUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reuestedDocAllColumns,
			reuestedDocColumnsWithDefault,
			reuestedDocColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, reuestedDocColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(reuestedDocPrimaryKeyColumns, v) && strmangle.ContainsAny(reuestedDocColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert ReuestedDoc, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, reuestedDocColumnsWithAuto)
		ret = strmangle.SetMerge(ret, reuestedDocColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			reuestedDocAllColumns,
			reuestedDocPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, reuestedDocColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ReuestedDoc, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ReuestedDoc]", reuestedDocPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(reuestedDocPrimaryKeyColumns))
		copy(whitelist, reuestedDocPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(reuestedDocType, reuestedDocMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reuestedDocType, reuestedDocMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ReuestedDoc")
	}

	if !cached {
		reuestedDocUpsertCacheMut.Lock()
		reuestedDocUpsertCache[key] = cache
		reuestedDocUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReuestedDoc record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReuestedDoc) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReuestedDoc provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reuestedDocPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ReuestedDoc] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ReuestedDoc")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ReuestedDoc")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reuestedDocQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reuestedDocQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ReuestedDoc")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ReuestedDoc")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReuestedDocSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reuestedDocBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reuestedDocPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ReuestedDoc] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reuestedDocPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reuestedDoc slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ReuestedDoc")
	}

	if len(reuestedDocAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReuestedDoc) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReuestedDoc(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReuestedDocSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReuestedDocSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reuestedDocPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ReuestedDoc].* FROM [dbo].[ReuestedDoc] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reuestedDocPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReuestedDocSlice")
	}

	*o = slice

	return nil
}

// ReuestedDocExists checks if the ReuestedDoc row exists.
func ReuestedDocExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ReuestedDoc] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ReuestedDoc exists")
	}

	return exists, nil
}
