// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DoctorNoteExternalInvestigation is an object representing the database table.
type DoctorNoteExternalInvestigation struct {
	ID          int    `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	CompanyCode string `boil:"CompanyCode" json:"CompanyCode" toml:"CompanyCode" yaml:"CompanyCode"`
	DocumentID  string `boil:"DocumentID" json:"DocumentID" toml:"DocumentID" yaml:"DocumentID"`

	R *doctorNoteExternalInvestigationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doctorNoteExternalInvestigationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoctorNoteExternalInvestigationColumns = struct {
	ID          string
	CompanyCode string
	DocumentID  string
}{
	ID:          "ID",
	CompanyCode: "CompanyCode",
	DocumentID:  "DocumentID",
}

var DoctorNoteExternalInvestigationTableColumns = struct {
	ID          string
	CompanyCode string
	DocumentID  string
}{
	ID:          "DoctorNoteExternalInvestigations.ID",
	CompanyCode: "DoctorNoteExternalInvestigations.CompanyCode",
	DocumentID:  "DoctorNoteExternalInvestigations.DocumentID",
}

// Generated where

var DoctorNoteExternalInvestigationWhere = struct {
	ID          whereHelperint
	CompanyCode whereHelperstring
	DocumentID  whereHelperstring
}{
	ID:          whereHelperint{field: "[dbo].[DoctorNoteExternalInvestigations].[ID]"},
	CompanyCode: whereHelperstring{field: "[dbo].[DoctorNoteExternalInvestigations].[CompanyCode]"},
	DocumentID:  whereHelperstring{field: "[dbo].[DoctorNoteExternalInvestigations].[DocumentID]"},
}

// DoctorNoteExternalInvestigationRels is where relationship names are stored.
var DoctorNoteExternalInvestigationRels = struct {
}{}

// doctorNoteExternalInvestigationR is where relationships are stored.
type doctorNoteExternalInvestigationR struct {
}

// NewStruct creates a new relationship struct
func (*doctorNoteExternalInvestigationR) NewStruct() *doctorNoteExternalInvestigationR {
	return &doctorNoteExternalInvestigationR{}
}

// doctorNoteExternalInvestigationL is where Load methods for each relationship are stored.
type doctorNoteExternalInvestigationL struct{}

var (
	doctorNoteExternalInvestigationAllColumns            = []string{"ID", "CompanyCode", "DocumentID"}
	doctorNoteExternalInvestigationColumnsWithAuto       = []string{}
	doctorNoteExternalInvestigationColumnsWithoutDefault = []string{}
	doctorNoteExternalInvestigationColumnsWithDefault    = []string{"ID", "CompanyCode", "DocumentID"}
	doctorNoteExternalInvestigationPrimaryKeyColumns     = []string{"ID"}
)

type (
	// DoctorNoteExternalInvestigationSlice is an alias for a slice of pointers to DoctorNoteExternalInvestigation.
	// This should almost always be used instead of []DoctorNoteExternalInvestigation.
	DoctorNoteExternalInvestigationSlice []*DoctorNoteExternalInvestigation
	// DoctorNoteExternalInvestigationHook is the signature for custom DoctorNoteExternalInvestigation hook methods
	DoctorNoteExternalInvestigationHook func(context.Context, boil.ContextExecutor, *DoctorNoteExternalInvestigation) error

	doctorNoteExternalInvestigationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doctorNoteExternalInvestigationType                 = reflect.TypeOf(&DoctorNoteExternalInvestigation{})
	doctorNoteExternalInvestigationMapping              = queries.MakeStructMapping(doctorNoteExternalInvestigationType)
	doctorNoteExternalInvestigationPrimaryKeyMapping, _ = queries.BindMapping(doctorNoteExternalInvestigationType, doctorNoteExternalInvestigationMapping, doctorNoteExternalInvestigationPrimaryKeyColumns)
	doctorNoteExternalInvestigationInsertCacheMut       sync.RWMutex
	doctorNoteExternalInvestigationInsertCache          = make(map[string]insertCache)
	doctorNoteExternalInvestigationUpdateCacheMut       sync.RWMutex
	doctorNoteExternalInvestigationUpdateCache          = make(map[string]updateCache)
	doctorNoteExternalInvestigationUpsertCacheMut       sync.RWMutex
	doctorNoteExternalInvestigationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doctorNoteExternalInvestigationBeforeInsertHooks []DoctorNoteExternalInvestigationHook
var doctorNoteExternalInvestigationBeforeUpdateHooks []DoctorNoteExternalInvestigationHook
var doctorNoteExternalInvestigationBeforeDeleteHooks []DoctorNoteExternalInvestigationHook
var doctorNoteExternalInvestigationBeforeUpsertHooks []DoctorNoteExternalInvestigationHook

var doctorNoteExternalInvestigationAfterInsertHooks []DoctorNoteExternalInvestigationHook
var doctorNoteExternalInvestigationAfterSelectHooks []DoctorNoteExternalInvestigationHook
var doctorNoteExternalInvestigationAfterUpdateHooks []DoctorNoteExternalInvestigationHook
var doctorNoteExternalInvestigationAfterDeleteHooks []DoctorNoteExternalInvestigationHook
var doctorNoteExternalInvestigationAfterUpsertHooks []DoctorNoteExternalInvestigationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DoctorNoteExternalInvestigation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteExternalInvestigationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DoctorNoteExternalInvestigation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteExternalInvestigationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DoctorNoteExternalInvestigation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteExternalInvestigationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DoctorNoteExternalInvestigation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteExternalInvestigationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DoctorNoteExternalInvestigation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteExternalInvestigationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DoctorNoteExternalInvestigation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteExternalInvestigationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DoctorNoteExternalInvestigation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteExternalInvestigationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DoctorNoteExternalInvestigation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteExternalInvestigationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DoctorNoteExternalInvestigation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteExternalInvestigationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoctorNoteExternalInvestigationHook registers your hook function for all future operations.
func AddDoctorNoteExternalInvestigationHook(hookPoint boil.HookPoint, doctorNoteExternalInvestigationHook DoctorNoteExternalInvestigationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doctorNoteExternalInvestigationBeforeInsertHooks = append(doctorNoteExternalInvestigationBeforeInsertHooks, doctorNoteExternalInvestigationHook)
	case boil.BeforeUpdateHook:
		doctorNoteExternalInvestigationBeforeUpdateHooks = append(doctorNoteExternalInvestigationBeforeUpdateHooks, doctorNoteExternalInvestigationHook)
	case boil.BeforeDeleteHook:
		doctorNoteExternalInvestigationBeforeDeleteHooks = append(doctorNoteExternalInvestigationBeforeDeleteHooks, doctorNoteExternalInvestigationHook)
	case boil.BeforeUpsertHook:
		doctorNoteExternalInvestigationBeforeUpsertHooks = append(doctorNoteExternalInvestigationBeforeUpsertHooks, doctorNoteExternalInvestigationHook)
	case boil.AfterInsertHook:
		doctorNoteExternalInvestigationAfterInsertHooks = append(doctorNoteExternalInvestigationAfterInsertHooks, doctorNoteExternalInvestigationHook)
	case boil.AfterSelectHook:
		doctorNoteExternalInvestigationAfterSelectHooks = append(doctorNoteExternalInvestigationAfterSelectHooks, doctorNoteExternalInvestigationHook)
	case boil.AfterUpdateHook:
		doctorNoteExternalInvestigationAfterUpdateHooks = append(doctorNoteExternalInvestigationAfterUpdateHooks, doctorNoteExternalInvestigationHook)
	case boil.AfterDeleteHook:
		doctorNoteExternalInvestigationAfterDeleteHooks = append(doctorNoteExternalInvestigationAfterDeleteHooks, doctorNoteExternalInvestigationHook)
	case boil.AfterUpsertHook:
		doctorNoteExternalInvestigationAfterUpsertHooks = append(doctorNoteExternalInvestigationAfterUpsertHooks, doctorNoteExternalInvestigationHook)
	}
}

// One returns a single doctorNoteExternalInvestigation record from the query.
func (q doctorNoteExternalInvestigationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DoctorNoteExternalInvestigation, error) {
	o := &DoctorNoteExternalInvestigation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for DoctorNoteExternalInvestigations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DoctorNoteExternalInvestigation records from the query.
func (q doctorNoteExternalInvestigationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoctorNoteExternalInvestigationSlice, error) {
	var o []*DoctorNoteExternalInvestigation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DoctorNoteExternalInvestigation slice")
	}

	if len(doctorNoteExternalInvestigationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DoctorNoteExternalInvestigation records in the query.
func (q doctorNoteExternalInvestigationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count DoctorNoteExternalInvestigations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doctorNoteExternalInvestigationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if DoctorNoteExternalInvestigations exists")
	}

	return count > 0, nil
}

// DoctorNoteExternalInvestigations retrieves all the records using an executor.
func DoctorNoteExternalInvestigations(mods ...qm.QueryMod) doctorNoteExternalInvestigationQuery {
	mods = append(mods, qm.From("[dbo].[DoctorNoteExternalInvestigations]"))
	return doctorNoteExternalInvestigationQuery{NewQuery(mods...)}
}

// FindDoctorNoteExternalInvestigation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoctorNoteExternalInvestigation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DoctorNoteExternalInvestigation, error) {
	doctorNoteExternalInvestigationObj := &DoctorNoteExternalInvestigation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[DoctorNoteExternalInvestigations] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doctorNoteExternalInvestigationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from DoctorNoteExternalInvestigations")
	}

	if err = doctorNoteExternalInvestigationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return doctorNoteExternalInvestigationObj, err
	}

	return doctorNoteExternalInvestigationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DoctorNoteExternalInvestigation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteExternalInvestigations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteExternalInvestigationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doctorNoteExternalInvestigationInsertCacheMut.RLock()
	cache, cached := doctorNoteExternalInvestigationInsertCache[key]
	doctorNoteExternalInvestigationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doctorNoteExternalInvestigationAllColumns,
			doctorNoteExternalInvestigationColumnsWithDefault,
			doctorNoteExternalInvestigationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doctorNoteExternalInvestigationType, doctorNoteExternalInvestigationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doctorNoteExternalInvestigationType, doctorNoteExternalInvestigationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[DoctorNoteExternalInvestigations] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[DoctorNoteExternalInvestigations] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into DoctorNoteExternalInvestigations")
	}

	if !cached {
		doctorNoteExternalInvestigationInsertCacheMut.Lock()
		doctorNoteExternalInvestigationInsertCache[key] = cache
		doctorNoteExternalInvestigationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DoctorNoteExternalInvestigation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DoctorNoteExternalInvestigation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doctorNoteExternalInvestigationUpdateCacheMut.RLock()
	cache, cached := doctorNoteExternalInvestigationUpdateCache[key]
	doctorNoteExternalInvestigationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doctorNoteExternalInvestigationAllColumns,
			doctorNoteExternalInvestigationPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, doctorNoteExternalInvestigationColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update DoctorNoteExternalInvestigations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[DoctorNoteExternalInvestigations] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, doctorNoteExternalInvestigationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doctorNoteExternalInvestigationType, doctorNoteExternalInvestigationMapping, append(wl, doctorNoteExternalInvestigationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update DoctorNoteExternalInvestigations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for DoctorNoteExternalInvestigations")
	}

	if !cached {
		doctorNoteExternalInvestigationUpdateCacheMut.Lock()
		doctorNoteExternalInvestigationUpdateCache[key] = cache
		doctorNoteExternalInvestigationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doctorNoteExternalInvestigationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for DoctorNoteExternalInvestigations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for DoctorNoteExternalInvestigations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoctorNoteExternalInvestigationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteExternalInvestigationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[DoctorNoteExternalInvestigations] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, doctorNoteExternalInvestigationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doctorNoteExternalInvestigation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doctorNoteExternalInvestigation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DoctorNoteExternalInvestigation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteExternalInvestigations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteExternalInvestigationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	doctorNoteExternalInvestigationUpsertCacheMut.RLock()
	cache, cached := doctorNoteExternalInvestigationUpsertCache[key]
	doctorNoteExternalInvestigationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			doctorNoteExternalInvestigationAllColumns,
			doctorNoteExternalInvestigationColumnsWithDefault,
			doctorNoteExternalInvestigationColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, doctorNoteExternalInvestigationColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(doctorNoteExternalInvestigationPrimaryKeyColumns, v) && strmangle.ContainsAny(doctorNoteExternalInvestigationColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert DoctorNoteExternalInvestigations, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, doctorNoteExternalInvestigationColumnsWithAuto)
		ret = strmangle.SetMerge(ret, doctorNoteExternalInvestigationColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			doctorNoteExternalInvestigationAllColumns,
			doctorNoteExternalInvestigationPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, doctorNoteExternalInvestigationColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert DoctorNoteExternalInvestigations, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[DoctorNoteExternalInvestigations]", doctorNoteExternalInvestigationPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(doctorNoteExternalInvestigationPrimaryKeyColumns))
		copy(whitelist, doctorNoteExternalInvestigationPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(doctorNoteExternalInvestigationType, doctorNoteExternalInvestigationMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(doctorNoteExternalInvestigationType, doctorNoteExternalInvestigationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert DoctorNoteExternalInvestigations")
	}

	if !cached {
		doctorNoteExternalInvestigationUpsertCacheMut.Lock()
		doctorNoteExternalInvestigationUpsertCache[key] = cache
		doctorNoteExternalInvestigationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DoctorNoteExternalInvestigation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DoctorNoteExternalInvestigation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DoctorNoteExternalInvestigation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doctorNoteExternalInvestigationPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[DoctorNoteExternalInvestigations] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from DoctorNoteExternalInvestigations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for DoctorNoteExternalInvestigations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doctorNoteExternalInvestigationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doctorNoteExternalInvestigationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from DoctorNoteExternalInvestigations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteExternalInvestigations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoctorNoteExternalInvestigationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doctorNoteExternalInvestigationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteExternalInvestigationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[DoctorNoteExternalInvestigations] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteExternalInvestigationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doctorNoteExternalInvestigation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteExternalInvestigations")
	}

	if len(doctorNoteExternalInvestigationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DoctorNoteExternalInvestigation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoctorNoteExternalInvestigation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoctorNoteExternalInvestigationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoctorNoteExternalInvestigationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteExternalInvestigationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[DoctorNoteExternalInvestigations].* FROM [dbo].[DoctorNoteExternalInvestigations] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteExternalInvestigationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoctorNoteExternalInvestigationSlice")
	}

	*o = slice

	return nil
}

// DoctorNoteExternalInvestigationExists checks if the DoctorNoteExternalInvestigation row exists.
func DoctorNoteExternalInvestigationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[DoctorNoteExternalInvestigations] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if DoctorNoteExternalInvestigations exists")
	}

	return exists, nil
}
