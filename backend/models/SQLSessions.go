// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SQLSession is an object representing the database table.
type SQLSession struct {
	ID                         string     `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Value                      []byte     `boil:"Value" json:"Value" toml:"Value" yaml:"Value"`
	ExpiresAtTime              time.Time  `boil:"ExpiresAtTime" json:"ExpiresAtTime" toml:"ExpiresAtTime" yaml:"ExpiresAtTime"`
	SlidingExpirationInSeconds null.Int64 `boil:"SlidingExpirationInSeconds" json:"SlidingExpirationInSeconds,omitempty" toml:"SlidingExpirationInSeconds" yaml:"SlidingExpirationInSeconds,omitempty"`
	AbsoluteExpiration         null.Time  `boil:"AbsoluteExpiration" json:"AbsoluteExpiration,omitempty" toml:"AbsoluteExpiration" yaml:"AbsoluteExpiration,omitempty"`

	R *sQLSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sQLSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SQLSessionColumns = struct {
	ID                         string
	Value                      string
	ExpiresAtTime              string
	SlidingExpirationInSeconds string
	AbsoluteExpiration         string
}{
	ID:                         "Id",
	Value:                      "Value",
	ExpiresAtTime:              "ExpiresAtTime",
	SlidingExpirationInSeconds: "SlidingExpirationInSeconds",
	AbsoluteExpiration:         "AbsoluteExpiration",
}

var SQLSessionTableColumns = struct {
	ID                         string
	Value                      string
	ExpiresAtTime              string
	SlidingExpirationInSeconds string
	AbsoluteExpiration         string
}{
	ID:                         "SQLSessions.Id",
	Value:                      "SQLSessions.Value",
	ExpiresAtTime:              "SQLSessions.ExpiresAtTime",
	SlidingExpirationInSeconds: "SQLSessions.SlidingExpirationInSeconds",
	AbsoluteExpiration:         "SQLSessions.AbsoluteExpiration",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SQLSessionWhere = struct {
	ID                         whereHelperstring
	Value                      whereHelper__byte
	ExpiresAtTime              whereHelpertime_Time
	SlidingExpirationInSeconds whereHelpernull_Int64
	AbsoluteExpiration         whereHelpernull_Time
}{
	ID:                         whereHelperstring{field: "[dbo].[SQLSessions].[Id]"},
	Value:                      whereHelper__byte{field: "[dbo].[SQLSessions].[Value]"},
	ExpiresAtTime:              whereHelpertime_Time{field: "[dbo].[SQLSessions].[ExpiresAtTime]"},
	SlidingExpirationInSeconds: whereHelpernull_Int64{field: "[dbo].[SQLSessions].[SlidingExpirationInSeconds]"},
	AbsoluteExpiration:         whereHelpernull_Time{field: "[dbo].[SQLSessions].[AbsoluteExpiration]"},
}

// SQLSessionRels is where relationship names are stored.
var SQLSessionRels = struct {
}{}

// sQLSessionR is where relationships are stored.
type sQLSessionR struct {
}

// NewStruct creates a new relationship struct
func (*sQLSessionR) NewStruct() *sQLSessionR {
	return &sQLSessionR{}
}

// sQLSessionL is where Load methods for each relationship are stored.
type sQLSessionL struct{}

var (
	sQLSessionAllColumns            = []string{"Id", "Value", "ExpiresAtTime", "SlidingExpirationInSeconds", "AbsoluteExpiration"}
	sQLSessionColumnsWithAuto       = []string{}
	sQLSessionColumnsWithoutDefault = []string{"Id", "Value", "ExpiresAtTime", "SlidingExpirationInSeconds", "AbsoluteExpiration"}
	sQLSessionColumnsWithDefault    = []string{}
	sQLSessionPrimaryKeyColumns     = []string{"Id"}
)

type (
	// SQLSessionSlice is an alias for a slice of pointers to SQLSession.
	// This should almost always be used instead of []SQLSession.
	SQLSessionSlice []*SQLSession
	// SQLSessionHook is the signature for custom SQLSession hook methods
	SQLSessionHook func(context.Context, boil.ContextExecutor, *SQLSession) error

	sQLSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sQLSessionType                 = reflect.TypeOf(&SQLSession{})
	sQLSessionMapping              = queries.MakeStructMapping(sQLSessionType)
	sQLSessionPrimaryKeyMapping, _ = queries.BindMapping(sQLSessionType, sQLSessionMapping, sQLSessionPrimaryKeyColumns)
	sQLSessionInsertCacheMut       sync.RWMutex
	sQLSessionInsertCache          = make(map[string]insertCache)
	sQLSessionUpdateCacheMut       sync.RWMutex
	sQLSessionUpdateCache          = make(map[string]updateCache)
	sQLSessionUpsertCacheMut       sync.RWMutex
	sQLSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sQLSessionBeforeInsertHooks []SQLSessionHook
var sQLSessionBeforeUpdateHooks []SQLSessionHook
var sQLSessionBeforeDeleteHooks []SQLSessionHook
var sQLSessionBeforeUpsertHooks []SQLSessionHook

var sQLSessionAfterInsertHooks []SQLSessionHook
var sQLSessionAfterSelectHooks []SQLSessionHook
var sQLSessionAfterUpdateHooks []SQLSessionHook
var sQLSessionAfterDeleteHooks []SQLSessionHook
var sQLSessionAfterUpsertHooks []SQLSessionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SQLSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sQLSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SQLSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sQLSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SQLSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sQLSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SQLSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sQLSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SQLSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sQLSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SQLSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sQLSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SQLSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sQLSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SQLSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sQLSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SQLSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sQLSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSQLSessionHook registers your hook function for all future operations.
func AddSQLSessionHook(hookPoint boil.HookPoint, sQLSessionHook SQLSessionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sQLSessionBeforeInsertHooks = append(sQLSessionBeforeInsertHooks, sQLSessionHook)
	case boil.BeforeUpdateHook:
		sQLSessionBeforeUpdateHooks = append(sQLSessionBeforeUpdateHooks, sQLSessionHook)
	case boil.BeforeDeleteHook:
		sQLSessionBeforeDeleteHooks = append(sQLSessionBeforeDeleteHooks, sQLSessionHook)
	case boil.BeforeUpsertHook:
		sQLSessionBeforeUpsertHooks = append(sQLSessionBeforeUpsertHooks, sQLSessionHook)
	case boil.AfterInsertHook:
		sQLSessionAfterInsertHooks = append(sQLSessionAfterInsertHooks, sQLSessionHook)
	case boil.AfterSelectHook:
		sQLSessionAfterSelectHooks = append(sQLSessionAfterSelectHooks, sQLSessionHook)
	case boil.AfterUpdateHook:
		sQLSessionAfterUpdateHooks = append(sQLSessionAfterUpdateHooks, sQLSessionHook)
	case boil.AfterDeleteHook:
		sQLSessionAfterDeleteHooks = append(sQLSessionAfterDeleteHooks, sQLSessionHook)
	case boil.AfterUpsertHook:
		sQLSessionAfterUpsertHooks = append(sQLSessionAfterUpsertHooks, sQLSessionHook)
	}
}

// One returns a single sQLSession record from the query.
func (q sQLSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SQLSession, error) {
	o := &SQLSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for SQLSessions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SQLSession records from the query.
func (q sQLSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SQLSessionSlice, error) {
	var o []*SQLSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SQLSession slice")
	}

	if len(sQLSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SQLSession records in the query.
func (q sQLSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count SQLSessions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sQLSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if SQLSessions exists")
	}

	return count > 0, nil
}

// SQLSessions retrieves all the records using an executor.
func SQLSessions(mods ...qm.QueryMod) sQLSessionQuery {
	mods = append(mods, qm.From("[dbo].[SQLSessions]"))
	return sQLSessionQuery{NewQuery(mods...)}
}

// FindSQLSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSQLSession(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SQLSession, error) {
	sQLSessionObj := &SQLSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[SQLSessions] where [Id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sQLSessionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from SQLSessions")
	}

	if err = sQLSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sQLSessionObj, err
	}

	return sQLSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SQLSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SQLSessions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sQLSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sQLSessionInsertCacheMut.RLock()
	cache, cached := sQLSessionInsertCache[key]
	sQLSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sQLSessionAllColumns,
			sQLSessionColumnsWithDefault,
			sQLSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sQLSessionType, sQLSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sQLSessionType, sQLSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[SQLSessions] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[SQLSessions] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into SQLSessions")
	}

	if !cached {
		sQLSessionInsertCacheMut.Lock()
		sQLSessionInsertCache[key] = cache
		sQLSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SQLSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SQLSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sQLSessionUpdateCacheMut.RLock()
	cache, cached := sQLSessionUpdateCache[key]
	sQLSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sQLSessionAllColumns,
			sQLSessionPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, sQLSessionColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update SQLSessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[SQLSessions] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, sQLSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sQLSessionType, sQLSessionMapping, append(wl, sQLSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update SQLSessions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for SQLSessions")
	}

	if !cached {
		sQLSessionUpdateCacheMut.Lock()
		sQLSessionUpdateCache[key] = cache
		sQLSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sQLSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for SQLSessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for SQLSessions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SQLSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sQLSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[SQLSessions] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sQLSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sQLSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sQLSession")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SQLSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SQLSessions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sQLSessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sQLSessionUpsertCacheMut.RLock()
	cache, cached := sQLSessionUpsertCache[key]
	sQLSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sQLSessionAllColumns,
			sQLSessionColumnsWithDefault,
			sQLSessionColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, sQLSessionColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(sQLSessionPrimaryKeyColumns, v) && strmangle.ContainsAny(sQLSessionColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert SQLSessions, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, sQLSessionColumnsWithAuto)
		ret = strmangle.SetMerge(ret, sQLSessionColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			sQLSessionAllColumns,
			sQLSessionPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, sQLSessionColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert SQLSessions, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[SQLSessions]", sQLSessionPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(sQLSessionPrimaryKeyColumns))
		copy(whitelist, sQLSessionPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(sQLSessionType, sQLSessionMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sQLSessionType, sQLSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert SQLSessions")
	}

	if !cached {
		sQLSessionUpsertCacheMut.Lock()
		sQLSessionUpsertCache[key] = cache
		sQLSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SQLSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SQLSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SQLSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sQLSessionPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[SQLSessions] WHERE [Id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from SQLSessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for SQLSessions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sQLSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sQLSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from SQLSessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SQLSessions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SQLSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sQLSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sQLSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[SQLSessions] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sQLSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sQLSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SQLSessions")
	}

	if len(sQLSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SQLSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSQLSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SQLSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SQLSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sQLSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[SQLSessions].* FROM [dbo].[SQLSessions] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sQLSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SQLSessionSlice")
	}

	*o = slice

	return nil
}

// SQLSessionExists checks if the SQLSession row exists.
func SQLSessionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[SQLSessions] where [Id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if SQLSessions exists")
	}

	return exists, nil
}
