// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EndocrineRegistration is an object representing the database table.
type EndocrineRegistration struct {
	ID                    int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	CompanyCode           string      `boil:"CompanyCode" json:"CompanyCode" toml:"CompanyCode" yaml:"CompanyCode"`
	RegistrationNo        string      `boil:"RegistrationNo" json:"RegistrationNo" toml:"RegistrationNo" yaml:"RegistrationNo"`
	Status                string      `boil:"Status" json:"Status" toml:"Status" yaml:"Status"`
	StatusComment         string      `boil:"StatusComment" json:"StatusComment" toml:"StatusComment" yaml:"StatusComment"`
	FirstVisitOn          time.Time   `boil:"FirstVisitOn" json:"FirstVisitOn" toml:"FirstVisitOn" yaml:"FirstVisitOn"`
	FirstVisitiDoctor     null.String `boil:"FirstVisitiDoctor" json:"FirstVisitiDoctor,omitempty" toml:"FirstVisitiDoctor" yaml:"FirstVisitiDoctor,omitempty"`
	PresentingComplaint   null.String `boil:"PresentingComplaint" json:"PresentingComplaint,omitempty" toml:"PresentingComplaint" yaml:"PresentingComplaint,omitempty"`
	PastMedicalSurgicalHx null.String `boil:"PastMedicalSurgicalHx" json:"PastMedicalSurgicalHx,omitempty" toml:"PastMedicalSurgicalHx" yaml:"PastMedicalSurgicalHx,omitempty"`
	ObstreticMenstrualHx  null.String `boil:"ObstreticMenstrualHx" json:"ObstreticMenstrualHx,omitempty" toml:"ObstreticMenstrualHx" yaml:"ObstreticMenstrualHx,omitempty"`
	MedicationSummary     null.String `boil:"MedicationSummary" json:"MedicationSummary,omitempty" toml:"MedicationSummary" yaml:"MedicationSummary,omitempty"`
	AllergicHx            null.String `boil:"AllergicHx" json:"AllergicHx,omitempty" toml:"AllergicHx" yaml:"AllergicHx,omitempty"`
	SocialHx              null.String `boil:"SocialHx" json:"SocialHx,omitempty" toml:"SocialHx" yaml:"SocialHx,omitempty"`
	Occupation            null.String `boil:"Occupation" json:"Occupation,omitempty" toml:"Occupation" yaml:"Occupation,omitempty"`
	Smoking               null.String `boil:"Smoking" json:"Smoking,omitempty" toml:"Smoking" yaml:"Smoking,omitempty"`
	Alcohol               null.String `boil:"Alcohol" json:"Alcohol,omitempty" toml:"Alcohol" yaml:"Alcohol,omitempty"`
	GeneralExamination    null.String `boil:"GeneralExamination" json:"GeneralExamination,omitempty" toml:"GeneralExamination" yaml:"GeneralExamination,omitempty"`
	FGS                   null.String `boil:"FGS" json:"FGS,omitempty" toml:"FGS" yaml:"FGS,omitempty"`
	FGSImagePath          null.String `boil:"FGSImagePath" json:"FGSImagePath,omitempty" toml:"FGSImagePath" yaml:"FGSImagePath,omitempty"`
	ThyroidExam           null.String `boil:"ThyroidExam" json:"ThyroidExam,omitempty" toml:"ThyroidExam" yaml:"ThyroidExam,omitempty"`
	Eyes                  null.String `boil:"Eyes" json:"Eyes,omitempty" toml:"Eyes" yaml:"Eyes,omitempty"`
	RS                    null.String `boil:"RS" json:"RS,omitempty" toml:"RS" yaml:"RS,omitempty"`
	ABD                   null.String `boil:"ABD" json:"ABD,omitempty" toml:"ABD" yaml:"ABD,omitempty"`
	CNS                   null.String `boil:"CNS" json:"CNS,omitempty" toml:"CNS" yaml:"CNS,omitempty"`
	LastModifyUser        null.String `boil:"LastModifyUser" json:"LastModifyUser,omitempty" toml:"LastModifyUser" yaml:"LastModifyUser,omitempty"`
	LastModifyOn          time.Time   `boil:"LastModifyOn" json:"LastModifyOn" toml:"LastModifyOn" yaml:"LastModifyOn"`
	Classification        string      `boil:"Classification" json:"Classification" toml:"Classification" yaml:"Classification"`

	R *endocrineRegistrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L endocrineRegistrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EndocrineRegistrationColumns = struct {
	ID                    string
	CompanyCode           string
	RegistrationNo        string
	Status                string
	StatusComment         string
	FirstVisitOn          string
	FirstVisitiDoctor     string
	PresentingComplaint   string
	PastMedicalSurgicalHx string
	ObstreticMenstrualHx  string
	MedicationSummary     string
	AllergicHx            string
	SocialHx              string
	Occupation            string
	Smoking               string
	Alcohol               string
	GeneralExamination    string
	FGS                   string
	FGSImagePath          string
	ThyroidExam           string
	Eyes                  string
	RS                    string
	ABD                   string
	CNS                   string
	LastModifyUser        string
	LastModifyOn          string
	Classification        string
}{
	ID:                    "ID",
	CompanyCode:           "CompanyCode",
	RegistrationNo:        "RegistrationNo",
	Status:                "Status",
	StatusComment:         "StatusComment",
	FirstVisitOn:          "FirstVisitOn",
	FirstVisitiDoctor:     "FirstVisitiDoctor",
	PresentingComplaint:   "PresentingComplaint",
	PastMedicalSurgicalHx: "PastMedicalSurgicalHx",
	ObstreticMenstrualHx:  "ObstreticMenstrualHx",
	MedicationSummary:     "MedicationSummary",
	AllergicHx:            "AllergicHx",
	SocialHx:              "SocialHx",
	Occupation:            "Occupation",
	Smoking:               "Smoking",
	Alcohol:               "Alcohol",
	GeneralExamination:    "GeneralExamination",
	FGS:                   "FGS",
	FGSImagePath:          "FGSImagePath",
	ThyroidExam:           "ThyroidExam",
	Eyes:                  "Eyes",
	RS:                    "RS",
	ABD:                   "ABD",
	CNS:                   "CNS",
	LastModifyUser:        "LastModifyUser",
	LastModifyOn:          "LastModifyOn",
	Classification:        "Classification",
}

var EndocrineRegistrationTableColumns = struct {
	ID                    string
	CompanyCode           string
	RegistrationNo        string
	Status                string
	StatusComment         string
	FirstVisitOn          string
	FirstVisitiDoctor     string
	PresentingComplaint   string
	PastMedicalSurgicalHx string
	ObstreticMenstrualHx  string
	MedicationSummary     string
	AllergicHx            string
	SocialHx              string
	Occupation            string
	Smoking               string
	Alcohol               string
	GeneralExamination    string
	FGS                   string
	FGSImagePath          string
	ThyroidExam           string
	Eyes                  string
	RS                    string
	ABD                   string
	CNS                   string
	LastModifyUser        string
	LastModifyOn          string
	Classification        string
}{
	ID:                    "EndocrineRegistration.ID",
	CompanyCode:           "EndocrineRegistration.CompanyCode",
	RegistrationNo:        "EndocrineRegistration.RegistrationNo",
	Status:                "EndocrineRegistration.Status",
	StatusComment:         "EndocrineRegistration.StatusComment",
	FirstVisitOn:          "EndocrineRegistration.FirstVisitOn",
	FirstVisitiDoctor:     "EndocrineRegistration.FirstVisitiDoctor",
	PresentingComplaint:   "EndocrineRegistration.PresentingComplaint",
	PastMedicalSurgicalHx: "EndocrineRegistration.PastMedicalSurgicalHx",
	ObstreticMenstrualHx:  "EndocrineRegistration.ObstreticMenstrualHx",
	MedicationSummary:     "EndocrineRegistration.MedicationSummary",
	AllergicHx:            "EndocrineRegistration.AllergicHx",
	SocialHx:              "EndocrineRegistration.SocialHx",
	Occupation:            "EndocrineRegistration.Occupation",
	Smoking:               "EndocrineRegistration.Smoking",
	Alcohol:               "EndocrineRegistration.Alcohol",
	GeneralExamination:    "EndocrineRegistration.GeneralExamination",
	FGS:                   "EndocrineRegistration.FGS",
	FGSImagePath:          "EndocrineRegistration.FGSImagePath",
	ThyroidExam:           "EndocrineRegistration.ThyroidExam",
	Eyes:                  "EndocrineRegistration.Eyes",
	RS:                    "EndocrineRegistration.RS",
	ABD:                   "EndocrineRegistration.ABD",
	CNS:                   "EndocrineRegistration.CNS",
	LastModifyUser:        "EndocrineRegistration.LastModifyUser",
	LastModifyOn:          "EndocrineRegistration.LastModifyOn",
	Classification:        "EndocrineRegistration.Classification",
}

// Generated where

var EndocrineRegistrationWhere = struct {
	ID                    whereHelperint
	CompanyCode           whereHelperstring
	RegistrationNo        whereHelperstring
	Status                whereHelperstring
	StatusComment         whereHelperstring
	FirstVisitOn          whereHelpertime_Time
	FirstVisitiDoctor     whereHelpernull_String
	PresentingComplaint   whereHelpernull_String
	PastMedicalSurgicalHx whereHelpernull_String
	ObstreticMenstrualHx  whereHelpernull_String
	MedicationSummary     whereHelpernull_String
	AllergicHx            whereHelpernull_String
	SocialHx              whereHelpernull_String
	Occupation            whereHelpernull_String
	Smoking               whereHelpernull_String
	Alcohol               whereHelpernull_String
	GeneralExamination    whereHelpernull_String
	FGS                   whereHelpernull_String
	FGSImagePath          whereHelpernull_String
	ThyroidExam           whereHelpernull_String
	Eyes                  whereHelpernull_String
	RS                    whereHelpernull_String
	ABD                   whereHelpernull_String
	CNS                   whereHelpernull_String
	LastModifyUser        whereHelpernull_String
	LastModifyOn          whereHelpertime_Time
	Classification        whereHelperstring
}{
	ID:                    whereHelperint{field: "[dbo].[EndocrineRegistration].[ID]"},
	CompanyCode:           whereHelperstring{field: "[dbo].[EndocrineRegistration].[CompanyCode]"},
	RegistrationNo:        whereHelperstring{field: "[dbo].[EndocrineRegistration].[RegistrationNo]"},
	Status:                whereHelperstring{field: "[dbo].[EndocrineRegistration].[Status]"},
	StatusComment:         whereHelperstring{field: "[dbo].[EndocrineRegistration].[StatusComment]"},
	FirstVisitOn:          whereHelpertime_Time{field: "[dbo].[EndocrineRegistration].[FirstVisitOn]"},
	FirstVisitiDoctor:     whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[FirstVisitiDoctor]"},
	PresentingComplaint:   whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[PresentingComplaint]"},
	PastMedicalSurgicalHx: whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[PastMedicalSurgicalHx]"},
	ObstreticMenstrualHx:  whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[ObstreticMenstrualHx]"},
	MedicationSummary:     whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[MedicationSummary]"},
	AllergicHx:            whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[AllergicHx]"},
	SocialHx:              whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[SocialHx]"},
	Occupation:            whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[Occupation]"},
	Smoking:               whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[Smoking]"},
	Alcohol:               whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[Alcohol]"},
	GeneralExamination:    whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[GeneralExamination]"},
	FGS:                   whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[FGS]"},
	FGSImagePath:          whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[FGSImagePath]"},
	ThyroidExam:           whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[ThyroidExam]"},
	Eyes:                  whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[Eyes]"},
	RS:                    whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[RS]"},
	ABD:                   whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[ABD]"},
	CNS:                   whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[CNS]"},
	LastModifyUser:        whereHelpernull_String{field: "[dbo].[EndocrineRegistration].[LastModifyUser]"},
	LastModifyOn:          whereHelpertime_Time{field: "[dbo].[EndocrineRegistration].[LastModifyOn]"},
	Classification:        whereHelperstring{field: "[dbo].[EndocrineRegistration].[Classification]"},
}

// EndocrineRegistrationRels is where relationship names are stored.
var EndocrineRegistrationRels = struct {
}{}

// endocrineRegistrationR is where relationships are stored.
type endocrineRegistrationR struct {
}

// NewStruct creates a new relationship struct
func (*endocrineRegistrationR) NewStruct() *endocrineRegistrationR {
	return &endocrineRegistrationR{}
}

// endocrineRegistrationL is where Load methods for each relationship are stored.
type endocrineRegistrationL struct{}

var (
	endocrineRegistrationAllColumns            = []string{"ID", "CompanyCode", "RegistrationNo", "Status", "StatusComment", "FirstVisitOn", "FirstVisitiDoctor", "PresentingComplaint", "PastMedicalSurgicalHx", "ObstreticMenstrualHx", "MedicationSummary", "AllergicHx", "SocialHx", "Occupation", "Smoking", "Alcohol", "GeneralExamination", "FGS", "FGSImagePath", "ThyroidExam", "Eyes", "RS", "ABD", "CNS", "LastModifyUser", "LastModifyOn", "Classification"}
	endocrineRegistrationColumnsWithAuto       = []string{}
	endocrineRegistrationColumnsWithoutDefault = []string{"FirstVisitiDoctor", "PresentingComplaint", "PastMedicalSurgicalHx", "ObstreticMenstrualHx", "MedicationSummary", "AllergicHx", "SocialHx", "Occupation", "Smoking", "Alcohol", "GeneralExamination", "FGS", "FGSImagePath", "ThyroidExam", "Eyes", "RS", "ABD", "CNS", "LastModifyUser"}
	endocrineRegistrationColumnsWithDefault    = []string{"ID", "CompanyCode", "RegistrationNo", "Status", "StatusComment", "FirstVisitOn", "LastModifyOn", "Classification"}
	endocrineRegistrationPrimaryKeyColumns     = []string{"ID"}
)

type (
	// EndocrineRegistrationSlice is an alias for a slice of pointers to EndocrineRegistration.
	// This should almost always be used instead of []EndocrineRegistration.
	EndocrineRegistrationSlice []*EndocrineRegistration
	// EndocrineRegistrationHook is the signature for custom EndocrineRegistration hook methods
	EndocrineRegistrationHook func(context.Context, boil.ContextExecutor, *EndocrineRegistration) error

	endocrineRegistrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	endocrineRegistrationType                 = reflect.TypeOf(&EndocrineRegistration{})
	endocrineRegistrationMapping              = queries.MakeStructMapping(endocrineRegistrationType)
	endocrineRegistrationPrimaryKeyMapping, _ = queries.BindMapping(endocrineRegistrationType, endocrineRegistrationMapping, endocrineRegistrationPrimaryKeyColumns)
	endocrineRegistrationInsertCacheMut       sync.RWMutex
	endocrineRegistrationInsertCache          = make(map[string]insertCache)
	endocrineRegistrationUpdateCacheMut       sync.RWMutex
	endocrineRegistrationUpdateCache          = make(map[string]updateCache)
	endocrineRegistrationUpsertCacheMut       sync.RWMutex
	endocrineRegistrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var endocrineRegistrationBeforeInsertHooks []EndocrineRegistrationHook
var endocrineRegistrationBeforeUpdateHooks []EndocrineRegistrationHook
var endocrineRegistrationBeforeDeleteHooks []EndocrineRegistrationHook
var endocrineRegistrationBeforeUpsertHooks []EndocrineRegistrationHook

var endocrineRegistrationAfterInsertHooks []EndocrineRegistrationHook
var endocrineRegistrationAfterSelectHooks []EndocrineRegistrationHook
var endocrineRegistrationAfterUpdateHooks []EndocrineRegistrationHook
var endocrineRegistrationAfterDeleteHooks []EndocrineRegistrationHook
var endocrineRegistrationAfterUpsertHooks []EndocrineRegistrationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EndocrineRegistration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endocrineRegistrationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EndocrineRegistration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endocrineRegistrationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EndocrineRegistration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endocrineRegistrationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EndocrineRegistration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endocrineRegistrationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EndocrineRegistration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endocrineRegistrationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EndocrineRegistration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endocrineRegistrationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EndocrineRegistration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endocrineRegistrationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EndocrineRegistration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endocrineRegistrationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EndocrineRegistration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range endocrineRegistrationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEndocrineRegistrationHook registers your hook function for all future operations.
func AddEndocrineRegistrationHook(hookPoint boil.HookPoint, endocrineRegistrationHook EndocrineRegistrationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		endocrineRegistrationBeforeInsertHooks = append(endocrineRegistrationBeforeInsertHooks, endocrineRegistrationHook)
	case boil.BeforeUpdateHook:
		endocrineRegistrationBeforeUpdateHooks = append(endocrineRegistrationBeforeUpdateHooks, endocrineRegistrationHook)
	case boil.BeforeDeleteHook:
		endocrineRegistrationBeforeDeleteHooks = append(endocrineRegistrationBeforeDeleteHooks, endocrineRegistrationHook)
	case boil.BeforeUpsertHook:
		endocrineRegistrationBeforeUpsertHooks = append(endocrineRegistrationBeforeUpsertHooks, endocrineRegistrationHook)
	case boil.AfterInsertHook:
		endocrineRegistrationAfterInsertHooks = append(endocrineRegistrationAfterInsertHooks, endocrineRegistrationHook)
	case boil.AfterSelectHook:
		endocrineRegistrationAfterSelectHooks = append(endocrineRegistrationAfterSelectHooks, endocrineRegistrationHook)
	case boil.AfterUpdateHook:
		endocrineRegistrationAfterUpdateHooks = append(endocrineRegistrationAfterUpdateHooks, endocrineRegistrationHook)
	case boil.AfterDeleteHook:
		endocrineRegistrationAfterDeleteHooks = append(endocrineRegistrationAfterDeleteHooks, endocrineRegistrationHook)
	case boil.AfterUpsertHook:
		endocrineRegistrationAfterUpsertHooks = append(endocrineRegistrationAfterUpsertHooks, endocrineRegistrationHook)
	}
}

// One returns a single endocrineRegistration record from the query.
func (q endocrineRegistrationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EndocrineRegistration, error) {
	o := &EndocrineRegistration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for EndocrineRegistration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EndocrineRegistration records from the query.
func (q endocrineRegistrationQuery) All(ctx context.Context, exec boil.ContextExecutor) (EndocrineRegistrationSlice, error) {
	var o []*EndocrineRegistration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EndocrineRegistration slice")
	}

	if len(endocrineRegistrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EndocrineRegistration records in the query.
func (q endocrineRegistrationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count EndocrineRegistration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q endocrineRegistrationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if EndocrineRegistration exists")
	}

	return count > 0, nil
}

// EndocrineRegistrations retrieves all the records using an executor.
func EndocrineRegistrations(mods ...qm.QueryMod) endocrineRegistrationQuery {
	mods = append(mods, qm.From("[dbo].[EndocrineRegistration]"))
	return endocrineRegistrationQuery{NewQuery(mods...)}
}

// FindEndocrineRegistration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEndocrineRegistration(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*EndocrineRegistration, error) {
	endocrineRegistrationObj := &EndocrineRegistration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[EndocrineRegistration] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, endocrineRegistrationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from EndocrineRegistration")
	}

	if err = endocrineRegistrationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return endocrineRegistrationObj, err
	}

	return endocrineRegistrationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EndocrineRegistration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no EndocrineRegistration provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(endocrineRegistrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	endocrineRegistrationInsertCacheMut.RLock()
	cache, cached := endocrineRegistrationInsertCache[key]
	endocrineRegistrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			endocrineRegistrationAllColumns,
			endocrineRegistrationColumnsWithDefault,
			endocrineRegistrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(endocrineRegistrationType, endocrineRegistrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(endocrineRegistrationType, endocrineRegistrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[EndocrineRegistration] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[EndocrineRegistration] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into EndocrineRegistration")
	}

	if !cached {
		endocrineRegistrationInsertCacheMut.Lock()
		endocrineRegistrationInsertCache[key] = cache
		endocrineRegistrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EndocrineRegistration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EndocrineRegistration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	endocrineRegistrationUpdateCacheMut.RLock()
	cache, cached := endocrineRegistrationUpdateCache[key]
	endocrineRegistrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			endocrineRegistrationAllColumns,
			endocrineRegistrationPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, endocrineRegistrationColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update EndocrineRegistration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[EndocrineRegistration] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, endocrineRegistrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(endocrineRegistrationType, endocrineRegistrationMapping, append(wl, endocrineRegistrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update EndocrineRegistration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for EndocrineRegistration")
	}

	if !cached {
		endocrineRegistrationUpdateCacheMut.Lock()
		endocrineRegistrationUpdateCache[key] = cache
		endocrineRegistrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q endocrineRegistrationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for EndocrineRegistration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for EndocrineRegistration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EndocrineRegistrationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), endocrineRegistrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[EndocrineRegistration] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, endocrineRegistrationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in endocrineRegistration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all endocrineRegistration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *EndocrineRegistration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no EndocrineRegistration provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(endocrineRegistrationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	endocrineRegistrationUpsertCacheMut.RLock()
	cache, cached := endocrineRegistrationUpsertCache[key]
	endocrineRegistrationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			endocrineRegistrationAllColumns,
			endocrineRegistrationColumnsWithDefault,
			endocrineRegistrationColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, endocrineRegistrationColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(endocrineRegistrationPrimaryKeyColumns, v) && strmangle.ContainsAny(endocrineRegistrationColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert EndocrineRegistration, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, endocrineRegistrationColumnsWithAuto)
		ret = strmangle.SetMerge(ret, endocrineRegistrationColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			endocrineRegistrationAllColumns,
			endocrineRegistrationPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, endocrineRegistrationColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert EndocrineRegistration, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[EndocrineRegistration]", endocrineRegistrationPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(endocrineRegistrationPrimaryKeyColumns))
		copy(whitelist, endocrineRegistrationPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(endocrineRegistrationType, endocrineRegistrationMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(endocrineRegistrationType, endocrineRegistrationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert EndocrineRegistration")
	}

	if !cached {
		endocrineRegistrationUpsertCacheMut.Lock()
		endocrineRegistrationUpsertCache[key] = cache
		endocrineRegistrationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EndocrineRegistration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EndocrineRegistration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EndocrineRegistration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), endocrineRegistrationPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[EndocrineRegistration] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from EndocrineRegistration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for EndocrineRegistration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q endocrineRegistrationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no endocrineRegistrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from EndocrineRegistration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for EndocrineRegistration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EndocrineRegistrationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(endocrineRegistrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), endocrineRegistrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[EndocrineRegistration] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, endocrineRegistrationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from endocrineRegistration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for EndocrineRegistration")
	}

	if len(endocrineRegistrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EndocrineRegistration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEndocrineRegistration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EndocrineRegistrationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EndocrineRegistrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), endocrineRegistrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[EndocrineRegistration].* FROM [dbo].[EndocrineRegistration] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, endocrineRegistrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EndocrineRegistrationSlice")
	}

	*o = slice

	return nil
}

// EndocrineRegistrationExists checks if the EndocrineRegistration row exists.
func EndocrineRegistrationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[EndocrineRegistration] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if EndocrineRegistration exists")
	}

	return exists, nil
}
