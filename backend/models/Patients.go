// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Patient is an object representing the database table.
type Patient struct {
	ID             int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	PatientName    null.String `boil:"PatientName" json:"PatientName,omitempty" toml:"PatientName" yaml:"PatientName,omitempty"`
	RegistrationNo null.String `boil:"RegistrationNo" json:"RegistrationNo,omitempty" toml:"RegistrationNo" yaml:"RegistrationNo,omitempty"`
	Category       null.String `boil:"Category" json:"Category,omitempty" toml:"Category" yaml:"Category,omitempty"`
	Gender         null.String `boil:"Gender" json:"Gender,omitempty" toml:"Gender" yaml:"Gender,omitempty"`
	Age            null.String `boil:"Age" json:"Age,omitempty" toml:"Age" yaml:"Age,omitempty"`
	ReferenceNo    null.String `boil:"ReferenceNo" json:"ReferenceNo,omitempty" toml:"ReferenceNo" yaml:"ReferenceNo,omitempty"`
	AppNo          null.Int    `boil:"AppNo" json:"AppNo,omitempty" toml:"AppNo" yaml:"AppNo,omitempty"`
	AppDate        null.Time   `boil:"AppDate" json:"AppDate,omitempty" toml:"AppDate" yaml:"AppDate,omitempty"`
	Clinic         null.String `boil:"Clinic" json:"Clinic,omitempty" toml:"Clinic" yaml:"Clinic,omitempty"`
	Address        null.String `boil:"Address" json:"Address,omitempty" toml:"Address" yaml:"Address,omitempty"`
	ServiceStatus  null.String `boil:"ServiceStatus" json:"ServiceStatus,omitempty" toml:"ServiceStatus" yaml:"ServiceStatus,omitempty"`
	Priority       null.Int    `boil:"Priority" json:"Priority,omitempty" toml:"Priority" yaml:"Priority,omitempty"`
	Comment        null.String `boil:"Comment" json:"Comment,omitempty" toml:"Comment" yaml:"Comment,omitempty"`
	NewAppNo       null.Int    `boil:"NewAppNo" json:"NewAppNo,omitempty" toml:"NewAppNo" yaml:"NewAppNo,omitempty"`

	R *patientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L patientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PatientColumns = struct {
	ID             string
	PatientName    string
	RegistrationNo string
	Category       string
	Gender         string
	Age            string
	ReferenceNo    string
	AppNo          string
	AppDate        string
	Clinic         string
	Address        string
	ServiceStatus  string
	Priority       string
	Comment        string
	NewAppNo       string
}{
	ID:             "Id",
	PatientName:    "PatientName",
	RegistrationNo: "RegistrationNo",
	Category:       "Category",
	Gender:         "Gender",
	Age:            "Age",
	ReferenceNo:    "ReferenceNo",
	AppNo:          "AppNo",
	AppDate:        "AppDate",
	Clinic:         "Clinic",
	Address:        "Address",
	ServiceStatus:  "ServiceStatus",
	Priority:       "Priority",
	Comment:        "Comment",
	NewAppNo:       "NewAppNo",
}

var PatientTableColumns = struct {
	ID             string
	PatientName    string
	RegistrationNo string
	Category       string
	Gender         string
	Age            string
	ReferenceNo    string
	AppNo          string
	AppDate        string
	Clinic         string
	Address        string
	ServiceStatus  string
	Priority       string
	Comment        string
	NewAppNo       string
}{
	ID:             "Patients.Id",
	PatientName:    "Patients.PatientName",
	RegistrationNo: "Patients.RegistrationNo",
	Category:       "Patients.Category",
	Gender:         "Patients.Gender",
	Age:            "Patients.Age",
	ReferenceNo:    "Patients.ReferenceNo",
	AppNo:          "Patients.AppNo",
	AppDate:        "Patients.AppDate",
	Clinic:         "Patients.Clinic",
	Address:        "Patients.Address",
	ServiceStatus:  "Patients.ServiceStatus",
	Priority:       "Patients.Priority",
	Comment:        "Patients.Comment",
	NewAppNo:       "Patients.NewAppNo",
}

// Generated where

var PatientWhere = struct {
	ID             whereHelperint
	PatientName    whereHelpernull_String
	RegistrationNo whereHelpernull_String
	Category       whereHelpernull_String
	Gender         whereHelpernull_String
	Age            whereHelpernull_String
	ReferenceNo    whereHelpernull_String
	AppNo          whereHelpernull_Int
	AppDate        whereHelpernull_Time
	Clinic         whereHelpernull_String
	Address        whereHelpernull_String
	ServiceStatus  whereHelpernull_String
	Priority       whereHelpernull_Int
	Comment        whereHelpernull_String
	NewAppNo       whereHelpernull_Int
}{
	ID:             whereHelperint{field: "[dbo].[Patients].[Id]"},
	PatientName:    whereHelpernull_String{field: "[dbo].[Patients].[PatientName]"},
	RegistrationNo: whereHelpernull_String{field: "[dbo].[Patients].[RegistrationNo]"},
	Category:       whereHelpernull_String{field: "[dbo].[Patients].[Category]"},
	Gender:         whereHelpernull_String{field: "[dbo].[Patients].[Gender]"},
	Age:            whereHelpernull_String{field: "[dbo].[Patients].[Age]"},
	ReferenceNo:    whereHelpernull_String{field: "[dbo].[Patients].[ReferenceNo]"},
	AppNo:          whereHelpernull_Int{field: "[dbo].[Patients].[AppNo]"},
	AppDate:        whereHelpernull_Time{field: "[dbo].[Patients].[AppDate]"},
	Clinic:         whereHelpernull_String{field: "[dbo].[Patients].[Clinic]"},
	Address:        whereHelpernull_String{field: "[dbo].[Patients].[Address]"},
	ServiceStatus:  whereHelpernull_String{field: "[dbo].[Patients].[ServiceStatus]"},
	Priority:       whereHelpernull_Int{field: "[dbo].[Patients].[Priority]"},
	Comment:        whereHelpernull_String{field: "[dbo].[Patients].[Comment]"},
	NewAppNo:       whereHelpernull_Int{field: "[dbo].[Patients].[NewAppNo]"},
}

// PatientRels is where relationship names are stored.
var PatientRels = struct {
}{}

// patientR is where relationships are stored.
type patientR struct {
}

// NewStruct creates a new relationship struct
func (*patientR) NewStruct() *patientR {
	return &patientR{}
}

// patientL is where Load methods for each relationship are stored.
type patientL struct{}

var (
	patientAllColumns            = []string{"Id", "PatientName", "RegistrationNo", "Category", "Gender", "Age", "ReferenceNo", "AppNo", "AppDate", "Clinic", "Address", "ServiceStatus", "Priority", "Comment", "NewAppNo"}
	patientColumnsWithAuto       = []string{}
	patientColumnsWithoutDefault = []string{"Id", "PatientName", "RegistrationNo", "Category", "Gender", "Age", "ReferenceNo", "AppNo", "AppDate", "Clinic", "Address", "ServiceStatus", "Priority", "Comment"}
	patientColumnsWithDefault    = []string{"NewAppNo"}
	patientPrimaryKeyColumns     = []string{"Id"}
)

type (
	// PatientSlice is an alias for a slice of pointers to Patient.
	// This should almost always be used instead of []Patient.
	PatientSlice []*Patient
	// PatientHook is the signature for custom Patient hook methods
	PatientHook func(context.Context, boil.ContextExecutor, *Patient) error

	patientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	patientType                 = reflect.TypeOf(&Patient{})
	patientMapping              = queries.MakeStructMapping(patientType)
	patientPrimaryKeyMapping, _ = queries.BindMapping(patientType, patientMapping, patientPrimaryKeyColumns)
	patientInsertCacheMut       sync.RWMutex
	patientInsertCache          = make(map[string]insertCache)
	patientUpdateCacheMut       sync.RWMutex
	patientUpdateCache          = make(map[string]updateCache)
	patientUpsertCacheMut       sync.RWMutex
	patientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var patientBeforeInsertHooks []PatientHook
var patientBeforeUpdateHooks []PatientHook
var patientBeforeDeleteHooks []PatientHook
var patientBeforeUpsertHooks []PatientHook

var patientAfterInsertHooks []PatientHook
var patientAfterSelectHooks []PatientHook
var patientAfterUpdateHooks []PatientHook
var patientAfterDeleteHooks []PatientHook
var patientAfterUpsertHooks []PatientHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Patient) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Patient) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Patient) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Patient) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Patient) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Patient) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Patient) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Patient) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Patient) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPatientHook registers your hook function for all future operations.
func AddPatientHook(hookPoint boil.HookPoint, patientHook PatientHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		patientBeforeInsertHooks = append(patientBeforeInsertHooks, patientHook)
	case boil.BeforeUpdateHook:
		patientBeforeUpdateHooks = append(patientBeforeUpdateHooks, patientHook)
	case boil.BeforeDeleteHook:
		patientBeforeDeleteHooks = append(patientBeforeDeleteHooks, patientHook)
	case boil.BeforeUpsertHook:
		patientBeforeUpsertHooks = append(patientBeforeUpsertHooks, patientHook)
	case boil.AfterInsertHook:
		patientAfterInsertHooks = append(patientAfterInsertHooks, patientHook)
	case boil.AfterSelectHook:
		patientAfterSelectHooks = append(patientAfterSelectHooks, patientHook)
	case boil.AfterUpdateHook:
		patientAfterUpdateHooks = append(patientAfterUpdateHooks, patientHook)
	case boil.AfterDeleteHook:
		patientAfterDeleteHooks = append(patientAfterDeleteHooks, patientHook)
	case boil.AfterUpsertHook:
		patientAfterUpsertHooks = append(patientAfterUpsertHooks, patientHook)
	}
}

// One returns a single patient record from the query.
func (q patientQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Patient, error) {
	o := &Patient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for Patients")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Patient records from the query.
func (q patientQuery) All(ctx context.Context, exec boil.ContextExecutor) (PatientSlice, error) {
	var o []*Patient

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Patient slice")
	}

	if len(patientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Patient records in the query.
func (q patientQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count Patients rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q patientQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if Patients exists")
	}

	return count > 0, nil
}

// Patients retrieves all the records using an executor.
func Patients(mods ...qm.QueryMod) patientQuery {
	mods = append(mods, qm.From("[dbo].[Patients]"))
	return patientQuery{NewQuery(mods...)}
}

// FindPatient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPatient(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Patient, error) {
	patientObj := &Patient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[Patients] where [Id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, patientObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from Patients")
	}

	if err = patientObj.doAfterSelectHooks(ctx, exec); err != nil {
		return patientObj, err
	}

	return patientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Patient) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Patients provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	patientInsertCacheMut.RLock()
	cache, cached := patientInsertCache[key]
	patientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			patientAllColumns,
			patientColumnsWithDefault,
			patientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(patientType, patientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(patientType, patientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[Patients] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[Patients] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into Patients")
	}

	if !cached {
		patientInsertCacheMut.Lock()
		patientInsertCache[key] = cache
		patientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Patient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Patient) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	patientUpdateCacheMut.RLock()
	cache, cached := patientUpdateCache[key]
	patientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			patientAllColumns,
			patientPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, patientColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update Patients, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[Patients] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, patientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(patientType, patientMapping, append(wl, patientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update Patients row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for Patients")
	}

	if !cached {
		patientUpdateCacheMut.Lock()
		patientUpdateCache[key] = cache
		patientUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q patientQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for Patients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for Patients")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PatientSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[Patients] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, patientPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in patient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all patient")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Patient) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no Patients provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	patientUpsertCacheMut.RLock()
	cache, cached := patientUpsertCache[key]
	patientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			patientAllColumns,
			patientColumnsWithDefault,
			patientColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, patientColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(patientPrimaryKeyColumns, v) && strmangle.ContainsAny(patientColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert Patients, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, patientColumnsWithAuto)
		ret = strmangle.SetMerge(ret, patientColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			patientAllColumns,
			patientPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, patientColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert Patients, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[Patients]", patientPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(patientPrimaryKeyColumns))
		copy(whitelist, patientPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(patientType, patientMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(patientType, patientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert Patients")
	}

	if !cached {
		patientUpsertCacheMut.Lock()
		patientUpsertCache[key] = cache
		patientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Patient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Patient) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Patient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), patientPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[Patients] WHERE [Id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from Patients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for Patients")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q patientQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no patientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from Patients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Patients")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PatientSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(patientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[Patients] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patientPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for Patients")
	}

	if len(patientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Patient) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPatient(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PatientSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PatientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[Patients].* FROM [dbo].[Patients] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PatientSlice")
	}

	*o = slice

	return nil
}

// PatientExists checks if the Patient row exists.
func PatientExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[Patients] where [Id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if Patients exists")
	}

	return exists, nil
}
