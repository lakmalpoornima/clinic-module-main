// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ServiceSubCategory is an object representing the database table.
type ServiceSubCategory struct {
	ID          int    `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	ServiceCode string `boil:"ServiceCode" json:"ServiceCode" toml:"ServiceCode" yaml:"ServiceCode"`
	SubCategory string `boil:"SubCategory" json:"SubCategory" toml:"SubCategory" yaml:"SubCategory"`
	Element     string `boil:"Element" json:"Element" toml:"Element" yaml:"Element"`

	R *serviceSubCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L serviceSubCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ServiceSubCategoryColumns = struct {
	ID          string
	ServiceCode string
	SubCategory string
	Element     string
}{
	ID:          "ID",
	ServiceCode: "ServiceCode",
	SubCategory: "SubCategory",
	Element:     "Element",
}

var ServiceSubCategoryTableColumns = struct {
	ID          string
	ServiceCode string
	SubCategory string
	Element     string
}{
	ID:          "ServiceSubCategory.ID",
	ServiceCode: "ServiceSubCategory.ServiceCode",
	SubCategory: "ServiceSubCategory.SubCategory",
	Element:     "ServiceSubCategory.Element",
}

// Generated where

var ServiceSubCategoryWhere = struct {
	ID          whereHelperint
	ServiceCode whereHelperstring
	SubCategory whereHelperstring
	Element     whereHelperstring
}{
	ID:          whereHelperint{field: "[dbo].[ServiceSubCategory].[ID]"},
	ServiceCode: whereHelperstring{field: "[dbo].[ServiceSubCategory].[ServiceCode]"},
	SubCategory: whereHelperstring{field: "[dbo].[ServiceSubCategory].[SubCategory]"},
	Element:     whereHelperstring{field: "[dbo].[ServiceSubCategory].[Element]"},
}

// ServiceSubCategoryRels is where relationship names are stored.
var ServiceSubCategoryRels = struct {
}{}

// serviceSubCategoryR is where relationships are stored.
type serviceSubCategoryR struct {
}

// NewStruct creates a new relationship struct
func (*serviceSubCategoryR) NewStruct() *serviceSubCategoryR {
	return &serviceSubCategoryR{}
}

// serviceSubCategoryL is where Load methods for each relationship are stored.
type serviceSubCategoryL struct{}

var (
	serviceSubCategoryAllColumns            = []string{"ID", "ServiceCode", "SubCategory", "Element"}
	serviceSubCategoryColumnsWithAuto       = []string{}
	serviceSubCategoryColumnsWithoutDefault = []string{}
	serviceSubCategoryColumnsWithDefault    = []string{"ID", "ServiceCode", "SubCategory", "Element"}
	serviceSubCategoryPrimaryKeyColumns     = []string{"ID"}
)

type (
	// ServiceSubCategorySlice is an alias for a slice of pointers to ServiceSubCategory.
	// This should almost always be used instead of []ServiceSubCategory.
	ServiceSubCategorySlice []*ServiceSubCategory
	// ServiceSubCategoryHook is the signature for custom ServiceSubCategory hook methods
	ServiceSubCategoryHook func(context.Context, boil.ContextExecutor, *ServiceSubCategory) error

	serviceSubCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	serviceSubCategoryType                 = reflect.TypeOf(&ServiceSubCategory{})
	serviceSubCategoryMapping              = queries.MakeStructMapping(serviceSubCategoryType)
	serviceSubCategoryPrimaryKeyMapping, _ = queries.BindMapping(serviceSubCategoryType, serviceSubCategoryMapping, serviceSubCategoryPrimaryKeyColumns)
	serviceSubCategoryInsertCacheMut       sync.RWMutex
	serviceSubCategoryInsertCache          = make(map[string]insertCache)
	serviceSubCategoryUpdateCacheMut       sync.RWMutex
	serviceSubCategoryUpdateCache          = make(map[string]updateCache)
	serviceSubCategoryUpsertCacheMut       sync.RWMutex
	serviceSubCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var serviceSubCategoryBeforeInsertHooks []ServiceSubCategoryHook
var serviceSubCategoryBeforeUpdateHooks []ServiceSubCategoryHook
var serviceSubCategoryBeforeDeleteHooks []ServiceSubCategoryHook
var serviceSubCategoryBeforeUpsertHooks []ServiceSubCategoryHook

var serviceSubCategoryAfterInsertHooks []ServiceSubCategoryHook
var serviceSubCategoryAfterSelectHooks []ServiceSubCategoryHook
var serviceSubCategoryAfterUpdateHooks []ServiceSubCategoryHook
var serviceSubCategoryAfterDeleteHooks []ServiceSubCategoryHook
var serviceSubCategoryAfterUpsertHooks []ServiceSubCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ServiceSubCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceSubCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ServiceSubCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceSubCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ServiceSubCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceSubCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ServiceSubCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceSubCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ServiceSubCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceSubCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ServiceSubCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceSubCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ServiceSubCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceSubCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ServiceSubCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceSubCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ServiceSubCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range serviceSubCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddServiceSubCategoryHook registers your hook function for all future operations.
func AddServiceSubCategoryHook(hookPoint boil.HookPoint, serviceSubCategoryHook ServiceSubCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		serviceSubCategoryBeforeInsertHooks = append(serviceSubCategoryBeforeInsertHooks, serviceSubCategoryHook)
	case boil.BeforeUpdateHook:
		serviceSubCategoryBeforeUpdateHooks = append(serviceSubCategoryBeforeUpdateHooks, serviceSubCategoryHook)
	case boil.BeforeDeleteHook:
		serviceSubCategoryBeforeDeleteHooks = append(serviceSubCategoryBeforeDeleteHooks, serviceSubCategoryHook)
	case boil.BeforeUpsertHook:
		serviceSubCategoryBeforeUpsertHooks = append(serviceSubCategoryBeforeUpsertHooks, serviceSubCategoryHook)
	case boil.AfterInsertHook:
		serviceSubCategoryAfterInsertHooks = append(serviceSubCategoryAfterInsertHooks, serviceSubCategoryHook)
	case boil.AfterSelectHook:
		serviceSubCategoryAfterSelectHooks = append(serviceSubCategoryAfterSelectHooks, serviceSubCategoryHook)
	case boil.AfterUpdateHook:
		serviceSubCategoryAfterUpdateHooks = append(serviceSubCategoryAfterUpdateHooks, serviceSubCategoryHook)
	case boil.AfterDeleteHook:
		serviceSubCategoryAfterDeleteHooks = append(serviceSubCategoryAfterDeleteHooks, serviceSubCategoryHook)
	case boil.AfterUpsertHook:
		serviceSubCategoryAfterUpsertHooks = append(serviceSubCategoryAfterUpsertHooks, serviceSubCategoryHook)
	}
}

// One returns a single serviceSubCategory record from the query.
func (q serviceSubCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ServiceSubCategory, error) {
	o := &ServiceSubCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ServiceSubCategory")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ServiceSubCategory records from the query.
func (q serviceSubCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ServiceSubCategorySlice, error) {
	var o []*ServiceSubCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ServiceSubCategory slice")
	}

	if len(serviceSubCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ServiceSubCategory records in the query.
func (q serviceSubCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ServiceSubCategory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q serviceSubCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ServiceSubCategory exists")
	}

	return count > 0, nil
}

// ServiceSubCategories retrieves all the records using an executor.
func ServiceSubCategories(mods ...qm.QueryMod) serviceSubCategoryQuery {
	mods = append(mods, qm.From("[dbo].[ServiceSubCategory]"))
	return serviceSubCategoryQuery{NewQuery(mods...)}
}

// FindServiceSubCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindServiceSubCategory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ServiceSubCategory, error) {
	serviceSubCategoryObj := &ServiceSubCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ServiceSubCategory] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, serviceSubCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ServiceSubCategory")
	}

	if err = serviceSubCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return serviceSubCategoryObj, err
	}

	return serviceSubCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ServiceSubCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ServiceSubCategory provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceSubCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	serviceSubCategoryInsertCacheMut.RLock()
	cache, cached := serviceSubCategoryInsertCache[key]
	serviceSubCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			serviceSubCategoryAllColumns,
			serviceSubCategoryColumnsWithDefault,
			serviceSubCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(serviceSubCategoryType, serviceSubCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(serviceSubCategoryType, serviceSubCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ServiceSubCategory] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ServiceSubCategory] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ServiceSubCategory")
	}

	if !cached {
		serviceSubCategoryInsertCacheMut.Lock()
		serviceSubCategoryInsertCache[key] = cache
		serviceSubCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ServiceSubCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ServiceSubCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	serviceSubCategoryUpdateCacheMut.RLock()
	cache, cached := serviceSubCategoryUpdateCache[key]
	serviceSubCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			serviceSubCategoryAllColumns,
			serviceSubCategoryPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, serviceSubCategoryColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ServiceSubCategory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ServiceSubCategory] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, serviceSubCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(serviceSubCategoryType, serviceSubCategoryMapping, append(wl, serviceSubCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ServiceSubCategory row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ServiceSubCategory")
	}

	if !cached {
		serviceSubCategoryUpdateCacheMut.Lock()
		serviceSubCategoryUpdateCache[key] = cache
		serviceSubCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q serviceSubCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ServiceSubCategory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ServiceSubCategory")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ServiceSubCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceSubCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ServiceSubCategory] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, serviceSubCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in serviceSubCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all serviceSubCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ServiceSubCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ServiceSubCategory provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(serviceSubCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	serviceSubCategoryUpsertCacheMut.RLock()
	cache, cached := serviceSubCategoryUpsertCache[key]
	serviceSubCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			serviceSubCategoryAllColumns,
			serviceSubCategoryColumnsWithDefault,
			serviceSubCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, serviceSubCategoryColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(serviceSubCategoryPrimaryKeyColumns, v) && strmangle.ContainsAny(serviceSubCategoryColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert ServiceSubCategory, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, serviceSubCategoryColumnsWithAuto)
		ret = strmangle.SetMerge(ret, serviceSubCategoryColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			serviceSubCategoryAllColumns,
			serviceSubCategoryPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, serviceSubCategoryColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ServiceSubCategory, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ServiceSubCategory]", serviceSubCategoryPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(serviceSubCategoryPrimaryKeyColumns))
		copy(whitelist, serviceSubCategoryPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(serviceSubCategoryType, serviceSubCategoryMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(serviceSubCategoryType, serviceSubCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ServiceSubCategory")
	}

	if !cached {
		serviceSubCategoryUpsertCacheMut.Lock()
		serviceSubCategoryUpsertCache[key] = cache
		serviceSubCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ServiceSubCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ServiceSubCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ServiceSubCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), serviceSubCategoryPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ServiceSubCategory] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ServiceSubCategory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ServiceSubCategory")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q serviceSubCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no serviceSubCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ServiceSubCategory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ServiceSubCategory")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ServiceSubCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(serviceSubCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceSubCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ServiceSubCategory] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serviceSubCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serviceSubCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ServiceSubCategory")
	}

	if len(serviceSubCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ServiceSubCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindServiceSubCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ServiceSubCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ServiceSubCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), serviceSubCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ServiceSubCategory].* FROM [dbo].[ServiceSubCategory] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, serviceSubCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ServiceSubCategorySlice")
	}

	*o = slice

	return nil
}

// ServiceSubCategoryExists checks if the ServiceSubCategory row exists.
func ServiceSubCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ServiceSubCategory] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ServiceSubCategory exists")
	}

	return exists, nil
}
