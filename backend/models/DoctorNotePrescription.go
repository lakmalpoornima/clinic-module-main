// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DoctorNotePrescription is an object representing the database table.
type DoctorNotePrescription struct {
	ID          int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	CompanyCode string      `boil:"CompanyCode" json:"CompanyCode" toml:"CompanyCode" yaml:"CompanyCode"`
	DocumentID  string      `boil:"DocumentID" json:"DocumentID" toml:"DocumentID" yaml:"DocumentID"`
	ItemCode    null.String `boil:"ItemCode" json:"ItemCode,omitempty" toml:"ItemCode" yaml:"ItemCode,omitempty"`
	Dosage      null.String `boil:"Dosage" json:"Dosage,omitempty" toml:"Dosage" yaml:"Dosage,omitempty"`
	ItemType    null.String `boil:"ItemType" json:"ItemType,omitempty" toml:"ItemType" yaml:"ItemType,omitempty"`
	Description null.String `boil:"Description" json:"Description,omitempty" toml:"Description" yaml:"Description,omitempty"`
	Comment     null.String `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`
	Duration    null.String `boil:"duration" json:"duration,omitempty" toml:"duration" yaml:"duration,omitempty"`
	Strenth     null.String `boil:"Strenth" json:"Strenth,omitempty" toml:"Strenth" yaml:"Strenth,omitempty"`
	CreatedDate time.Time   `boil:"CreatedDate" json:"CreatedDate" toml:"CreatedDate" yaml:"CreatedDate"`
	Urgent      bool        `boil:"Urgent" json:"Urgent" toml:"Urgent" yaml:"Urgent"`

	R *doctorNotePrescriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doctorNotePrescriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoctorNotePrescriptionColumns = struct {
	ID          string
	CompanyCode string
	DocumentID  string
	ItemCode    string
	Dosage      string
	ItemType    string
	Description string
	Comment     string
	Duration    string
	Strenth     string
	CreatedDate string
	Urgent      string
}{
	ID:          "ID",
	CompanyCode: "CompanyCode",
	DocumentID:  "DocumentID",
	ItemCode:    "ItemCode",
	Dosage:      "Dosage",
	ItemType:    "ItemType",
	Description: "Description",
	Comment:     "comment",
	Duration:    "duration",
	Strenth:     "Strenth",
	CreatedDate: "CreatedDate",
	Urgent:      "Urgent",
}

var DoctorNotePrescriptionTableColumns = struct {
	ID          string
	CompanyCode string
	DocumentID  string
	ItemCode    string
	Dosage      string
	ItemType    string
	Description string
	Comment     string
	Duration    string
	Strenth     string
	CreatedDate string
	Urgent      string
}{
	ID:          "DoctorNotePrescription.ID",
	CompanyCode: "DoctorNotePrescription.CompanyCode",
	DocumentID:  "DoctorNotePrescription.DocumentID",
	ItemCode:    "DoctorNotePrescription.ItemCode",
	Dosage:      "DoctorNotePrescription.Dosage",
	ItemType:    "DoctorNotePrescription.ItemType",
	Description: "DoctorNotePrescription.Description",
	Comment:     "DoctorNotePrescription.comment",
	Duration:    "DoctorNotePrescription.duration",
	Strenth:     "DoctorNotePrescription.Strenth",
	CreatedDate: "DoctorNotePrescription.CreatedDate",
	Urgent:      "DoctorNotePrescription.Urgent",
}

// Generated where

var DoctorNotePrescriptionWhere = struct {
	ID          whereHelperint
	CompanyCode whereHelperstring
	DocumentID  whereHelperstring
	ItemCode    whereHelpernull_String
	Dosage      whereHelpernull_String
	ItemType    whereHelpernull_String
	Description whereHelpernull_String
	Comment     whereHelpernull_String
	Duration    whereHelpernull_String
	Strenth     whereHelpernull_String
	CreatedDate whereHelpertime_Time
	Urgent      whereHelperbool
}{
	ID:          whereHelperint{field: "[dbo].[DoctorNotePrescription].[ID]"},
	CompanyCode: whereHelperstring{field: "[dbo].[DoctorNotePrescription].[CompanyCode]"},
	DocumentID:  whereHelperstring{field: "[dbo].[DoctorNotePrescription].[DocumentID]"},
	ItemCode:    whereHelpernull_String{field: "[dbo].[DoctorNotePrescription].[ItemCode]"},
	Dosage:      whereHelpernull_String{field: "[dbo].[DoctorNotePrescription].[Dosage]"},
	ItemType:    whereHelpernull_String{field: "[dbo].[DoctorNotePrescription].[ItemType]"},
	Description: whereHelpernull_String{field: "[dbo].[DoctorNotePrescription].[Description]"},
	Comment:     whereHelpernull_String{field: "[dbo].[DoctorNotePrescription].[comment]"},
	Duration:    whereHelpernull_String{field: "[dbo].[DoctorNotePrescription].[duration]"},
	Strenth:     whereHelpernull_String{field: "[dbo].[DoctorNotePrescription].[Strenth]"},
	CreatedDate: whereHelpertime_Time{field: "[dbo].[DoctorNotePrescription].[CreatedDate]"},
	Urgent:      whereHelperbool{field: "[dbo].[DoctorNotePrescription].[Urgent]"},
}

// DoctorNotePrescriptionRels is where relationship names are stored.
var DoctorNotePrescriptionRels = struct {
}{}

// doctorNotePrescriptionR is where relationships are stored.
type doctorNotePrescriptionR struct {
}

// NewStruct creates a new relationship struct
func (*doctorNotePrescriptionR) NewStruct() *doctorNotePrescriptionR {
	return &doctorNotePrescriptionR{}
}

// doctorNotePrescriptionL is where Load methods for each relationship are stored.
type doctorNotePrescriptionL struct{}

var (
	doctorNotePrescriptionAllColumns            = []string{"ID", "CompanyCode", "DocumentID", "ItemCode", "Dosage", "ItemType", "Description", "comment", "duration", "Strenth", "CreatedDate", "Urgent"}
	doctorNotePrescriptionColumnsWithAuto       = []string{}
	doctorNotePrescriptionColumnsWithoutDefault = []string{"Dosage", "ItemType", "Description", "comment", "duration", "Strenth"}
	doctorNotePrescriptionColumnsWithDefault    = []string{"ID", "CompanyCode", "DocumentID", "ItemCode", "CreatedDate", "Urgent"}
	doctorNotePrescriptionPrimaryKeyColumns     = []string{"ID"}
)

type (
	// DoctorNotePrescriptionSlice is an alias for a slice of pointers to DoctorNotePrescription.
	// This should almost always be used instead of []DoctorNotePrescription.
	DoctorNotePrescriptionSlice []*DoctorNotePrescription
	// DoctorNotePrescriptionHook is the signature for custom DoctorNotePrescription hook methods
	DoctorNotePrescriptionHook func(context.Context, boil.ContextExecutor, *DoctorNotePrescription) error

	doctorNotePrescriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doctorNotePrescriptionType                 = reflect.TypeOf(&DoctorNotePrescription{})
	doctorNotePrescriptionMapping              = queries.MakeStructMapping(doctorNotePrescriptionType)
	doctorNotePrescriptionPrimaryKeyMapping, _ = queries.BindMapping(doctorNotePrescriptionType, doctorNotePrescriptionMapping, doctorNotePrescriptionPrimaryKeyColumns)
	doctorNotePrescriptionInsertCacheMut       sync.RWMutex
	doctorNotePrescriptionInsertCache          = make(map[string]insertCache)
	doctorNotePrescriptionUpdateCacheMut       sync.RWMutex
	doctorNotePrescriptionUpdateCache          = make(map[string]updateCache)
	doctorNotePrescriptionUpsertCacheMut       sync.RWMutex
	doctorNotePrescriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doctorNotePrescriptionBeforeInsertHooks []DoctorNotePrescriptionHook
var doctorNotePrescriptionBeforeUpdateHooks []DoctorNotePrescriptionHook
var doctorNotePrescriptionBeforeDeleteHooks []DoctorNotePrescriptionHook
var doctorNotePrescriptionBeforeUpsertHooks []DoctorNotePrescriptionHook

var doctorNotePrescriptionAfterInsertHooks []DoctorNotePrescriptionHook
var doctorNotePrescriptionAfterSelectHooks []DoctorNotePrescriptionHook
var doctorNotePrescriptionAfterUpdateHooks []DoctorNotePrescriptionHook
var doctorNotePrescriptionAfterDeleteHooks []DoctorNotePrescriptionHook
var doctorNotePrescriptionAfterUpsertHooks []DoctorNotePrescriptionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DoctorNotePrescription) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNotePrescriptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DoctorNotePrescription) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNotePrescriptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DoctorNotePrescription) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNotePrescriptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DoctorNotePrescription) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNotePrescriptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DoctorNotePrescription) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNotePrescriptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DoctorNotePrescription) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNotePrescriptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DoctorNotePrescription) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNotePrescriptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DoctorNotePrescription) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNotePrescriptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DoctorNotePrescription) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNotePrescriptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoctorNotePrescriptionHook registers your hook function for all future operations.
func AddDoctorNotePrescriptionHook(hookPoint boil.HookPoint, doctorNotePrescriptionHook DoctorNotePrescriptionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doctorNotePrescriptionBeforeInsertHooks = append(doctorNotePrescriptionBeforeInsertHooks, doctorNotePrescriptionHook)
	case boil.BeforeUpdateHook:
		doctorNotePrescriptionBeforeUpdateHooks = append(doctorNotePrescriptionBeforeUpdateHooks, doctorNotePrescriptionHook)
	case boil.BeforeDeleteHook:
		doctorNotePrescriptionBeforeDeleteHooks = append(doctorNotePrescriptionBeforeDeleteHooks, doctorNotePrescriptionHook)
	case boil.BeforeUpsertHook:
		doctorNotePrescriptionBeforeUpsertHooks = append(doctorNotePrescriptionBeforeUpsertHooks, doctorNotePrescriptionHook)
	case boil.AfterInsertHook:
		doctorNotePrescriptionAfterInsertHooks = append(doctorNotePrescriptionAfterInsertHooks, doctorNotePrescriptionHook)
	case boil.AfterSelectHook:
		doctorNotePrescriptionAfterSelectHooks = append(doctorNotePrescriptionAfterSelectHooks, doctorNotePrescriptionHook)
	case boil.AfterUpdateHook:
		doctorNotePrescriptionAfterUpdateHooks = append(doctorNotePrescriptionAfterUpdateHooks, doctorNotePrescriptionHook)
	case boil.AfterDeleteHook:
		doctorNotePrescriptionAfterDeleteHooks = append(doctorNotePrescriptionAfterDeleteHooks, doctorNotePrescriptionHook)
	case boil.AfterUpsertHook:
		doctorNotePrescriptionAfterUpsertHooks = append(doctorNotePrescriptionAfterUpsertHooks, doctorNotePrescriptionHook)
	}
}

// One returns a single doctorNotePrescription record from the query.
func (q doctorNotePrescriptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DoctorNotePrescription, error) {
	o := &DoctorNotePrescription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for DoctorNotePrescription")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DoctorNotePrescription records from the query.
func (q doctorNotePrescriptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoctorNotePrescriptionSlice, error) {
	var o []*DoctorNotePrescription

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DoctorNotePrescription slice")
	}

	if len(doctorNotePrescriptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DoctorNotePrescription records in the query.
func (q doctorNotePrescriptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count DoctorNotePrescription rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doctorNotePrescriptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if DoctorNotePrescription exists")
	}

	return count > 0, nil
}

// DoctorNotePrescriptions retrieves all the records using an executor.
func DoctorNotePrescriptions(mods ...qm.QueryMod) doctorNotePrescriptionQuery {
	mods = append(mods, qm.From("[dbo].[DoctorNotePrescription]"))
	return doctorNotePrescriptionQuery{NewQuery(mods...)}
}

// FindDoctorNotePrescription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoctorNotePrescription(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DoctorNotePrescription, error) {
	doctorNotePrescriptionObj := &DoctorNotePrescription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[DoctorNotePrescription] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doctorNotePrescriptionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from DoctorNotePrescription")
	}

	if err = doctorNotePrescriptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return doctorNotePrescriptionObj, err
	}

	return doctorNotePrescriptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DoctorNotePrescription) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNotePrescription provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNotePrescriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doctorNotePrescriptionInsertCacheMut.RLock()
	cache, cached := doctorNotePrescriptionInsertCache[key]
	doctorNotePrescriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doctorNotePrescriptionAllColumns,
			doctorNotePrescriptionColumnsWithDefault,
			doctorNotePrescriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doctorNotePrescriptionType, doctorNotePrescriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doctorNotePrescriptionType, doctorNotePrescriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[DoctorNotePrescription] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[DoctorNotePrescription] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into DoctorNotePrescription")
	}

	if !cached {
		doctorNotePrescriptionInsertCacheMut.Lock()
		doctorNotePrescriptionInsertCache[key] = cache
		doctorNotePrescriptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DoctorNotePrescription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DoctorNotePrescription) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doctorNotePrescriptionUpdateCacheMut.RLock()
	cache, cached := doctorNotePrescriptionUpdateCache[key]
	doctorNotePrescriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doctorNotePrescriptionAllColumns,
			doctorNotePrescriptionPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, doctorNotePrescriptionColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update DoctorNotePrescription, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[DoctorNotePrescription] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, doctorNotePrescriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doctorNotePrescriptionType, doctorNotePrescriptionMapping, append(wl, doctorNotePrescriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update DoctorNotePrescription row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for DoctorNotePrescription")
	}

	if !cached {
		doctorNotePrescriptionUpdateCacheMut.Lock()
		doctorNotePrescriptionUpdateCache[key] = cache
		doctorNotePrescriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doctorNotePrescriptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for DoctorNotePrescription")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for DoctorNotePrescription")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoctorNotePrescriptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNotePrescriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[DoctorNotePrescription] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, doctorNotePrescriptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doctorNotePrescription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doctorNotePrescription")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DoctorNotePrescription) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNotePrescription provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNotePrescriptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	doctorNotePrescriptionUpsertCacheMut.RLock()
	cache, cached := doctorNotePrescriptionUpsertCache[key]
	doctorNotePrescriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			doctorNotePrescriptionAllColumns,
			doctorNotePrescriptionColumnsWithDefault,
			doctorNotePrescriptionColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, doctorNotePrescriptionColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(doctorNotePrescriptionPrimaryKeyColumns, v) && strmangle.ContainsAny(doctorNotePrescriptionColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert DoctorNotePrescription, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, doctorNotePrescriptionColumnsWithAuto)
		ret = strmangle.SetMerge(ret, doctorNotePrescriptionColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			doctorNotePrescriptionAllColumns,
			doctorNotePrescriptionPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, doctorNotePrescriptionColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert DoctorNotePrescription, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[DoctorNotePrescription]", doctorNotePrescriptionPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(doctorNotePrescriptionPrimaryKeyColumns))
		copy(whitelist, doctorNotePrescriptionPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(doctorNotePrescriptionType, doctorNotePrescriptionMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(doctorNotePrescriptionType, doctorNotePrescriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert DoctorNotePrescription")
	}

	if !cached {
		doctorNotePrescriptionUpsertCacheMut.Lock()
		doctorNotePrescriptionUpsertCache[key] = cache
		doctorNotePrescriptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DoctorNotePrescription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DoctorNotePrescription) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DoctorNotePrescription provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doctorNotePrescriptionPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[DoctorNotePrescription] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from DoctorNotePrescription")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for DoctorNotePrescription")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doctorNotePrescriptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doctorNotePrescriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from DoctorNotePrescription")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNotePrescription")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoctorNotePrescriptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doctorNotePrescriptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNotePrescriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[DoctorNotePrescription] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNotePrescriptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doctorNotePrescription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNotePrescription")
	}

	if len(doctorNotePrescriptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DoctorNotePrescription) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoctorNotePrescription(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoctorNotePrescriptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoctorNotePrescriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNotePrescriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[DoctorNotePrescription].* FROM [dbo].[DoctorNotePrescription] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNotePrescriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoctorNotePrescriptionSlice")
	}

	*o = slice

	return nil
}

// DoctorNotePrescriptionExists checks if the DoctorNotePrescription row exists.
func DoctorNotePrescriptionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[DoctorNotePrescription] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if DoctorNotePrescription exists")
	}

	return exists, nil
}
