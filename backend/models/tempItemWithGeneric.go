// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TempItemWithGeneric is an object representing the database table.
type TempItemWithGeneric struct {
	ATCCode           null.String `boil:"ATCCode" json:"ATCCode,omitempty" toml:"ATCCode" yaml:"ATCCode,omitempty"`
	ATCClessification null.String `boil:"ATCClessification" json:"ATCClessification,omitempty" toml:"ATCClessification" yaml:"ATCClessification,omitempty"`
	SKU               string      `boil:"SKU" json:"SKU" toml:"SKU" yaml:"SKU"`
	ItemDescrition    null.String `boil:"ItemDescrition" json:"ItemDescrition,omitempty" toml:"ItemDescrition" yaml:"ItemDescrition,omitempty"`
	TherapeuticGroup  null.String `boil:"TherapeuticGroup" json:"TherapeuticGroup,omitempty" toml:"TherapeuticGroup" yaml:"TherapeuticGroup,omitempty"`

	R *tempItemWithGenericR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tempItemWithGenericL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TempItemWithGenericColumns = struct {
	ATCCode           string
	ATCClessification string
	SKU               string
	ItemDescrition    string
	TherapeuticGroup  string
}{
	ATCCode:           "ATCCode",
	ATCClessification: "ATCClessification",
	SKU:               "SKU",
	ItemDescrition:    "ItemDescrition",
	TherapeuticGroup:  "TherapeuticGroup",
}

var TempItemWithGenericTableColumns = struct {
	ATCCode           string
	ATCClessification string
	SKU               string
	ItemDescrition    string
	TherapeuticGroup  string
}{
	ATCCode:           "tempItemWithGeneric.ATCCode",
	ATCClessification: "tempItemWithGeneric.ATCClessification",
	SKU:               "tempItemWithGeneric.SKU",
	ItemDescrition:    "tempItemWithGeneric.ItemDescrition",
	TherapeuticGroup:  "tempItemWithGeneric.TherapeuticGroup",
}

// Generated where

var TempItemWithGenericWhere = struct {
	ATCCode           whereHelpernull_String
	ATCClessification whereHelpernull_String
	SKU               whereHelperstring
	ItemDescrition    whereHelpernull_String
	TherapeuticGroup  whereHelpernull_String
}{
	ATCCode:           whereHelpernull_String{field: "[dbo].[tempItemWithGeneric].[ATCCode]"},
	ATCClessification: whereHelpernull_String{field: "[dbo].[tempItemWithGeneric].[ATCClessification]"},
	SKU:               whereHelperstring{field: "[dbo].[tempItemWithGeneric].[SKU]"},
	ItemDescrition:    whereHelpernull_String{field: "[dbo].[tempItemWithGeneric].[ItemDescrition]"},
	TherapeuticGroup:  whereHelpernull_String{field: "[dbo].[tempItemWithGeneric].[TherapeuticGroup]"},
}

// TempItemWithGenericRels is where relationship names are stored.
var TempItemWithGenericRels = struct {
}{}

// tempItemWithGenericR is where relationships are stored.
type tempItemWithGenericR struct {
}

// NewStruct creates a new relationship struct
func (*tempItemWithGenericR) NewStruct() *tempItemWithGenericR {
	return &tempItemWithGenericR{}
}

// tempItemWithGenericL is where Load methods for each relationship are stored.
type tempItemWithGenericL struct{}

var (
	tempItemWithGenericAllColumns            = []string{"ATCCode", "ATCClessification", "SKU", "ItemDescrition", "TherapeuticGroup"}
	tempItemWithGenericColumnsWithAuto       = []string{}
	tempItemWithGenericColumnsWithoutDefault = []string{"ATCCode", "ATCClessification", "SKU", "ItemDescrition", "TherapeuticGroup"}
	tempItemWithGenericColumnsWithDefault    = []string{}
	tempItemWithGenericPrimaryKeyColumns     = []string{"SKU"}
)

type (
	// TempItemWithGenericSlice is an alias for a slice of pointers to TempItemWithGeneric.
	// This should almost always be used instead of []TempItemWithGeneric.
	TempItemWithGenericSlice []*TempItemWithGeneric
	// TempItemWithGenericHook is the signature for custom TempItemWithGeneric hook methods
	TempItemWithGenericHook func(context.Context, boil.ContextExecutor, *TempItemWithGeneric) error

	tempItemWithGenericQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tempItemWithGenericType                 = reflect.TypeOf(&TempItemWithGeneric{})
	tempItemWithGenericMapping              = queries.MakeStructMapping(tempItemWithGenericType)
	tempItemWithGenericPrimaryKeyMapping, _ = queries.BindMapping(tempItemWithGenericType, tempItemWithGenericMapping, tempItemWithGenericPrimaryKeyColumns)
	tempItemWithGenericInsertCacheMut       sync.RWMutex
	tempItemWithGenericInsertCache          = make(map[string]insertCache)
	tempItemWithGenericUpdateCacheMut       sync.RWMutex
	tempItemWithGenericUpdateCache          = make(map[string]updateCache)
	tempItemWithGenericUpsertCacheMut       sync.RWMutex
	tempItemWithGenericUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tempItemWithGenericBeforeInsertHooks []TempItemWithGenericHook
var tempItemWithGenericBeforeUpdateHooks []TempItemWithGenericHook
var tempItemWithGenericBeforeDeleteHooks []TempItemWithGenericHook
var tempItemWithGenericBeforeUpsertHooks []TempItemWithGenericHook

var tempItemWithGenericAfterInsertHooks []TempItemWithGenericHook
var tempItemWithGenericAfterSelectHooks []TempItemWithGenericHook
var tempItemWithGenericAfterUpdateHooks []TempItemWithGenericHook
var tempItemWithGenericAfterDeleteHooks []TempItemWithGenericHook
var tempItemWithGenericAfterUpsertHooks []TempItemWithGenericHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TempItemWithGeneric) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempItemWithGenericBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TempItemWithGeneric) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempItemWithGenericBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TempItemWithGeneric) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempItemWithGenericBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TempItemWithGeneric) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempItemWithGenericBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TempItemWithGeneric) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempItemWithGenericAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TempItemWithGeneric) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempItemWithGenericAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TempItemWithGeneric) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempItemWithGenericAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TempItemWithGeneric) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempItemWithGenericAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TempItemWithGeneric) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tempItemWithGenericAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTempItemWithGenericHook registers your hook function for all future operations.
func AddTempItemWithGenericHook(hookPoint boil.HookPoint, tempItemWithGenericHook TempItemWithGenericHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tempItemWithGenericBeforeInsertHooks = append(tempItemWithGenericBeforeInsertHooks, tempItemWithGenericHook)
	case boil.BeforeUpdateHook:
		tempItemWithGenericBeforeUpdateHooks = append(tempItemWithGenericBeforeUpdateHooks, tempItemWithGenericHook)
	case boil.BeforeDeleteHook:
		tempItemWithGenericBeforeDeleteHooks = append(tempItemWithGenericBeforeDeleteHooks, tempItemWithGenericHook)
	case boil.BeforeUpsertHook:
		tempItemWithGenericBeforeUpsertHooks = append(tempItemWithGenericBeforeUpsertHooks, tempItemWithGenericHook)
	case boil.AfterInsertHook:
		tempItemWithGenericAfterInsertHooks = append(tempItemWithGenericAfterInsertHooks, tempItemWithGenericHook)
	case boil.AfterSelectHook:
		tempItemWithGenericAfterSelectHooks = append(tempItemWithGenericAfterSelectHooks, tempItemWithGenericHook)
	case boil.AfterUpdateHook:
		tempItemWithGenericAfterUpdateHooks = append(tempItemWithGenericAfterUpdateHooks, tempItemWithGenericHook)
	case boil.AfterDeleteHook:
		tempItemWithGenericAfterDeleteHooks = append(tempItemWithGenericAfterDeleteHooks, tempItemWithGenericHook)
	case boil.AfterUpsertHook:
		tempItemWithGenericAfterUpsertHooks = append(tempItemWithGenericAfterUpsertHooks, tempItemWithGenericHook)
	}
}

// One returns a single tempItemWithGeneric record from the query.
func (q tempItemWithGenericQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TempItemWithGeneric, error) {
	o := &TempItemWithGeneric{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tempItemWithGeneric")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TempItemWithGeneric records from the query.
func (q tempItemWithGenericQuery) All(ctx context.Context, exec boil.ContextExecutor) (TempItemWithGenericSlice, error) {
	var o []*TempItemWithGeneric

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TempItemWithGeneric slice")
	}

	if len(tempItemWithGenericAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TempItemWithGeneric records in the query.
func (q tempItemWithGenericQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tempItemWithGeneric rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tempItemWithGenericQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tempItemWithGeneric exists")
	}

	return count > 0, nil
}

// TempItemWithGenerics retrieves all the records using an executor.
func TempItemWithGenerics(mods ...qm.QueryMod) tempItemWithGenericQuery {
	mods = append(mods, qm.From("[dbo].[tempItemWithGeneric]"))
	return tempItemWithGenericQuery{NewQuery(mods...)}
}

// FindTempItemWithGeneric retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTempItemWithGeneric(ctx context.Context, exec boil.ContextExecutor, sKU string, selectCols ...string) (*TempItemWithGeneric, error) {
	tempItemWithGenericObj := &TempItemWithGeneric{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[tempItemWithGeneric] where [SKU]=$1", sel,
	)

	q := queries.Raw(query, sKU)

	err := q.Bind(ctx, exec, tempItemWithGenericObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tempItemWithGeneric")
	}

	if err = tempItemWithGenericObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tempItemWithGenericObj, err
	}

	return tempItemWithGenericObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TempItemWithGeneric) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tempItemWithGeneric provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tempItemWithGenericColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tempItemWithGenericInsertCacheMut.RLock()
	cache, cached := tempItemWithGenericInsertCache[key]
	tempItemWithGenericInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tempItemWithGenericAllColumns,
			tempItemWithGenericColumnsWithDefault,
			tempItemWithGenericColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tempItemWithGenericType, tempItemWithGenericMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tempItemWithGenericType, tempItemWithGenericMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[tempItemWithGeneric] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[tempItemWithGeneric] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tempItemWithGeneric")
	}

	if !cached {
		tempItemWithGenericInsertCacheMut.Lock()
		tempItemWithGenericInsertCache[key] = cache
		tempItemWithGenericInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TempItemWithGeneric.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TempItemWithGeneric) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tempItemWithGenericUpdateCacheMut.RLock()
	cache, cached := tempItemWithGenericUpdateCache[key]
	tempItemWithGenericUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tempItemWithGenericAllColumns,
			tempItemWithGenericPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, tempItemWithGenericColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tempItemWithGeneric, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[tempItemWithGeneric] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, tempItemWithGenericPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tempItemWithGenericType, tempItemWithGenericMapping, append(wl, tempItemWithGenericPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tempItemWithGeneric row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tempItemWithGeneric")
	}

	if !cached {
		tempItemWithGenericUpdateCacheMut.Lock()
		tempItemWithGenericUpdateCache[key] = cache
		tempItemWithGenericUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tempItemWithGenericQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tempItemWithGeneric")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tempItemWithGeneric")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TempItemWithGenericSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tempItemWithGenericPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[tempItemWithGeneric] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tempItemWithGenericPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tempItemWithGeneric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tempItemWithGeneric")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TempItemWithGeneric) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tempItemWithGeneric provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tempItemWithGenericColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tempItemWithGenericUpsertCacheMut.RLock()
	cache, cached := tempItemWithGenericUpsertCache[key]
	tempItemWithGenericUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tempItemWithGenericAllColumns,
			tempItemWithGenericColumnsWithDefault,
			tempItemWithGenericColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, tempItemWithGenericColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(tempItemWithGenericPrimaryKeyColumns, v) && strmangle.ContainsAny(tempItemWithGenericColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert tempItemWithGeneric, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, tempItemWithGenericColumnsWithAuto)
		ret = strmangle.SetMerge(ret, tempItemWithGenericColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			tempItemWithGenericAllColumns,
			tempItemWithGenericPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, tempItemWithGenericColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert tempItemWithGeneric, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[tempItemWithGeneric]", tempItemWithGenericPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(tempItemWithGenericPrimaryKeyColumns))
		copy(whitelist, tempItemWithGenericPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(tempItemWithGenericType, tempItemWithGenericMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tempItemWithGenericType, tempItemWithGenericMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tempItemWithGeneric")
	}

	if !cached {
		tempItemWithGenericUpsertCacheMut.Lock()
		tempItemWithGenericUpsertCache[key] = cache
		tempItemWithGenericUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TempItemWithGeneric record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TempItemWithGeneric) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TempItemWithGeneric provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tempItemWithGenericPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[tempItemWithGeneric] WHERE [SKU]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tempItemWithGeneric")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tempItemWithGeneric")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tempItemWithGenericQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tempItemWithGenericQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tempItemWithGeneric")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tempItemWithGeneric")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TempItemWithGenericSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tempItemWithGenericBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tempItemWithGenericPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[tempItemWithGeneric] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tempItemWithGenericPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tempItemWithGeneric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tempItemWithGeneric")
	}

	if len(tempItemWithGenericAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TempItemWithGeneric) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTempItemWithGeneric(ctx, exec, o.SKU)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TempItemWithGenericSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TempItemWithGenericSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tempItemWithGenericPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[tempItemWithGeneric].* FROM [dbo].[tempItemWithGeneric] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tempItemWithGenericPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TempItemWithGenericSlice")
	}

	*o = slice

	return nil
}

// TempItemWithGenericExists checks if the TempItemWithGeneric row exists.
func TempItemWithGenericExists(ctx context.Context, exec boil.ContextExecutor, sKU string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[tempItemWithGeneric] where [SKU]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, sKU)
	}
	row := exec.QueryRowContext(ctx, sql, sKU)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tempItemWithGeneric exists")
	}

	return exists, nil
}
