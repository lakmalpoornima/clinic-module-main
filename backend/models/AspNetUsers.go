// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AspNetUser is an object representing the database table.
type AspNetUser struct {
	ID                   string      `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	UserName             null.String `boil:"UserName" json:"UserName,omitempty" toml:"UserName" yaml:"UserName,omitempty"`
	NormalizedUserName   null.String `boil:"NormalizedUserName" json:"NormalizedUserName,omitempty" toml:"NormalizedUserName" yaml:"NormalizedUserName,omitempty"`
	Email                null.String `boil:"Email" json:"Email,omitempty" toml:"Email" yaml:"Email,omitempty"`
	NormalizedEmail      null.String `boil:"NormalizedEmail" json:"NormalizedEmail,omitempty" toml:"NormalizedEmail" yaml:"NormalizedEmail,omitempty"`
	EmailConfirmed       bool        `boil:"EmailConfirmed" json:"EmailConfirmed" toml:"EmailConfirmed" yaml:"EmailConfirmed"`
	PasswordHash         null.String `boil:"PasswordHash" json:"PasswordHash,omitempty" toml:"PasswordHash" yaml:"PasswordHash,omitempty"`
	SecurityStamp        null.String `boil:"SecurityStamp" json:"SecurityStamp,omitempty" toml:"SecurityStamp" yaml:"SecurityStamp,omitempty"`
	ConcurrencyStamp     null.String `boil:"ConcurrencyStamp" json:"ConcurrencyStamp,omitempty" toml:"ConcurrencyStamp" yaml:"ConcurrencyStamp,omitempty"`
	PhoneNumber          null.String `boil:"PhoneNumber" json:"PhoneNumber,omitempty" toml:"PhoneNumber" yaml:"PhoneNumber,omitempty"`
	PhoneNumberConfirmed bool        `boil:"PhoneNumberConfirmed" json:"PhoneNumberConfirmed" toml:"PhoneNumberConfirmed" yaml:"PhoneNumberConfirmed"`
	TwoFactorEnabled     bool        `boil:"TwoFactorEnabled" json:"TwoFactorEnabled" toml:"TwoFactorEnabled" yaml:"TwoFactorEnabled"`
	LockoutEnd           null.Time   `boil:"LockoutEnd" json:"LockoutEnd,omitempty" toml:"LockoutEnd" yaml:"LockoutEnd,omitempty"`
	LockoutEnabled       bool        `boil:"LockoutEnabled" json:"LockoutEnabled" toml:"LockoutEnabled" yaml:"LockoutEnabled"`
	AccessFailedCount    int         `boil:"AccessFailedCount" json:"AccessFailedCount" toml:"AccessFailedCount" yaml:"AccessFailedCount"`
	UserImage            null.String `boil:"UserImage" json:"UserImage,omitempty" toml:"UserImage" yaml:"UserImage,omitempty"`
	Category             null.String `boil:"Category" json:"Category,omitempty" toml:"Category" yaml:"Category,omitempty"`
	UserID               null.String `boil:"UserID" json:"UserID,omitempty" toml:"UserID" yaml:"UserID,omitempty"`

	R *aspNetUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aspNetUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AspNetUserColumns = struct {
	ID                   string
	UserName             string
	NormalizedUserName   string
	Email                string
	NormalizedEmail      string
	EmailConfirmed       string
	PasswordHash         string
	SecurityStamp        string
	ConcurrencyStamp     string
	PhoneNumber          string
	PhoneNumberConfirmed string
	TwoFactorEnabled     string
	LockoutEnd           string
	LockoutEnabled       string
	AccessFailedCount    string
	UserImage            string
	Category             string
	UserID               string
}{
	ID:                   "Id",
	UserName:             "UserName",
	NormalizedUserName:   "NormalizedUserName",
	Email:                "Email",
	NormalizedEmail:      "NormalizedEmail",
	EmailConfirmed:       "EmailConfirmed",
	PasswordHash:         "PasswordHash",
	SecurityStamp:        "SecurityStamp",
	ConcurrencyStamp:     "ConcurrencyStamp",
	PhoneNumber:          "PhoneNumber",
	PhoneNumberConfirmed: "PhoneNumberConfirmed",
	TwoFactorEnabled:     "TwoFactorEnabled",
	LockoutEnd:           "LockoutEnd",
	LockoutEnabled:       "LockoutEnabled",
	AccessFailedCount:    "AccessFailedCount",
	UserImage:            "UserImage",
	Category:             "Category",
	UserID:               "UserID",
}

var AspNetUserTableColumns = struct {
	ID                   string
	UserName             string
	NormalizedUserName   string
	Email                string
	NormalizedEmail      string
	EmailConfirmed       string
	PasswordHash         string
	SecurityStamp        string
	ConcurrencyStamp     string
	PhoneNumber          string
	PhoneNumberConfirmed string
	TwoFactorEnabled     string
	LockoutEnd           string
	LockoutEnabled       string
	AccessFailedCount    string
	UserImage            string
	Category             string
	UserID               string
}{
	ID:                   "AspNetUsers.Id",
	UserName:             "AspNetUsers.UserName",
	NormalizedUserName:   "AspNetUsers.NormalizedUserName",
	Email:                "AspNetUsers.Email",
	NormalizedEmail:      "AspNetUsers.NormalizedEmail",
	EmailConfirmed:       "AspNetUsers.EmailConfirmed",
	PasswordHash:         "AspNetUsers.PasswordHash",
	SecurityStamp:        "AspNetUsers.SecurityStamp",
	ConcurrencyStamp:     "AspNetUsers.ConcurrencyStamp",
	PhoneNumber:          "AspNetUsers.PhoneNumber",
	PhoneNumberConfirmed: "AspNetUsers.PhoneNumberConfirmed",
	TwoFactorEnabled:     "AspNetUsers.TwoFactorEnabled",
	LockoutEnd:           "AspNetUsers.LockoutEnd",
	LockoutEnabled:       "AspNetUsers.LockoutEnabled",
	AccessFailedCount:    "AspNetUsers.AccessFailedCount",
	UserImage:            "AspNetUsers.UserImage",
	Category:             "AspNetUsers.Category",
	UserID:               "AspNetUsers.UserID",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AspNetUserWhere = struct {
	ID                   whereHelperstring
	UserName             whereHelpernull_String
	NormalizedUserName   whereHelpernull_String
	Email                whereHelpernull_String
	NormalizedEmail      whereHelpernull_String
	EmailConfirmed       whereHelperbool
	PasswordHash         whereHelpernull_String
	SecurityStamp        whereHelpernull_String
	ConcurrencyStamp     whereHelpernull_String
	PhoneNumber          whereHelpernull_String
	PhoneNumberConfirmed whereHelperbool
	TwoFactorEnabled     whereHelperbool
	LockoutEnd           whereHelpernull_Time
	LockoutEnabled       whereHelperbool
	AccessFailedCount    whereHelperint
	UserImage            whereHelpernull_String
	Category             whereHelpernull_String
	UserID               whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "[dbo].[AspNetUsers].[Id]"},
	UserName:             whereHelpernull_String{field: "[dbo].[AspNetUsers].[UserName]"},
	NormalizedUserName:   whereHelpernull_String{field: "[dbo].[AspNetUsers].[NormalizedUserName]"},
	Email:                whereHelpernull_String{field: "[dbo].[AspNetUsers].[Email]"},
	NormalizedEmail:      whereHelpernull_String{field: "[dbo].[AspNetUsers].[NormalizedEmail]"},
	EmailConfirmed:       whereHelperbool{field: "[dbo].[AspNetUsers].[EmailConfirmed]"},
	PasswordHash:         whereHelpernull_String{field: "[dbo].[AspNetUsers].[PasswordHash]"},
	SecurityStamp:        whereHelpernull_String{field: "[dbo].[AspNetUsers].[SecurityStamp]"},
	ConcurrencyStamp:     whereHelpernull_String{field: "[dbo].[AspNetUsers].[ConcurrencyStamp]"},
	PhoneNumber:          whereHelpernull_String{field: "[dbo].[AspNetUsers].[PhoneNumber]"},
	PhoneNumberConfirmed: whereHelperbool{field: "[dbo].[AspNetUsers].[PhoneNumberConfirmed]"},
	TwoFactorEnabled:     whereHelperbool{field: "[dbo].[AspNetUsers].[TwoFactorEnabled]"},
	LockoutEnd:           whereHelpernull_Time{field: "[dbo].[AspNetUsers].[LockoutEnd]"},
	LockoutEnabled:       whereHelperbool{field: "[dbo].[AspNetUsers].[LockoutEnabled]"},
	AccessFailedCount:    whereHelperint{field: "[dbo].[AspNetUsers].[AccessFailedCount]"},
	UserImage:            whereHelpernull_String{field: "[dbo].[AspNetUsers].[UserImage]"},
	Category:             whereHelpernull_String{field: "[dbo].[AspNetUsers].[Category]"},
	UserID:               whereHelpernull_String{field: "[dbo].[AspNetUsers].[UserID]"},
}

// AspNetUserRels is where relationship names are stored.
var AspNetUserRels = struct {
}{}

// aspNetUserR is where relationships are stored.
type aspNetUserR struct {
}

// NewStruct creates a new relationship struct
func (*aspNetUserR) NewStruct() *aspNetUserR {
	return &aspNetUserR{}
}

// aspNetUserL is where Load methods for each relationship are stored.
type aspNetUserL struct{}

var (
	aspNetUserAllColumns            = []string{"Id", "UserName", "NormalizedUserName", "Email", "NormalizedEmail", "EmailConfirmed", "PasswordHash", "SecurityStamp", "ConcurrencyStamp", "PhoneNumber", "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEnd", "LockoutEnabled", "AccessFailedCount", "UserImage", "Category", "UserID"}
	aspNetUserColumnsWithAuto       = []string{}
	aspNetUserColumnsWithoutDefault = []string{"Id", "UserName", "NormalizedUserName", "Email", "NormalizedEmail", "EmailConfirmed", "PasswordHash", "SecurityStamp", "ConcurrencyStamp", "PhoneNumber", "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEnd", "LockoutEnabled", "AccessFailedCount", "UserImage", "Category", "UserID"}
	aspNetUserColumnsWithDefault    = []string{}
	aspNetUserPrimaryKeyColumns     = []string{"Id"}
)

type (
	// AspNetUserSlice is an alias for a slice of pointers to AspNetUser.
	// This should almost always be used instead of []AspNetUser.
	AspNetUserSlice []*AspNetUser
	// AspNetUserHook is the signature for custom AspNetUser hook methods
	AspNetUserHook func(context.Context, boil.ContextExecutor, *AspNetUser) error

	aspNetUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aspNetUserType                 = reflect.TypeOf(&AspNetUser{})
	aspNetUserMapping              = queries.MakeStructMapping(aspNetUserType)
	aspNetUserPrimaryKeyMapping, _ = queries.BindMapping(aspNetUserType, aspNetUserMapping, aspNetUserPrimaryKeyColumns)
	aspNetUserInsertCacheMut       sync.RWMutex
	aspNetUserInsertCache          = make(map[string]insertCache)
	aspNetUserUpdateCacheMut       sync.RWMutex
	aspNetUserUpdateCache          = make(map[string]updateCache)
	aspNetUserUpsertCacheMut       sync.RWMutex
	aspNetUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aspNetUserBeforeInsertHooks []AspNetUserHook
var aspNetUserBeforeUpdateHooks []AspNetUserHook
var aspNetUserBeforeDeleteHooks []AspNetUserHook
var aspNetUserBeforeUpsertHooks []AspNetUserHook

var aspNetUserAfterInsertHooks []AspNetUserHook
var aspNetUserAfterSelectHooks []AspNetUserHook
var aspNetUserAfterUpdateHooks []AspNetUserHook
var aspNetUserAfterDeleteHooks []AspNetUserHook
var aspNetUserAfterUpsertHooks []AspNetUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AspNetUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AspNetUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AspNetUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AspNetUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AspNetUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AspNetUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AspNetUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AspNetUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AspNetUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aspNetUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAspNetUserHook registers your hook function for all future operations.
func AddAspNetUserHook(hookPoint boil.HookPoint, aspNetUserHook AspNetUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		aspNetUserBeforeInsertHooks = append(aspNetUserBeforeInsertHooks, aspNetUserHook)
	case boil.BeforeUpdateHook:
		aspNetUserBeforeUpdateHooks = append(aspNetUserBeforeUpdateHooks, aspNetUserHook)
	case boil.BeforeDeleteHook:
		aspNetUserBeforeDeleteHooks = append(aspNetUserBeforeDeleteHooks, aspNetUserHook)
	case boil.BeforeUpsertHook:
		aspNetUserBeforeUpsertHooks = append(aspNetUserBeforeUpsertHooks, aspNetUserHook)
	case boil.AfterInsertHook:
		aspNetUserAfterInsertHooks = append(aspNetUserAfterInsertHooks, aspNetUserHook)
	case boil.AfterSelectHook:
		aspNetUserAfterSelectHooks = append(aspNetUserAfterSelectHooks, aspNetUserHook)
	case boil.AfterUpdateHook:
		aspNetUserAfterUpdateHooks = append(aspNetUserAfterUpdateHooks, aspNetUserHook)
	case boil.AfterDeleteHook:
		aspNetUserAfterDeleteHooks = append(aspNetUserAfterDeleteHooks, aspNetUserHook)
	case boil.AfterUpsertHook:
		aspNetUserAfterUpsertHooks = append(aspNetUserAfterUpsertHooks, aspNetUserHook)
	}
}

// One returns a single aspNetUser record from the query.
func (q aspNetUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AspNetUser, error) {
	o := &AspNetUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for AspNetUsers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AspNetUser records from the query.
func (q aspNetUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (AspNetUserSlice, error) {
	var o []*AspNetUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AspNetUser slice")
	}

	if len(aspNetUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AspNetUser records in the query.
func (q aspNetUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count AspNetUsers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aspNetUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if AspNetUsers exists")
	}

	return count > 0, nil
}

// AspNetUsers retrieves all the records using an executor.
func AspNetUsers(mods ...qm.QueryMod) aspNetUserQuery {
	mods = append(mods, qm.From("[dbo].[AspNetUsers]"))
	return aspNetUserQuery{NewQuery(mods...)}
}

// FindAspNetUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAspNetUser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AspNetUser, error) {
	aspNetUserObj := &AspNetUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[AspNetUsers] where [Id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, aspNetUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from AspNetUsers")
	}

	if err = aspNetUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aspNetUserObj, err
	}

	return aspNetUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AspNetUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetUsers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aspNetUserInsertCacheMut.RLock()
	cache, cached := aspNetUserInsertCache[key]
	aspNetUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aspNetUserAllColumns,
			aspNetUserColumnsWithDefault,
			aspNetUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aspNetUserType, aspNetUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aspNetUserType, aspNetUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[AspNetUsers] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[AspNetUsers] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into AspNetUsers")
	}

	if !cached {
		aspNetUserInsertCacheMut.Lock()
		aspNetUserInsertCache[key] = cache
		aspNetUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AspNetUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AspNetUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aspNetUserUpdateCacheMut.RLock()
	cache, cached := aspNetUserUpdateCache[key]
	aspNetUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aspNetUserAllColumns,
			aspNetUserPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, aspNetUserColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update AspNetUsers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[AspNetUsers] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, aspNetUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aspNetUserType, aspNetUserMapping, append(wl, aspNetUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update AspNetUsers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for AspNetUsers")
	}

	if !cached {
		aspNetUserUpdateCacheMut.Lock()
		aspNetUserUpdateCache[key] = cache
		aspNetUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aspNetUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for AspNetUsers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for AspNetUsers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AspNetUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[AspNetUsers] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aspNetUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aspNetUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aspNetUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AspNetUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no AspNetUsers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aspNetUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aspNetUserUpsertCacheMut.RLock()
	cache, cached := aspNetUserUpsertCache[key]
	aspNetUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			aspNetUserAllColumns,
			aspNetUserColumnsWithDefault,
			aspNetUserColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, aspNetUserColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(aspNetUserPrimaryKeyColumns, v) && strmangle.ContainsAny(aspNetUserColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert AspNetUsers, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, aspNetUserColumnsWithAuto)
		ret = strmangle.SetMerge(ret, aspNetUserColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			aspNetUserAllColumns,
			aspNetUserPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, aspNetUserColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert AspNetUsers, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[AspNetUsers]", aspNetUserPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(aspNetUserPrimaryKeyColumns))
		copy(whitelist, aspNetUserPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(aspNetUserType, aspNetUserMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aspNetUserType, aspNetUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert AspNetUsers")
	}

	if !cached {
		aspNetUserUpsertCacheMut.Lock()
		aspNetUserUpsertCache[key] = cache
		aspNetUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AspNetUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AspNetUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AspNetUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aspNetUserPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[AspNetUsers] WHERE [Id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from AspNetUsers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for AspNetUsers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aspNetUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aspNetUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from AspNetUsers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetUsers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AspNetUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aspNetUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[AspNetUsers] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aspNetUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for AspNetUsers")
	}

	if len(aspNetUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AspNetUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAspNetUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AspNetUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AspNetUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aspNetUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[AspNetUsers].* FROM [dbo].[AspNetUsers] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aspNetUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AspNetUserSlice")
	}

	*o = slice

	return nil
}

// AspNetUserExists checks if the AspNetUser row exists.
func AspNetUserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[AspNetUsers] where [Id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if AspNetUsers exists")
	}

	return exists, nil
}
