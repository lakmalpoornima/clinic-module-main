// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClinicServiceDetail is an object representing the database table.
type ClinicServiceDetail struct {
	ID              int       `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	DocumentNo      string    `boil:"DocumentNo" json:"DocumentNo" toml:"DocumentNo" yaml:"DocumentNo"`
	CompanyCode     string    `boil:"CompanyCode" json:"CompanyCode" toml:"CompanyCode" yaml:"CompanyCode"`
	Service         string    `boil:"Service" json:"Service" toml:"Service" yaml:"Service"`
	UnplanedService bool      `boil:"UnplanedService" json:"UnplanedService" toml:"UnplanedService" yaml:"UnplanedService"`
	SerAppNo        string    `boil:"SerAppNo" json:"SerAppNo" toml:"SerAppNo" yaml:"SerAppNo"`
	Completed       null.Bool `boil:"Completed" json:"Completed,omitempty" toml:"Completed" yaml:"Completed,omitempty"`

	R *clinicServiceDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clinicServiceDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClinicServiceDetailColumns = struct {
	ID              string
	DocumentNo      string
	CompanyCode     string
	Service         string
	UnplanedService string
	SerAppNo        string
	Completed       string
}{
	ID:              "ID",
	DocumentNo:      "DocumentNo",
	CompanyCode:     "CompanyCode",
	Service:         "Service",
	UnplanedService: "UnplanedService",
	SerAppNo:        "SerAppNo",
	Completed:       "Completed",
}

var ClinicServiceDetailTableColumns = struct {
	ID              string
	DocumentNo      string
	CompanyCode     string
	Service         string
	UnplanedService string
	SerAppNo        string
	Completed       string
}{
	ID:              "ClinicServiceDetail.ID",
	DocumentNo:      "ClinicServiceDetail.DocumentNo",
	CompanyCode:     "ClinicServiceDetail.CompanyCode",
	Service:         "ClinicServiceDetail.Service",
	UnplanedService: "ClinicServiceDetail.UnplanedService",
	SerAppNo:        "ClinicServiceDetail.SerAppNo",
	Completed:       "ClinicServiceDetail.Completed",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ClinicServiceDetailWhere = struct {
	ID              whereHelperint
	DocumentNo      whereHelperstring
	CompanyCode     whereHelperstring
	Service         whereHelperstring
	UnplanedService whereHelperbool
	SerAppNo        whereHelperstring
	Completed       whereHelpernull_Bool
}{
	ID:              whereHelperint{field: "[dbo].[ClinicServiceDetail].[ID]"},
	DocumentNo:      whereHelperstring{field: "[dbo].[ClinicServiceDetail].[DocumentNo]"},
	CompanyCode:     whereHelperstring{field: "[dbo].[ClinicServiceDetail].[CompanyCode]"},
	Service:         whereHelperstring{field: "[dbo].[ClinicServiceDetail].[Service]"},
	UnplanedService: whereHelperbool{field: "[dbo].[ClinicServiceDetail].[UnplanedService]"},
	SerAppNo:        whereHelperstring{field: "[dbo].[ClinicServiceDetail].[SerAppNo]"},
	Completed:       whereHelpernull_Bool{field: "[dbo].[ClinicServiceDetail].[Completed]"},
}

// ClinicServiceDetailRels is where relationship names are stored.
var ClinicServiceDetailRels = struct {
}{}

// clinicServiceDetailR is where relationships are stored.
type clinicServiceDetailR struct {
}

// NewStruct creates a new relationship struct
func (*clinicServiceDetailR) NewStruct() *clinicServiceDetailR {
	return &clinicServiceDetailR{}
}

// clinicServiceDetailL is where Load methods for each relationship are stored.
type clinicServiceDetailL struct{}

var (
	clinicServiceDetailAllColumns            = []string{"ID", "DocumentNo", "CompanyCode", "Service", "UnplanedService", "SerAppNo", "Completed"}
	clinicServiceDetailColumnsWithAuto       = []string{}
	clinicServiceDetailColumnsWithoutDefault = []string{}
	clinicServiceDetailColumnsWithDefault    = []string{"ID", "DocumentNo", "CompanyCode", "Service", "UnplanedService", "SerAppNo", "Completed"}
	clinicServiceDetailPrimaryKeyColumns     = []string{"ID"}
)

type (
	// ClinicServiceDetailSlice is an alias for a slice of pointers to ClinicServiceDetail.
	// This should almost always be used instead of []ClinicServiceDetail.
	ClinicServiceDetailSlice []*ClinicServiceDetail
	// ClinicServiceDetailHook is the signature for custom ClinicServiceDetail hook methods
	ClinicServiceDetailHook func(context.Context, boil.ContextExecutor, *ClinicServiceDetail) error

	clinicServiceDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clinicServiceDetailType                 = reflect.TypeOf(&ClinicServiceDetail{})
	clinicServiceDetailMapping              = queries.MakeStructMapping(clinicServiceDetailType)
	clinicServiceDetailPrimaryKeyMapping, _ = queries.BindMapping(clinicServiceDetailType, clinicServiceDetailMapping, clinicServiceDetailPrimaryKeyColumns)
	clinicServiceDetailInsertCacheMut       sync.RWMutex
	clinicServiceDetailInsertCache          = make(map[string]insertCache)
	clinicServiceDetailUpdateCacheMut       sync.RWMutex
	clinicServiceDetailUpdateCache          = make(map[string]updateCache)
	clinicServiceDetailUpsertCacheMut       sync.RWMutex
	clinicServiceDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clinicServiceDetailBeforeInsertHooks []ClinicServiceDetailHook
var clinicServiceDetailBeforeUpdateHooks []ClinicServiceDetailHook
var clinicServiceDetailBeforeDeleteHooks []ClinicServiceDetailHook
var clinicServiceDetailBeforeUpsertHooks []ClinicServiceDetailHook

var clinicServiceDetailAfterInsertHooks []ClinicServiceDetailHook
var clinicServiceDetailAfterSelectHooks []ClinicServiceDetailHook
var clinicServiceDetailAfterUpdateHooks []ClinicServiceDetailHook
var clinicServiceDetailAfterDeleteHooks []ClinicServiceDetailHook
var clinicServiceDetailAfterUpsertHooks []ClinicServiceDetailHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClinicServiceDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClinicServiceDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClinicServiceDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClinicServiceDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClinicServiceDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClinicServiceDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClinicServiceDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClinicServiceDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClinicServiceDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clinicServiceDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClinicServiceDetailHook registers your hook function for all future operations.
func AddClinicServiceDetailHook(hookPoint boil.HookPoint, clinicServiceDetailHook ClinicServiceDetailHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clinicServiceDetailBeforeInsertHooks = append(clinicServiceDetailBeforeInsertHooks, clinicServiceDetailHook)
	case boil.BeforeUpdateHook:
		clinicServiceDetailBeforeUpdateHooks = append(clinicServiceDetailBeforeUpdateHooks, clinicServiceDetailHook)
	case boil.BeforeDeleteHook:
		clinicServiceDetailBeforeDeleteHooks = append(clinicServiceDetailBeforeDeleteHooks, clinicServiceDetailHook)
	case boil.BeforeUpsertHook:
		clinicServiceDetailBeforeUpsertHooks = append(clinicServiceDetailBeforeUpsertHooks, clinicServiceDetailHook)
	case boil.AfterInsertHook:
		clinicServiceDetailAfterInsertHooks = append(clinicServiceDetailAfterInsertHooks, clinicServiceDetailHook)
	case boil.AfterSelectHook:
		clinicServiceDetailAfterSelectHooks = append(clinicServiceDetailAfterSelectHooks, clinicServiceDetailHook)
	case boil.AfterUpdateHook:
		clinicServiceDetailAfterUpdateHooks = append(clinicServiceDetailAfterUpdateHooks, clinicServiceDetailHook)
	case boil.AfterDeleteHook:
		clinicServiceDetailAfterDeleteHooks = append(clinicServiceDetailAfterDeleteHooks, clinicServiceDetailHook)
	case boil.AfterUpsertHook:
		clinicServiceDetailAfterUpsertHooks = append(clinicServiceDetailAfterUpsertHooks, clinicServiceDetailHook)
	}
}

// One returns a single clinicServiceDetail record from the query.
func (q clinicServiceDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClinicServiceDetail, error) {
	o := &ClinicServiceDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ClinicServiceDetail")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClinicServiceDetail records from the query.
func (q clinicServiceDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClinicServiceDetailSlice, error) {
	var o []*ClinicServiceDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ClinicServiceDetail slice")
	}

	if len(clinicServiceDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClinicServiceDetail records in the query.
func (q clinicServiceDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ClinicServiceDetail rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clinicServiceDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ClinicServiceDetail exists")
	}

	return count > 0, nil
}

// ClinicServiceDetails retrieves all the records using an executor.
func ClinicServiceDetails(mods ...qm.QueryMod) clinicServiceDetailQuery {
	mods = append(mods, qm.From("[dbo].[ClinicServiceDetail]"))
	return clinicServiceDetailQuery{NewQuery(mods...)}
}

// FindClinicServiceDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClinicServiceDetail(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ClinicServiceDetail, error) {
	clinicServiceDetailObj := &ClinicServiceDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[ClinicServiceDetail] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, clinicServiceDetailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ClinicServiceDetail")
	}

	if err = clinicServiceDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return clinicServiceDetailObj, err
	}

	return clinicServiceDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClinicServiceDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ClinicServiceDetail provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clinicServiceDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clinicServiceDetailInsertCacheMut.RLock()
	cache, cached := clinicServiceDetailInsertCache[key]
	clinicServiceDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clinicServiceDetailAllColumns,
			clinicServiceDetailColumnsWithDefault,
			clinicServiceDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clinicServiceDetailType, clinicServiceDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clinicServiceDetailType, clinicServiceDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[ClinicServiceDetail] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[ClinicServiceDetail] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ClinicServiceDetail")
	}

	if !cached {
		clinicServiceDetailInsertCacheMut.Lock()
		clinicServiceDetailInsertCache[key] = cache
		clinicServiceDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClinicServiceDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClinicServiceDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clinicServiceDetailUpdateCacheMut.RLock()
	cache, cached := clinicServiceDetailUpdateCache[key]
	clinicServiceDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clinicServiceDetailAllColumns,
			clinicServiceDetailPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, clinicServiceDetailColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ClinicServiceDetail, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[ClinicServiceDetail] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, clinicServiceDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clinicServiceDetailType, clinicServiceDetailMapping, append(wl, clinicServiceDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ClinicServiceDetail row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ClinicServiceDetail")
	}

	if !cached {
		clinicServiceDetailUpdateCacheMut.Lock()
		clinicServiceDetailUpdateCache[key] = cache
		clinicServiceDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clinicServiceDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ClinicServiceDetail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ClinicServiceDetail")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClinicServiceDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clinicServiceDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[ClinicServiceDetail] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, clinicServiceDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in clinicServiceDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all clinicServiceDetail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ClinicServiceDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ClinicServiceDetail provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clinicServiceDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clinicServiceDetailUpsertCacheMut.RLock()
	cache, cached := clinicServiceDetailUpsertCache[key]
	clinicServiceDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clinicServiceDetailAllColumns,
			clinicServiceDetailColumnsWithDefault,
			clinicServiceDetailColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, clinicServiceDetailColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(clinicServiceDetailPrimaryKeyColumns, v) && strmangle.ContainsAny(clinicServiceDetailColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert ClinicServiceDetail, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, clinicServiceDetailColumnsWithAuto)
		ret = strmangle.SetMerge(ret, clinicServiceDetailColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			clinicServiceDetailAllColumns,
			clinicServiceDetailPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, clinicServiceDetailColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ClinicServiceDetail, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[ClinicServiceDetail]", clinicServiceDetailPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(clinicServiceDetailPrimaryKeyColumns))
		copy(whitelist, clinicServiceDetailPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(clinicServiceDetailType, clinicServiceDetailMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clinicServiceDetailType, clinicServiceDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ClinicServiceDetail")
	}

	if !cached {
		clinicServiceDetailUpsertCacheMut.Lock()
		clinicServiceDetailUpsertCache[key] = cache
		clinicServiceDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClinicServiceDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClinicServiceDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClinicServiceDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clinicServiceDetailPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[ClinicServiceDetail] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ClinicServiceDetail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ClinicServiceDetail")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clinicServiceDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clinicServiceDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ClinicServiceDetail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ClinicServiceDetail")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClinicServiceDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clinicServiceDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clinicServiceDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[ClinicServiceDetail] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clinicServiceDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from clinicServiceDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ClinicServiceDetail")
	}

	if len(clinicServiceDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClinicServiceDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClinicServiceDetail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClinicServiceDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClinicServiceDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clinicServiceDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[ClinicServiceDetail].* FROM [dbo].[ClinicServiceDetail] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, clinicServiceDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClinicServiceDetailSlice")
	}

	*o = slice

	return nil
}

// ClinicServiceDetailExists checks if the ClinicServiceDetail row exists.
func ClinicServiceDetailExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[ClinicServiceDetail] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ClinicServiceDetail exists")
	}

	return exists, nil
}
