// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DoctorNoteFootScanedPoint is an object representing the database table.
type DoctorNoteFootScanedPoint struct {
	RightPointOne   bool        `boil:"RightPointOne" json:"RightPointOne" toml:"RightPointOne" yaml:"RightPointOne"`
	RightPointTwo   bool        `boil:"RightPointTwo" json:"RightPointTwo" toml:"RightPointTwo" yaml:"RightPointTwo"`
	RightPointThree bool        `boil:"RightPointThree" json:"RightPointThree" toml:"RightPointThree" yaml:"RightPointThree"`
	RightPointFour  bool        `boil:"RightPointFour" json:"RightPointFour" toml:"RightPointFour" yaml:"RightPointFour"`
	RightPointFive  bool        `boil:"RightPointFive" json:"RightPointFive" toml:"RightPointFive" yaml:"RightPointFive"`
	RightPointSix   bool        `boil:"RightPointSix" json:"RightPointSix" toml:"RightPointSix" yaml:"RightPointSix"`
	RightPointSeven bool        `boil:"RightPointSeven" json:"RightPointSeven" toml:"RightPointSeven" yaml:"RightPointSeven"`
	RightPointEight bool        `boil:"RightPointEight" json:"RightPointEight" toml:"RightPointEight" yaml:"RightPointEight"`
	RightPointNine  bool        `boil:"RightPointNine" json:"RightPointNine" toml:"RightPointNine" yaml:"RightPointNine"`
	RightPointTen   bool        `boil:"RightPointTen" json:"RightPointTen" toml:"RightPointTen" yaml:"RightPointTen"`
	LeftPointOne    bool        `boil:"LeftPointOne" json:"LeftPointOne" toml:"LeftPointOne" yaml:"LeftPointOne"`
	LeftPointTwo    bool        `boil:"LeftPointTwo" json:"LeftPointTwo" toml:"LeftPointTwo" yaml:"LeftPointTwo"`
	LeftPointThree  bool        `boil:"LeftPointThree" json:"LeftPointThree" toml:"LeftPointThree" yaml:"LeftPointThree"`
	LeftPointFour   bool        `boil:"LeftPointFour" json:"LeftPointFour" toml:"LeftPointFour" yaml:"LeftPointFour"`
	LeftPointFive   bool        `boil:"LeftPointFive" json:"LeftPointFive" toml:"LeftPointFive" yaml:"LeftPointFive"`
	LeftPointSix    bool        `boil:"LeftPointSix" json:"LeftPointSix" toml:"LeftPointSix" yaml:"LeftPointSix"`
	LeftPointSeven  bool        `boil:"LeftPointSeven" json:"LeftPointSeven" toml:"LeftPointSeven" yaml:"LeftPointSeven"`
	LeftPointEight  bool        `boil:"LeftPointEight" json:"LeftPointEight" toml:"LeftPointEight" yaml:"LeftPointEight"`
	LeftPointNine   bool        `boil:"LeftPointNine" json:"LeftPointNine" toml:"LeftPointNine" yaml:"LeftPointNine"`
	LeftPointTen    bool        `boil:"LeftPointTen" json:"LeftPointTen" toml:"LeftPointTen" yaml:"LeftPointTen"`
	ID              int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	DocumentID      null.String `boil:"DocumentID" json:"DocumentID,omitempty" toml:"DocumentID" yaml:"DocumentID,omitempty"`
	CreatedDate     time.Time   `boil:"CreatedDate" json:"CreatedDate" toml:"CreatedDate" yaml:"CreatedDate"`

	R *doctorNoteFootScanedPointR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L doctorNoteFootScanedPointL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DoctorNoteFootScanedPointColumns = struct {
	RightPointOne   string
	RightPointTwo   string
	RightPointThree string
	RightPointFour  string
	RightPointFive  string
	RightPointSix   string
	RightPointSeven string
	RightPointEight string
	RightPointNine  string
	RightPointTen   string
	LeftPointOne    string
	LeftPointTwo    string
	LeftPointThree  string
	LeftPointFour   string
	LeftPointFive   string
	LeftPointSix    string
	LeftPointSeven  string
	LeftPointEight  string
	LeftPointNine   string
	LeftPointTen    string
	ID              string
	DocumentID      string
	CreatedDate     string
}{
	RightPointOne:   "RightPointOne",
	RightPointTwo:   "RightPointTwo",
	RightPointThree: "RightPointThree",
	RightPointFour:  "RightPointFour",
	RightPointFive:  "RightPointFive",
	RightPointSix:   "RightPointSix",
	RightPointSeven: "RightPointSeven",
	RightPointEight: "RightPointEight",
	RightPointNine:  "RightPointNine",
	RightPointTen:   "RightPointTen",
	LeftPointOne:    "LeftPointOne",
	LeftPointTwo:    "LeftPointTwo",
	LeftPointThree:  "LeftPointThree",
	LeftPointFour:   "LeftPointFour",
	LeftPointFive:   "LeftPointFive",
	LeftPointSix:    "LeftPointSix",
	LeftPointSeven:  "LeftPointSeven",
	LeftPointEight:  "LeftPointEight",
	LeftPointNine:   "LeftPointNine",
	LeftPointTen:    "LeftPointTen",
	ID:              "ID",
	DocumentID:      "DocumentID",
	CreatedDate:     "CreatedDate",
}

var DoctorNoteFootScanedPointTableColumns = struct {
	RightPointOne   string
	RightPointTwo   string
	RightPointThree string
	RightPointFour  string
	RightPointFive  string
	RightPointSix   string
	RightPointSeven string
	RightPointEight string
	RightPointNine  string
	RightPointTen   string
	LeftPointOne    string
	LeftPointTwo    string
	LeftPointThree  string
	LeftPointFour   string
	LeftPointFive   string
	LeftPointSix    string
	LeftPointSeven  string
	LeftPointEight  string
	LeftPointNine   string
	LeftPointTen    string
	ID              string
	DocumentID      string
	CreatedDate     string
}{
	RightPointOne:   "DoctorNoteFootScanedPoints.RightPointOne",
	RightPointTwo:   "DoctorNoteFootScanedPoints.RightPointTwo",
	RightPointThree: "DoctorNoteFootScanedPoints.RightPointThree",
	RightPointFour:  "DoctorNoteFootScanedPoints.RightPointFour",
	RightPointFive:  "DoctorNoteFootScanedPoints.RightPointFive",
	RightPointSix:   "DoctorNoteFootScanedPoints.RightPointSix",
	RightPointSeven: "DoctorNoteFootScanedPoints.RightPointSeven",
	RightPointEight: "DoctorNoteFootScanedPoints.RightPointEight",
	RightPointNine:  "DoctorNoteFootScanedPoints.RightPointNine",
	RightPointTen:   "DoctorNoteFootScanedPoints.RightPointTen",
	LeftPointOne:    "DoctorNoteFootScanedPoints.LeftPointOne",
	LeftPointTwo:    "DoctorNoteFootScanedPoints.LeftPointTwo",
	LeftPointThree:  "DoctorNoteFootScanedPoints.LeftPointThree",
	LeftPointFour:   "DoctorNoteFootScanedPoints.LeftPointFour",
	LeftPointFive:   "DoctorNoteFootScanedPoints.LeftPointFive",
	LeftPointSix:    "DoctorNoteFootScanedPoints.LeftPointSix",
	LeftPointSeven:  "DoctorNoteFootScanedPoints.LeftPointSeven",
	LeftPointEight:  "DoctorNoteFootScanedPoints.LeftPointEight",
	LeftPointNine:   "DoctorNoteFootScanedPoints.LeftPointNine",
	LeftPointTen:    "DoctorNoteFootScanedPoints.LeftPointTen",
	ID:              "DoctorNoteFootScanedPoints.ID",
	DocumentID:      "DoctorNoteFootScanedPoints.DocumentID",
	CreatedDate:     "DoctorNoteFootScanedPoints.CreatedDate",
}

// Generated where

var DoctorNoteFootScanedPointWhere = struct {
	RightPointOne   whereHelperbool
	RightPointTwo   whereHelperbool
	RightPointThree whereHelperbool
	RightPointFour  whereHelperbool
	RightPointFive  whereHelperbool
	RightPointSix   whereHelperbool
	RightPointSeven whereHelperbool
	RightPointEight whereHelperbool
	RightPointNine  whereHelperbool
	RightPointTen   whereHelperbool
	LeftPointOne    whereHelperbool
	LeftPointTwo    whereHelperbool
	LeftPointThree  whereHelperbool
	LeftPointFour   whereHelperbool
	LeftPointFive   whereHelperbool
	LeftPointSix    whereHelperbool
	LeftPointSeven  whereHelperbool
	LeftPointEight  whereHelperbool
	LeftPointNine   whereHelperbool
	LeftPointTen    whereHelperbool
	ID              whereHelperint
	DocumentID      whereHelpernull_String
	CreatedDate     whereHelpertime_Time
}{
	RightPointOne:   whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointOne]"},
	RightPointTwo:   whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointTwo]"},
	RightPointThree: whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointThree]"},
	RightPointFour:  whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointFour]"},
	RightPointFive:  whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointFive]"},
	RightPointSix:   whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointSix]"},
	RightPointSeven: whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointSeven]"},
	RightPointEight: whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointEight]"},
	RightPointNine:  whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointNine]"},
	RightPointTen:   whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[RightPointTen]"},
	LeftPointOne:    whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointOne]"},
	LeftPointTwo:    whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointTwo]"},
	LeftPointThree:  whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointThree]"},
	LeftPointFour:   whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointFour]"},
	LeftPointFive:   whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointFive]"},
	LeftPointSix:    whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointSix]"},
	LeftPointSeven:  whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointSeven]"},
	LeftPointEight:  whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointEight]"},
	LeftPointNine:   whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointNine]"},
	LeftPointTen:    whereHelperbool{field: "[dbo].[DoctorNoteFootScanedPoints].[LeftPointTen]"},
	ID:              whereHelperint{field: "[dbo].[DoctorNoteFootScanedPoints].[ID]"},
	DocumentID:      whereHelpernull_String{field: "[dbo].[DoctorNoteFootScanedPoints].[DocumentID]"},
	CreatedDate:     whereHelpertime_Time{field: "[dbo].[DoctorNoteFootScanedPoints].[CreatedDate]"},
}

// DoctorNoteFootScanedPointRels is where relationship names are stored.
var DoctorNoteFootScanedPointRels = struct {
}{}

// doctorNoteFootScanedPointR is where relationships are stored.
type doctorNoteFootScanedPointR struct {
}

// NewStruct creates a new relationship struct
func (*doctorNoteFootScanedPointR) NewStruct() *doctorNoteFootScanedPointR {
	return &doctorNoteFootScanedPointR{}
}

// doctorNoteFootScanedPointL is where Load methods for each relationship are stored.
type doctorNoteFootScanedPointL struct{}

var (
	doctorNoteFootScanedPointAllColumns            = []string{"RightPointOne", "RightPointTwo", "RightPointThree", "RightPointFour", "RightPointFive", "RightPointSix", "RightPointSeven", "RightPointEight", "RightPointNine", "RightPointTen", "LeftPointOne", "LeftPointTwo", "LeftPointThree", "LeftPointFour", "LeftPointFive", "LeftPointSix", "LeftPointSeven", "LeftPointEight", "LeftPointNine", "LeftPointTen", "ID", "DocumentID", "CreatedDate"}
	doctorNoteFootScanedPointColumnsWithAuto       = []string{}
	doctorNoteFootScanedPointColumnsWithoutDefault = []string{"DocumentID"}
	doctorNoteFootScanedPointColumnsWithDefault    = []string{"RightPointOne", "RightPointTwo", "RightPointThree", "RightPointFour", "RightPointFive", "RightPointSix", "RightPointSeven", "RightPointEight", "RightPointNine", "RightPointTen", "LeftPointOne", "LeftPointTwo", "LeftPointThree", "LeftPointFour", "LeftPointFive", "LeftPointSix", "LeftPointSeven", "LeftPointEight", "LeftPointNine", "LeftPointTen", "ID", "CreatedDate"}
	doctorNoteFootScanedPointPrimaryKeyColumns     = []string{"ID"}
)

type (
	// DoctorNoteFootScanedPointSlice is an alias for a slice of pointers to DoctorNoteFootScanedPoint.
	// This should almost always be used instead of []DoctorNoteFootScanedPoint.
	DoctorNoteFootScanedPointSlice []*DoctorNoteFootScanedPoint
	// DoctorNoteFootScanedPointHook is the signature for custom DoctorNoteFootScanedPoint hook methods
	DoctorNoteFootScanedPointHook func(context.Context, boil.ContextExecutor, *DoctorNoteFootScanedPoint) error

	doctorNoteFootScanedPointQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	doctorNoteFootScanedPointType                 = reflect.TypeOf(&DoctorNoteFootScanedPoint{})
	doctorNoteFootScanedPointMapping              = queries.MakeStructMapping(doctorNoteFootScanedPointType)
	doctorNoteFootScanedPointPrimaryKeyMapping, _ = queries.BindMapping(doctorNoteFootScanedPointType, doctorNoteFootScanedPointMapping, doctorNoteFootScanedPointPrimaryKeyColumns)
	doctorNoteFootScanedPointInsertCacheMut       sync.RWMutex
	doctorNoteFootScanedPointInsertCache          = make(map[string]insertCache)
	doctorNoteFootScanedPointUpdateCacheMut       sync.RWMutex
	doctorNoteFootScanedPointUpdateCache          = make(map[string]updateCache)
	doctorNoteFootScanedPointUpsertCacheMut       sync.RWMutex
	doctorNoteFootScanedPointUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var doctorNoteFootScanedPointBeforeInsertHooks []DoctorNoteFootScanedPointHook
var doctorNoteFootScanedPointBeforeUpdateHooks []DoctorNoteFootScanedPointHook
var doctorNoteFootScanedPointBeforeDeleteHooks []DoctorNoteFootScanedPointHook
var doctorNoteFootScanedPointBeforeUpsertHooks []DoctorNoteFootScanedPointHook

var doctorNoteFootScanedPointAfterInsertHooks []DoctorNoteFootScanedPointHook
var doctorNoteFootScanedPointAfterSelectHooks []DoctorNoteFootScanedPointHook
var doctorNoteFootScanedPointAfterUpdateHooks []DoctorNoteFootScanedPointHook
var doctorNoteFootScanedPointAfterDeleteHooks []DoctorNoteFootScanedPointHook
var doctorNoteFootScanedPointAfterUpsertHooks []DoctorNoteFootScanedPointHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DoctorNoteFootScanedPoint) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedPointBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DoctorNoteFootScanedPoint) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedPointBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DoctorNoteFootScanedPoint) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedPointBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DoctorNoteFootScanedPoint) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedPointBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DoctorNoteFootScanedPoint) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedPointAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DoctorNoteFootScanedPoint) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedPointAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DoctorNoteFootScanedPoint) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedPointAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DoctorNoteFootScanedPoint) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedPointAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DoctorNoteFootScanedPoint) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range doctorNoteFootScanedPointAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDoctorNoteFootScanedPointHook registers your hook function for all future operations.
func AddDoctorNoteFootScanedPointHook(hookPoint boil.HookPoint, doctorNoteFootScanedPointHook DoctorNoteFootScanedPointHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		doctorNoteFootScanedPointBeforeInsertHooks = append(doctorNoteFootScanedPointBeforeInsertHooks, doctorNoteFootScanedPointHook)
	case boil.BeforeUpdateHook:
		doctorNoteFootScanedPointBeforeUpdateHooks = append(doctorNoteFootScanedPointBeforeUpdateHooks, doctorNoteFootScanedPointHook)
	case boil.BeforeDeleteHook:
		doctorNoteFootScanedPointBeforeDeleteHooks = append(doctorNoteFootScanedPointBeforeDeleteHooks, doctorNoteFootScanedPointHook)
	case boil.BeforeUpsertHook:
		doctorNoteFootScanedPointBeforeUpsertHooks = append(doctorNoteFootScanedPointBeforeUpsertHooks, doctorNoteFootScanedPointHook)
	case boil.AfterInsertHook:
		doctorNoteFootScanedPointAfterInsertHooks = append(doctorNoteFootScanedPointAfterInsertHooks, doctorNoteFootScanedPointHook)
	case boil.AfterSelectHook:
		doctorNoteFootScanedPointAfterSelectHooks = append(doctorNoteFootScanedPointAfterSelectHooks, doctorNoteFootScanedPointHook)
	case boil.AfterUpdateHook:
		doctorNoteFootScanedPointAfterUpdateHooks = append(doctorNoteFootScanedPointAfterUpdateHooks, doctorNoteFootScanedPointHook)
	case boil.AfterDeleteHook:
		doctorNoteFootScanedPointAfterDeleteHooks = append(doctorNoteFootScanedPointAfterDeleteHooks, doctorNoteFootScanedPointHook)
	case boil.AfterUpsertHook:
		doctorNoteFootScanedPointAfterUpsertHooks = append(doctorNoteFootScanedPointAfterUpsertHooks, doctorNoteFootScanedPointHook)
	}
}

// One returns a single doctorNoteFootScanedPoint record from the query.
func (q doctorNoteFootScanedPointQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DoctorNoteFootScanedPoint, error) {
	o := &DoctorNoteFootScanedPoint{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for DoctorNoteFootScanedPoints")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DoctorNoteFootScanedPoint records from the query.
func (q doctorNoteFootScanedPointQuery) All(ctx context.Context, exec boil.ContextExecutor) (DoctorNoteFootScanedPointSlice, error) {
	var o []*DoctorNoteFootScanedPoint

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DoctorNoteFootScanedPoint slice")
	}

	if len(doctorNoteFootScanedPointAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DoctorNoteFootScanedPoint records in the query.
func (q doctorNoteFootScanedPointQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count DoctorNoteFootScanedPoints rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q doctorNoteFootScanedPointQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if DoctorNoteFootScanedPoints exists")
	}

	return count > 0, nil
}

// DoctorNoteFootScanedPoints retrieves all the records using an executor.
func DoctorNoteFootScanedPoints(mods ...qm.QueryMod) doctorNoteFootScanedPointQuery {
	mods = append(mods, qm.From("[dbo].[DoctorNoteFootScanedPoints]"))
	return doctorNoteFootScanedPointQuery{NewQuery(mods...)}
}

// FindDoctorNoteFootScanedPoint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDoctorNoteFootScanedPoint(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DoctorNoteFootScanedPoint, error) {
	doctorNoteFootScanedPointObj := &DoctorNoteFootScanedPoint{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[DoctorNoteFootScanedPoints] where [ID]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, doctorNoteFootScanedPointObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from DoctorNoteFootScanedPoints")
	}

	if err = doctorNoteFootScanedPointObj.doAfterSelectHooks(ctx, exec); err != nil {
		return doctorNoteFootScanedPointObj, err
	}

	return doctorNoteFootScanedPointObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DoctorNoteFootScanedPoint) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteFootScanedPoints provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteFootScanedPointColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	doctorNoteFootScanedPointInsertCacheMut.RLock()
	cache, cached := doctorNoteFootScanedPointInsertCache[key]
	doctorNoteFootScanedPointInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			doctorNoteFootScanedPointAllColumns,
			doctorNoteFootScanedPointColumnsWithDefault,
			doctorNoteFootScanedPointColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(doctorNoteFootScanedPointType, doctorNoteFootScanedPointMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(doctorNoteFootScanedPointType, doctorNoteFootScanedPointMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[DoctorNoteFootScanedPoints] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[DoctorNoteFootScanedPoints] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into DoctorNoteFootScanedPoints")
	}

	if !cached {
		doctorNoteFootScanedPointInsertCacheMut.Lock()
		doctorNoteFootScanedPointInsertCache[key] = cache
		doctorNoteFootScanedPointInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DoctorNoteFootScanedPoint.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DoctorNoteFootScanedPoint) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	doctorNoteFootScanedPointUpdateCacheMut.RLock()
	cache, cached := doctorNoteFootScanedPointUpdateCache[key]
	doctorNoteFootScanedPointUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			doctorNoteFootScanedPointAllColumns,
			doctorNoteFootScanedPointPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, doctorNoteFootScanedPointColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update DoctorNoteFootScanedPoints, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[DoctorNoteFootScanedPoints] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, doctorNoteFootScanedPointPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(doctorNoteFootScanedPointType, doctorNoteFootScanedPointMapping, append(wl, doctorNoteFootScanedPointPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update DoctorNoteFootScanedPoints row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for DoctorNoteFootScanedPoints")
	}

	if !cached {
		doctorNoteFootScanedPointUpdateCacheMut.Lock()
		doctorNoteFootScanedPointUpdateCache[key] = cache
		doctorNoteFootScanedPointUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q doctorNoteFootScanedPointQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for DoctorNoteFootScanedPoints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for DoctorNoteFootScanedPoints")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DoctorNoteFootScanedPointSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteFootScanedPointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[DoctorNoteFootScanedPoints] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, doctorNoteFootScanedPointPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in doctorNoteFootScanedPoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all doctorNoteFootScanedPoint")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *DoctorNoteFootScanedPoint) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no DoctorNoteFootScanedPoints provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(doctorNoteFootScanedPointColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	doctorNoteFootScanedPointUpsertCacheMut.RLock()
	cache, cached := doctorNoteFootScanedPointUpsertCache[key]
	doctorNoteFootScanedPointUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			doctorNoteFootScanedPointAllColumns,
			doctorNoteFootScanedPointColumnsWithDefault,
			doctorNoteFootScanedPointColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, doctorNoteFootScanedPointColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(doctorNoteFootScanedPointPrimaryKeyColumns, v) && strmangle.ContainsAny(doctorNoteFootScanedPointColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert DoctorNoteFootScanedPoints, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, doctorNoteFootScanedPointColumnsWithAuto)
		ret = strmangle.SetMerge(ret, doctorNoteFootScanedPointColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			doctorNoteFootScanedPointAllColumns,
			doctorNoteFootScanedPointPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, doctorNoteFootScanedPointColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert DoctorNoteFootScanedPoints, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[DoctorNoteFootScanedPoints]", doctorNoteFootScanedPointPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(doctorNoteFootScanedPointPrimaryKeyColumns))
		copy(whitelist, doctorNoteFootScanedPointPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(doctorNoteFootScanedPointType, doctorNoteFootScanedPointMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(doctorNoteFootScanedPointType, doctorNoteFootScanedPointMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert DoctorNoteFootScanedPoints")
	}

	if !cached {
		doctorNoteFootScanedPointUpsertCacheMut.Lock()
		doctorNoteFootScanedPointUpsertCache[key] = cache
		doctorNoteFootScanedPointUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DoctorNoteFootScanedPoint record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DoctorNoteFootScanedPoint) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DoctorNoteFootScanedPoint provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), doctorNoteFootScanedPointPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[DoctorNoteFootScanedPoints] WHERE [ID]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from DoctorNoteFootScanedPoints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for DoctorNoteFootScanedPoints")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q doctorNoteFootScanedPointQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no doctorNoteFootScanedPointQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from DoctorNoteFootScanedPoints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteFootScanedPoints")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DoctorNoteFootScanedPointSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(doctorNoteFootScanedPointBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteFootScanedPointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[DoctorNoteFootScanedPoints] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteFootScanedPointPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from doctorNoteFootScanedPoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for DoctorNoteFootScanedPoints")
	}

	if len(doctorNoteFootScanedPointAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DoctorNoteFootScanedPoint) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDoctorNoteFootScanedPoint(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DoctorNoteFootScanedPointSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DoctorNoteFootScanedPointSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), doctorNoteFootScanedPointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[DoctorNoteFootScanedPoints].* FROM [dbo].[DoctorNoteFootScanedPoints] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, doctorNoteFootScanedPointPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DoctorNoteFootScanedPointSlice")
	}

	*o = slice

	return nil
}

// DoctorNoteFootScanedPointExists checks if the DoctorNoteFootScanedPoint row exists.
func DoctorNoteFootScanedPointExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[DoctorNoteFootScanedPoints] where [ID]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if DoctorNoteFootScanedPoints exists")
	}

	return exists, nil
}
