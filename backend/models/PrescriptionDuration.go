// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PrescriptionDuration is an object representing the database table.
type PrescriptionDuration struct {
	CItemCode        string      `boil:"cItemCode" json:"cItemCode" toml:"cItemCode" yaml:"cItemCode"`
	VcItemDescrition null.String `boil:"vcItemDescrition" json:"vcItemDescrition,omitempty" toml:"vcItemDescrition" yaml:"vcItemDescrition,omitempty"`

	R *prescriptionDurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L prescriptionDurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PrescriptionDurationColumns = struct {
	CItemCode        string
	VcItemDescrition string
}{
	CItemCode:        "cItemCode",
	VcItemDescrition: "vcItemDescrition",
}

var PrescriptionDurationTableColumns = struct {
	CItemCode        string
	VcItemDescrition string
}{
	CItemCode:        "PrescriptionDuration.cItemCode",
	VcItemDescrition: "PrescriptionDuration.vcItemDescrition",
}

// Generated where

var PrescriptionDurationWhere = struct {
	CItemCode        whereHelperstring
	VcItemDescrition whereHelpernull_String
}{
	CItemCode:        whereHelperstring{field: "[dbo].[PrescriptionDuration].[cItemCode]"},
	VcItemDescrition: whereHelpernull_String{field: "[dbo].[PrescriptionDuration].[vcItemDescrition]"},
}

// PrescriptionDurationRels is where relationship names are stored.
var PrescriptionDurationRels = struct {
}{}

// prescriptionDurationR is where relationships are stored.
type prescriptionDurationR struct {
}

// NewStruct creates a new relationship struct
func (*prescriptionDurationR) NewStruct() *prescriptionDurationR {
	return &prescriptionDurationR{}
}

// prescriptionDurationL is where Load methods for each relationship are stored.
type prescriptionDurationL struct{}

var (
	prescriptionDurationAllColumns            = []string{"cItemCode", "vcItemDescrition"}
	prescriptionDurationColumnsWithAuto       = []string{}
	prescriptionDurationColumnsWithoutDefault = []string{"cItemCode", "vcItemDescrition"}
	prescriptionDurationColumnsWithDefault    = []string{}
	prescriptionDurationPrimaryKeyColumns     = []string{"cItemCode"}
)

type (
	// PrescriptionDurationSlice is an alias for a slice of pointers to PrescriptionDuration.
	// This should almost always be used instead of []PrescriptionDuration.
	PrescriptionDurationSlice []*PrescriptionDuration
	// PrescriptionDurationHook is the signature for custom PrescriptionDuration hook methods
	PrescriptionDurationHook func(context.Context, boil.ContextExecutor, *PrescriptionDuration) error

	prescriptionDurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	prescriptionDurationType                 = reflect.TypeOf(&PrescriptionDuration{})
	prescriptionDurationMapping              = queries.MakeStructMapping(prescriptionDurationType)
	prescriptionDurationPrimaryKeyMapping, _ = queries.BindMapping(prescriptionDurationType, prescriptionDurationMapping, prescriptionDurationPrimaryKeyColumns)
	prescriptionDurationInsertCacheMut       sync.RWMutex
	prescriptionDurationInsertCache          = make(map[string]insertCache)
	prescriptionDurationUpdateCacheMut       sync.RWMutex
	prescriptionDurationUpdateCache          = make(map[string]updateCache)
	prescriptionDurationUpsertCacheMut       sync.RWMutex
	prescriptionDurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var prescriptionDurationBeforeInsertHooks []PrescriptionDurationHook
var prescriptionDurationBeforeUpdateHooks []PrescriptionDurationHook
var prescriptionDurationBeforeDeleteHooks []PrescriptionDurationHook
var prescriptionDurationBeforeUpsertHooks []PrescriptionDurationHook

var prescriptionDurationAfterInsertHooks []PrescriptionDurationHook
var prescriptionDurationAfterSelectHooks []PrescriptionDurationHook
var prescriptionDurationAfterUpdateHooks []PrescriptionDurationHook
var prescriptionDurationAfterDeleteHooks []PrescriptionDurationHook
var prescriptionDurationAfterUpsertHooks []PrescriptionDurationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PrescriptionDuration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prescriptionDurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PrescriptionDuration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prescriptionDurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PrescriptionDuration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prescriptionDurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PrescriptionDuration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prescriptionDurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PrescriptionDuration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prescriptionDurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PrescriptionDuration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prescriptionDurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PrescriptionDuration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prescriptionDurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PrescriptionDuration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prescriptionDurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PrescriptionDuration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range prescriptionDurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPrescriptionDurationHook registers your hook function for all future operations.
func AddPrescriptionDurationHook(hookPoint boil.HookPoint, prescriptionDurationHook PrescriptionDurationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		prescriptionDurationBeforeInsertHooks = append(prescriptionDurationBeforeInsertHooks, prescriptionDurationHook)
	case boil.BeforeUpdateHook:
		prescriptionDurationBeforeUpdateHooks = append(prescriptionDurationBeforeUpdateHooks, prescriptionDurationHook)
	case boil.BeforeDeleteHook:
		prescriptionDurationBeforeDeleteHooks = append(prescriptionDurationBeforeDeleteHooks, prescriptionDurationHook)
	case boil.BeforeUpsertHook:
		prescriptionDurationBeforeUpsertHooks = append(prescriptionDurationBeforeUpsertHooks, prescriptionDurationHook)
	case boil.AfterInsertHook:
		prescriptionDurationAfterInsertHooks = append(prescriptionDurationAfterInsertHooks, prescriptionDurationHook)
	case boil.AfterSelectHook:
		prescriptionDurationAfterSelectHooks = append(prescriptionDurationAfterSelectHooks, prescriptionDurationHook)
	case boil.AfterUpdateHook:
		prescriptionDurationAfterUpdateHooks = append(prescriptionDurationAfterUpdateHooks, prescriptionDurationHook)
	case boil.AfterDeleteHook:
		prescriptionDurationAfterDeleteHooks = append(prescriptionDurationAfterDeleteHooks, prescriptionDurationHook)
	case boil.AfterUpsertHook:
		prescriptionDurationAfterUpsertHooks = append(prescriptionDurationAfterUpsertHooks, prescriptionDurationHook)
	}
}

// One returns a single prescriptionDuration record from the query.
func (q prescriptionDurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PrescriptionDuration, error) {
	o := &PrescriptionDuration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for PrescriptionDuration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PrescriptionDuration records from the query.
func (q prescriptionDurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (PrescriptionDurationSlice, error) {
	var o []*PrescriptionDuration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PrescriptionDuration slice")
	}

	if len(prescriptionDurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PrescriptionDuration records in the query.
func (q prescriptionDurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count PrescriptionDuration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q prescriptionDurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if PrescriptionDuration exists")
	}

	return count > 0, nil
}

// PrescriptionDurations retrieves all the records using an executor.
func PrescriptionDurations(mods ...qm.QueryMod) prescriptionDurationQuery {
	mods = append(mods, qm.From("[dbo].[PrescriptionDuration]"))
	return prescriptionDurationQuery{NewQuery(mods...)}
}

// FindPrescriptionDuration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPrescriptionDuration(ctx context.Context, exec boil.ContextExecutor, cItemCode string, selectCols ...string) (*PrescriptionDuration, error) {
	prescriptionDurationObj := &PrescriptionDuration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[PrescriptionDuration] where [cItemCode]=$1", sel,
	)

	q := queries.Raw(query, cItemCode)

	err := q.Bind(ctx, exec, prescriptionDurationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from PrescriptionDuration")
	}

	if err = prescriptionDurationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return prescriptionDurationObj, err
	}

	return prescriptionDurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PrescriptionDuration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PrescriptionDuration provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prescriptionDurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	prescriptionDurationInsertCacheMut.RLock()
	cache, cached := prescriptionDurationInsertCache[key]
	prescriptionDurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			prescriptionDurationAllColumns,
			prescriptionDurationColumnsWithDefault,
			prescriptionDurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(prescriptionDurationType, prescriptionDurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(prescriptionDurationType, prescriptionDurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[PrescriptionDuration] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[PrescriptionDuration] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into PrescriptionDuration")
	}

	if !cached {
		prescriptionDurationInsertCacheMut.Lock()
		prescriptionDurationInsertCache[key] = cache
		prescriptionDurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PrescriptionDuration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PrescriptionDuration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	prescriptionDurationUpdateCacheMut.RLock()
	cache, cached := prescriptionDurationUpdateCache[key]
	prescriptionDurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			prescriptionDurationAllColumns,
			prescriptionDurationPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, prescriptionDurationColumnsWithAuto)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update PrescriptionDuration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[PrescriptionDuration] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, prescriptionDurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(prescriptionDurationType, prescriptionDurationMapping, append(wl, prescriptionDurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update PrescriptionDuration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for PrescriptionDuration")
	}

	if !cached {
		prescriptionDurationUpdateCacheMut.Lock()
		prescriptionDurationUpdateCache[key] = cache
		prescriptionDurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q prescriptionDurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for PrescriptionDuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for PrescriptionDuration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PrescriptionDurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prescriptionDurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[PrescriptionDuration] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, prescriptionDurationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in prescriptionDuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all prescriptionDuration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *PrescriptionDuration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no PrescriptionDuration provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(prescriptionDurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	prescriptionDurationUpsertCacheMut.RLock()
	cache, cached := prescriptionDurationUpsertCache[key]
	prescriptionDurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			prescriptionDurationAllColumns,
			prescriptionDurationColumnsWithDefault,
			prescriptionDurationColumnsWithoutDefault,
			nzDefaults,
		)
		insert = strmangle.SetComplement(insert, prescriptionDurationColumnsWithAuto)
		for i, v := range insert {
			if strmangle.ContainsAny(prescriptionDurationPrimaryKeyColumns, v) && strmangle.ContainsAny(prescriptionDurationColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert PrescriptionDuration, could not build insert column list")
		}

		ret = strmangle.SetMerge(ret, prescriptionDurationColumnsWithAuto)
		ret = strmangle.SetMerge(ret, prescriptionDurationColumnsWithDefault)

		update := updateColumns.UpdateColumnSet(
			prescriptionDurationAllColumns,
			prescriptionDurationPrimaryKeyColumns,
		)
		update = strmangle.SetComplement(update, prescriptionDurationColumnsWithAuto)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert PrescriptionDuration, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[PrescriptionDuration]", prescriptionDurationPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(prescriptionDurationPrimaryKeyColumns))
		copy(whitelist, prescriptionDurationPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(prescriptionDurationType, prescriptionDurationMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(prescriptionDurationType, prescriptionDurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert PrescriptionDuration")
	}

	if !cached {
		prescriptionDurationUpsertCacheMut.Lock()
		prescriptionDurationUpsertCache[key] = cache
		prescriptionDurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PrescriptionDuration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PrescriptionDuration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PrescriptionDuration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), prescriptionDurationPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[PrescriptionDuration] WHERE [cItemCode]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from PrescriptionDuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for PrescriptionDuration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q prescriptionDurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no prescriptionDurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from PrescriptionDuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PrescriptionDuration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PrescriptionDurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(prescriptionDurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prescriptionDurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[PrescriptionDuration] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prescriptionDurationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from prescriptionDuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for PrescriptionDuration")
	}

	if len(prescriptionDurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PrescriptionDuration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPrescriptionDuration(ctx, exec, o.CItemCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PrescriptionDurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PrescriptionDurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), prescriptionDurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[PrescriptionDuration].* FROM [dbo].[PrescriptionDuration] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, prescriptionDurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PrescriptionDurationSlice")
	}

	*o = slice

	return nil
}

// PrescriptionDurationExists checks if the PrescriptionDuration row exists.
func PrescriptionDurationExists(ctx context.Context, exec boil.ContextExecutor, cItemCode string) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[PrescriptionDuration] where [cItemCode]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cItemCode)
	}
	row := exec.QueryRowContext(ctx, sql, cItemCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if PrescriptionDuration exists")
	}

	return exists, nil
}
